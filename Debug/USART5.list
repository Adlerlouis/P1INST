
USART5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a354  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800a508  0800a508  0001a508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a950  0800a950  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a950  0800a950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a958  0800a958  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000054c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012510  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026cd  00000000  00000000  00032757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fb8  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c45  00000000  00000000  00035de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000267d8  00000000  00000000  00036a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012469  00000000  00000000  0005d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eae07  00000000  00000000  0006f666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005928  00000000  00000000  0015a470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0015fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a4ec 	.word	0x0800a4ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800a4ec 	.word	0x0800a4ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f000 fd87 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f869 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f979 	bl	8001314 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001022:	f000 f921 	bl	8001268 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001026:	f000 f949 	bl	80012bc <MX_USB_OTG_HS_HCD_Init>
  MX_ADC1_Init();
 800102a:	f000 f8cb 	bl	80011c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <main+0xc8>)
 8001030:	f000 fa96 	bl	8001560 <RetargetInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//ADC
//PARA ESTE FORMATO USAR ESTE FORMATO USART CONSULTAR: https://shawnhymel.com/1873/how-to-use-printf-on-stm32/
	  HAL_ADC_Start(&hadc1);  //llamo a la funcion del ADC
 8001034:	4829      	ldr	r0, [pc, #164]	; (80010dc <main+0xcc>)
 8001036:	f000 fe21 	bl	8001c7c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);//hacemos un poleo de el ADC
 800103a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103e:	4827      	ldr	r0, [pc, #156]	; (80010dc <main+0xcc>)
 8001040:	f000 feee 	bl	8001e20 <HAL_ADC_PollForConversion>
	  lux =  HAL_ADC_GetValue(&hadc1);//mandamos el valor directo en el ADC
 8001044:	4825      	ldr	r0, [pc, #148]	; (80010dc <main+0xcc>)
 8001046:	f000 ff76 	bl	8001f36 <HAL_ADC_GetValue>
 800104a:	4603      	mov	r3, r0
 800104c:	617b      	str	r3, [r7, #20]
	  Vt= lux/(float)4096*3.3;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001058:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80010e0 <main+0xd0>
 800105c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001060:	ee16 0a90 	vmov	r0, s13
 8001064:	f7ff fa80 	bl	8000568 <__aeabi_f2d>
 8001068:	a319      	add	r3, pc, #100	; (adr r3, 80010d0 <main+0xc0>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fad3 	bl	8000618 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fdc5 	bl	8000c08 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	613b      	str	r3, [r7, #16]
	  t=Vt*100.0-3;
 8001082:	6938      	ldr	r0, [r7, #16]
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_f2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <main+0xd4>)
 800108e:	f7ff fac3 	bl	8000618 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <main+0xd8>)
 80010a0:	f7ff f902 	bl	80002a8 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fdac 	bl	8000c08 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	60fb      	str	r3, [r7, #12]
	        //  printf("\r\nADC: %d\r\n ",lux); //ADC CONVERSION
	         printf("%04.4f",t);//TEMPERATURA
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff fa57 	bl	8000568 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	480b      	ldr	r0, [pc, #44]	; (80010ec <main+0xdc>)
 80010c0:	f005 fca6 	bl	8006a10 <iprintf>

	      //   printf("\r\nTemperatura: %d\r\n ",(float)lux);//permite ver el codigo en punto floatante
             HAL_Delay(40);
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f000 fd71 	bl	8001bac <HAL_Delay>
	  HAL_ADC_Start(&hadc1);  //llamo a la funcion del ADC
 80010ca:	e7b3      	b.n	8001034 <main+0x24>
 80010cc:	f3af 8000 	nop.w
 80010d0:	66666666 	.word	0x66666666
 80010d4:	400a6666 	.word	0x400a6666
 80010d8:	20000238 	.word	0x20000238
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	45800000 	.word	0x45800000
 80010e4:	40590000 	.word	0x40590000
 80010e8:	40080000 	.word	0x40080000
 80010ec:	0800a508 	.word	0x0800a508

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	; 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2230      	movs	r2, #48	; 0x30
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 fda9 	bl	8006c56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SystemClock_Config+0xcc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <SystemClock_Config+0xcc>)
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <SystemClock_Config+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <SystemClock_Config+0xd0>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <SystemClock_Config+0xd0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001168:	2348      	movs	r3, #72	; 0x48
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001170:	2303      	movs	r3, #3
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fd6f 	bl	8003c5c <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001184:	f000 f9e6 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2102      	movs	r1, #2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 ffd1 	bl	800414c <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b0:	f000 f9d0 	bl	8001554 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_ADC1_Init+0x98>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <MX_ADC1_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_ADC1_Init+0x98>)
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <MX_ADC1_Init+0xa0>)
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_ADC1_Init+0x98>)
 8001210:	2201      	movs	r2, #1
 8001212:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_ADC1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_ADC1_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_ADC1_Init+0x98>)
 8001224:	f000 fce6 	bl	8001bf4 <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 f991 	bl	8001554 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001232:	2305      	movs	r3, #5
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_ADC1_Init+0x98>)
 8001244:	f000 fe84 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800124e:	f000 f981 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f0 	.word	0x200001f0
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_USART1_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 80012a0:	f003 fc54 	bl	8004b4c <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 f953 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000238 	.word	0x20000238
 80012b8:	40011000 	.word	0x40011000

080012bc <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_USB_OTG_HS_HCD_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012da:	2202      	movs	r2, #2
 80012dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012f8:	f001 faff 	bl	80028fa <HAL_HCD_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001302:	f000 f927 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000027c 	.word	0x2000027c
 8001310:	40040000 	.word	0x40040000

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4b7a      	ldr	r3, [pc, #488]	; (8001518 <MX_GPIO_Init+0x204>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a79      	ldr	r2, [pc, #484]	; (8001518 <MX_GPIO_Init+0x204>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b77      	ldr	r3, [pc, #476]	; (8001518 <MX_GPIO_Init+0x204>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b73      	ldr	r3, [pc, #460]	; (8001518 <MX_GPIO_Init+0x204>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a72      	ldr	r2, [pc, #456]	; (8001518 <MX_GPIO_Init+0x204>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <MX_GPIO_Init+0x204>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <MX_GPIO_Init+0x204>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <MX_GPIO_Init+0x204>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b69      	ldr	r3, [pc, #420]	; (8001518 <MX_GPIO_Init+0x204>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <MX_GPIO_Init+0x204>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a64      	ldr	r2, [pc, #400]	; (8001518 <MX_GPIO_Init+0x204>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <MX_GPIO_Init+0x204>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <MX_GPIO_Init+0x204>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <MX_GPIO_Init+0x204>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <MX_GPIO_Init+0x204>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <MX_GPIO_Init+0x204>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a56      	ldr	r2, [pc, #344]	; (8001518 <MX_GPIO_Init+0x204>)
 80013c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <MX_GPIO_Init+0x204>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2116      	movs	r1, #22
 80013d6:	4851      	ldr	r0, [pc, #324]	; (800151c <MX_GPIO_Init+0x208>)
 80013d8:	f001 fa76 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	484f      	ldr	r0, [pc, #316]	; (8001520 <MX_GPIO_Init+0x20c>)
 80013e2:	f001 fa71 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80013ec:	484d      	ldr	r0, [pc, #308]	; (8001524 <MX_GPIO_Init+0x210>)
 80013ee:	f001 fa6b 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013f8:	484b      	ldr	r0, [pc, #300]	; (8001528 <MX_GPIO_Init+0x214>)
 80013fa:	f001 fa65 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80013fe:	2316      	movs	r3, #22
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <MX_GPIO_Init+0x208>)
 8001416:	f001 f8ab 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800141a:	2307      	movs	r3, #7
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800141e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	483c      	ldr	r0, [pc, #240]	; (8001520 <MX_GPIO_Init+0x20c>)
 8001430:	f001 f89e 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4835      	ldr	r0, [pc, #212]	; (8001520 <MX_GPIO_Init+0x20c>)
 800144c:	f001 f890 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001454:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	482d      	ldr	r0, [pc, #180]	; (800151c <MX_GPIO_Init+0x208>)
 8001466:	f001 f883 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800146a:	2304      	movs	r3, #4
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	482b      	ldr	r0, [pc, #172]	; (800152c <MX_GPIO_Init+0x218>)
 800147e:	f001 f877 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4822      	ldr	r0, [pc, #136]	; (8001524 <MX_GPIO_Init+0x210>)
 800149a:	f001 f869 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800149e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_GPIO_Init+0x210>)
 80014b4:	f001 f85c 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80014b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4814      	ldr	r0, [pc, #80]	; (8001524 <MX_GPIO_Init+0x210>)
 80014d2:	f001 f84d 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <MX_GPIO_Init+0x214>)
 80014ec:	f001 f840 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80014f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_GPIO_Init+0x214>)
 800150a:	f001 f831 	bl	8002570 <HAL_GPIO_Init>

}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021800 	.word	0x40021800
 800152c:	40020400 	.word	0x40020400

08001530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001542:	f000 fb13 	bl	8001b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40001000 	.word	0x40001000

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <RetargetInit+0x28>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <RetargetInit+0x2c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6898      	ldr	r0, [r3, #8]
 8001574:	2300      	movs	r3, #0
 8001576:	2202      	movs	r2, #2
 8001578:	2100      	movs	r1, #0
 800157a:	f005 fa5b 	bl	8006a34 <setvbuf>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000580 	.word	0x20000580
 800158c:	20000064 	.word	0x20000064

08001590 <_isatty>:

int _isatty(int fd) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db04      	blt.n	80015a8 <_isatty+0x18>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	dc01      	bgt.n	80015a8 <_isatty+0x18>
    return 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e005      	b.n	80015b4 <_isatty+0x24>

  errno = EBADF;
 80015a8:	f005 fba8 	bl	8006cfc <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2209      	movs	r2, #9
 80015b0:	601a      	str	r2, [r3, #0]
  return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_write>:

int _write(int fd, char* ptr, int len) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d002      	beq.n	80015d4 <_write+0x18>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d111      	bne.n	80015f8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <_write+0x54>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	f003 fb00 	bl	8004be6 <HAL_UART_Transmit>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <_write+0x38>
      return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	e008      	b.n	8001606 <_write+0x4a>
    else
      return EIO;
 80015f4:	2305      	movs	r3, #5
 80015f6:	e006      	b.n	8001606 <_write+0x4a>
  }
  errno = EBADF;
 80015f8:	f005 fb80 	bl	8006cfc <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2209      	movs	r2, #9
 8001600:	601a      	str	r2, [r3, #0]
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000580 	.word	0x20000580

08001614 <_close>:

int _close(int fd) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db04      	blt.n	800162c <_close+0x18>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	dc01      	bgt.n	800162c <_close+0x18>
    return 0;
 8001628:	2300      	movs	r3, #0
 800162a:	e006      	b.n	800163a <_close+0x26>

  errno = EBADF;
 800162c:	f005 fb66 	bl	8006cfc <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	2209      	movs	r2, #9
 8001634:	601a      	str	r2, [r3, #0]
  return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800164e:	f005 fb55 	bl	8006cfc <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2209      	movs	r2, #9
 8001656:	601a      	str	r2, [r3, #0]
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_read>:

int _read(int fd, char* ptr, int len) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d110      	bne.n	8001698 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_read+0x4c>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	2201      	movs	r2, #1
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	f003 fb42 	bl	8004d0a <HAL_UART_Receive>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <_read+0x30>
      return 1;
 8001690:	2301      	movs	r3, #1
 8001692:	e008      	b.n	80016a6 <_read+0x42>
    else
      return EIO;
 8001694:	2305      	movs	r3, #5
 8001696:	e006      	b.n	80016a6 <_read+0x42>
  }
  errno = EBADF;
 8001698:	f005 fb30 	bl	8006cfc <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	2209      	movs	r2, #9
 80016a0:	601a      	str	r2, [r3, #0]
  return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000580 	.word	0x20000580

080016b4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db08      	blt.n	80016d6 <_fstat+0x22>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	dc05      	bgt.n	80016d6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d0:	605a      	str	r2, [r3, #4]
    return 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e005      	b.n	80016e2 <_fstat+0x2e>
  }

  errno = EBADF;
 80016d6:	f005 fb11 	bl	8006cfc <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2209      	movs	r2, #9
 80016de:	601a      	str	r2, [r3, #0]
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_ADC_MspInit+0x7c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d127      	bne.n	80017ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_ADC_MspInit+0x80>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_ADC_MspInit+0x80>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_ADC_MspInit+0x80>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_ADC_MspInit+0x80>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_ADC_MspInit+0x80>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_ADC_MspInit+0x80>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001796:	2320      	movs	r3, #32
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_ADC_MspInit+0x84>)
 80017aa:	f000 fee1 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_UART_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12c      	bne.n	8001840 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_UART_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_UART_MspInit+0x88>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800181e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001830:	2307      	movs	r3, #7
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_UART_MspInit+0x8c>)
 800183c:	f000 fe98 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40011000 	.word	0x40011000
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_HCD_MspInit+0xb0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d141      	bne.n	80018fa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4819      	ldr	r0, [pc, #100]	; (800190c <HAL_HCD_MspInit+0xb8>)
 80018a8:	f000 fe62 	bl	8002570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80018ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80018be:	230c      	movs	r3, #12
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_HCD_MspInit+0xb8>)
 80018ca:	f000 fe51 	bl	8002570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 80018d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_HCD_MspInit+0xb4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	204d      	movs	r0, #77	; 0x4d
 80018f0:	f000 fe14 	bl	800251c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80018f4:	204d      	movs	r0, #77	; 0x4d
 80018f6:	f000 fe2d 	bl	8002554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40040000 	.word	0x40040000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2036      	movs	r0, #54	; 0x36
 8001926:	f000 fdf9 	bl	800251c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800192a:	2036      	movs	r0, #54	; 0x36
 800192c:	f000 fe12 	bl	8002554 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_InitTick+0xa4>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_InitTick+0xa4>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_InitTick+0xa4>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800194c:	f107 0210 	add.w	r2, r7, #16
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fe18 	bl	800458c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800195c:	f002 fdee 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8001960:	4603      	mov	r3, r0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_InitTick+0xa8>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	3b01      	subs	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_InitTick+0xac>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_InitTick+0xb0>)
 8001978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_InitTick+0xac>)
 800197c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001980:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_InitTick+0xac>)
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_InitTick+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_InitTick+0xac>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_InitTick+0xac>)
 8001996:	f002 fe2b 	bl	80045f0 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d104      	bne.n	80019aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019a0:	4806      	ldr	r0, [pc, #24]	; (80019bc <HAL_InitTick+0xac>)
 80019a2:	f002 fe7f 	bl	80046a4 <HAL_TIM_Base_Start_IT>
 80019a6:	4603      	mov	r3, r0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3730      	adds	r7, #48	; 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	20000584 	.word	0x20000584
 80019c0:	40001000 	.word	0x40001000

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <NMI_Handler+0x4>

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM6_DAC_IRQHandler+0x10>)
 8001a22:	f002 feaf 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000584 	.word	0x20000584

08001a30 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <OTG_HS_IRQHandler+0x10>)
 8001a36:	f000 ffc2 	bl	80029be <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000027c 	.word	0x2000027c

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f005 f942 	bl	8006cfc <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20030000 	.word	0x20030000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	200005cc 	.word	0x200005cc
 8001aac:	20000720 	.word	0x20000720

08001ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ada:	490e      	ldr	r1, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afe:	f7ff ffd7 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f005 f901 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff fa83 	bl	8001010 <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b18:	0800a960 	.word	0x0800a960
  ldr r2, =_sbss
 8001b1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b20:	20000720 	.word	0x20000720

08001b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 fcd8 	bl	8002506 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f7ff feda 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fdc6 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	200005d0 	.word	0x200005d0

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200005d0 	.word	0x200005d0

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e033      	b.n	8001c72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fd92 	bl	800173c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c3a:	f023 0302 	bic.w	r3, r3, #2
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fab4 	bl	80021b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
 8001c62:	e001      	b.n	8001c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Start+0x1a>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e0b2      	b.n	8001dfc <HAL_ADC_Start+0x180>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d018      	beq.n	8001cde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_ADC_Start+0x18c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_ADC_Start+0x190>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9a      	lsrs	r2, r3, #18
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d17a      	bne.n	8001de2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f023 0206 	bic.w	r2, r3, #6
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12a      	bne.n	8001db8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_ADC_Start+0x198>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d015      	beq.n	8001d98 <HAL_ADC_Start+0x11c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_ADC_Start+0x19c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d105      	bne.n	8001d82 <HAL_ADC_Start+0x106>
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_ADC_Start+0x1a0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d136      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d130      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d129      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	e020      	b.n	8001dfa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_ADC_Start+0x198>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d114      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00b      	b.n	8001dfa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	40012300 	.word	0x40012300
 8001e14:	40012000 	.word	0x40012000
 8001e18:	40012100 	.word	0x40012100
 8001e1c:	40012200 	.word	0x40012200

08001e20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3c:	d113      	bne.n	8001e66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4c:	d10b      	bne.n	8001e66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e063      	b.n	8001f2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e66:	f7ff fe95 	bl	8001b94 <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e6c:	e021      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d01d      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_ADC_PollForConversion+0x6c>
 8001e7c:	f7ff fe8a 	bl	8001b94 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d212      	bcs.n	8001eb2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d00b      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e03d      	b.n	8001f2e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d1d6      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0212 	mvn.w	r2, #18
 8001ec8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d123      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11f      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e113      	b.n	8002194 <HAL_ADC_ConfigChannel+0x244>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d925      	bls.n	8001fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68d9      	ldr	r1, [r3, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	2207      	movs	r2, #7
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4403      	add	r3, r0
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e022      	b.n	800200e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	2207      	movs	r2, #7
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4403      	add	r3, r0
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d824      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b05      	subs	r3, #5
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b05      	subs	r3, #5
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	e04c      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b23      	subs	r3, #35	; 0x23
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b23      	subs	r3, #35	; 0x23
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
 80020b0:	e023      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b41      	subs	r3, #65	; 0x41
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_ADC_ConfigChannel+0x250>)
 80020fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10f      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x1f4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b11      	cmp	r3, #17
 8002142:	d122      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_ADC_ConfigChannel+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x260>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40012300 	.word	0x40012300
 80021a4:	40012000 	.word	0x40012000
 80021a8:	10000012 	.word	0x10000012
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <ADC_Init+0x1f0>)
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff4c 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252e:	f7ff ff61 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	6978      	ldr	r0, [r7, #20]
 800253a:	f7ff ffb1 	bl	80024a0 <NVIC_EncodePriority>
 800253e:	4602      	mov	r2, r0
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff80 	bl	800244c <__NVIC_SetPriority>
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff54 	bl	8002410 <__NVIC_EnableIRQ>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e177      	b.n	800287c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8166 	bne.w	8002876 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80c0 	beq.w	8002876 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_GPIO_Init+0x324>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_GPIO_Init+0x324>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_GPIO_Init+0x324>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a61      	ldr	r2, [pc, #388]	; (8002898 <HAL_GPIO_Init+0x328>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_GPIO_Init+0x32c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d037      	beq.n	80027ae <HAL_GPIO_Init+0x23e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <HAL_GPIO_Init+0x330>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d031      	beq.n	80027aa <HAL_GPIO_Init+0x23a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a56      	ldr	r2, [pc, #344]	; (80028a4 <HAL_GPIO_Init+0x334>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02b      	beq.n	80027a6 <HAL_GPIO_Init+0x236>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <HAL_GPIO_Init+0x338>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d025      	beq.n	80027a2 <HAL_GPIO_Init+0x232>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a54      	ldr	r2, [pc, #336]	; (80028ac <HAL_GPIO_Init+0x33c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01f      	beq.n	800279e <HAL_GPIO_Init+0x22e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a53      	ldr	r2, [pc, #332]	; (80028b0 <HAL_GPIO_Init+0x340>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0x22a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_GPIO_Init+0x344>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x226>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_GPIO_Init+0x348>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x222>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_GPIO_Init+0x34c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x21e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_GPIO_Init+0x350>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x21a>
 8002786:	2309      	movs	r3, #9
 8002788:	e012      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 800278a:	230a      	movs	r3, #10
 800278c:	e010      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 800278e:	2308      	movs	r3, #8
 8002790:	e00e      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 8002792:	2307      	movs	r3, #7
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 8002796:	2306      	movs	r3, #6
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x240>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_GPIO_Init+0x328>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_GPIO_Init+0x354>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a34      	ldr	r2, [pc, #208]	; (80028c4 <HAL_GPIO_Init+0x354>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_GPIO_Init+0x354>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <HAL_GPIO_Init+0x354>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_GPIO_Init+0x354>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002846:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_GPIO_Init+0x354>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_GPIO_Init+0x354>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_GPIO_Init+0x354>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae84 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021c00 	.word	0x40021c00
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40022400 	.word	0x40022400
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fc:	b08f      	sub	sp, #60	; 0x3c
 80028fe:	af0a      	add	r7, sp, #40	; 0x28
 8002900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e054      	b.n	80029b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe ff94 	bl	8001854 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2203      	movs	r2, #3
 8002930:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fdc3 	bl	80054d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	687e      	ldr	r6, [r7, #4]
 8002958:	466d      	mov	r5, sp
 800295a:	f106 0410 	add.w	r4, r6, #16
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800296a:	e885 0003 	stmia.w	r5, {r0, r1}
 800296e:	1d33      	adds	r3, r6, #4
 8002970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f002 fd4e 	bl	8005414 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fdba 	bl	80054f8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	687e      	ldr	r6, [r7, #4]
 800298c:	466d      	mov	r5, sp
 800298e:	f106 0410 	add.w	r4, r6, #16
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800299e:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a2:	1d33      	adds	r3, r6, #4
 80029a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f002 ff04 	bl	80057b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029be <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 feaa 	bl	800572e <USB_GetMode>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 80f6 	bne.w	8002bce <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fe8e 	bl	8005708 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80ec 	beq.w	8002bcc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fe85 	bl	8005708 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a08:	d104      	bne.n	8002a14 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a12:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fe75 	bl	8005708 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a28:	d104      	bne.n	8002a34 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f002 fe65 	bl	8005708 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a48:	d104      	bne.n	8002a54 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fe55 	bl	8005708 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d103      	bne.n	8002a70 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fe47 	bl	8005708 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a84:	d11c      	bne.n	8002ac0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a8e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	6938      	ldr	r0, [r7, #16]
 8002aa4:	f002 fd74 	bl	8005590 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	f002 fda5 	bl	80055f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 ff3d 	bl	8005934 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f89e 	bl	8002bfc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fe1f 	bl	8005708 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d102      	bne.n	8002adc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 f84c 	bl	8003b74 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fe11 	bl	8005708 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d106      	bne.n	8002afe <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f86f 	bl	8002bd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2208      	movs	r2, #8
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fe00 	bl	8005708 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d101      	bne.n	8002b16 <HAL_HCD_IRQHandler+0x158>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_HCD_IRQHandler+0x15a>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0210 	bic.w	r2, r2, #16
 8002b2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 ff4f 	bl	80039d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0210 	orr.w	r2, r2, #16
 8002b40:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fdde 	bl	8005708 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b56:	d13a      	bne.n	8002bce <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 ff23 	bl	80059a8 <USB_HC_ReadInterrupt>
 8002b62:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e025      	b.n	8002bb6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d018      	beq.n	8002bb0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d106      	bne.n	8002ba4 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f859 	bl	8002c54 <HCD_HC_IN_IRQHandler>
 8002ba2:	e005      	b.n	8002bb0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fba7 	bl	80032fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3d4      	bcc.n	8002b6a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc8:	615a      	str	r2, [r3, #20]
 8002bca:	e000      	b.n	8002bce <HAL_HCD_IRQHandler+0x210>
      return;
 8002bcc:	bf00      	nop
    }
  }
}
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
 8002c44:	4613      	mov	r3, r2
 8002c46:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d11a      	bne.n	8002cba <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2304      	movs	r3, #4
 8002c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fe89 	bl	80059ca <USB_HC_Halt>
 8002cb8:	e0af      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd0:	d11b      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3361      	adds	r3, #97	; 0x61
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fe61 	bl	80059ca <USB_HC_Halt>
 8002d08:	e087      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d109      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2320      	movs	r3, #32
 8002d30:	6093      	str	r3, [r2, #8]
 8002d32:	e072      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11a      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	2308      	movs	r3, #8
 8002d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3361      	adds	r3, #97	; 0x61
 8002d6a:	2205      	movs	r2, #5
 8002d6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 fe26 	bl	80059ca <USB_HC_Halt>
 8002d7e:	e04c      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d11b      	bne.n	8002dd0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002daa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3361      	adds	r3, #97	; 0x61
 8002dba:	2208      	movs	r2, #8
 8002dbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 fdfe 	bl	80059ca <USB_HC_Halt>
 8002dce:	e024      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d119      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	461a      	mov	r2, r3
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	2206      	movs	r2, #6
 8002e08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fdd8 	bl	80059ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d112      	bne.n	8002e58 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fdc4 	bl	80059ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e56:	e24e      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 80df 	bne.w	800302e <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d019      	beq.n	8002eac <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3348      	adds	r3, #72	; 0x48
 8002e86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	440b      	add	r3, r1
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	202c      	movs	r0, #44	; 0x2c
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3350      	adds	r3, #80	; 0x50
 8002eaa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3361      	adds	r3, #97	; 0x61
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	333f      	adds	r3, #63	; 0x3f
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	333f      	adds	r3, #63	; 0x3f
 8002f04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d111      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fd58 	bl	80059ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2310      	movs	r3, #16
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e03a      	b.n	8002fa4 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333f      	adds	r3, #63	; 0x3f
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d009      	beq.n	8002f56 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	333f      	adds	r3, #63	; 0x3f
 8002f50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d126      	bne.n	8002fa4 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	0151      	lsls	r1, r2, #5
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f74:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3360      	adds	r3, #96	; 0x60
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	b2d9      	uxtb	r1, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	202c      	movs	r0, #44	; 0x2c
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3360      	adds	r3, #96	; 0x60
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe4a 	bl	8002c38 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d12b      	bne.n	8003004 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3348      	adds	r3, #72	; 0x48
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	202c      	movs	r0, #44	; 0x2c
 8002fc2:	fb00 f202 	mul.w	r2, r0, r2
 8002fc6:	440a      	add	r2, r1
 8002fc8:	3240      	adds	r2, #64	; 0x40
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 818e 	beq.w	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3354      	adds	r3, #84	; 0x54
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2d8      	uxtb	r0, r3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3354      	adds	r3, #84	; 0x54
 8002ffe:	4602      	mov	r2, r0
 8003000:	701a      	strb	r2, [r3, #0]
}
 8003002:	e178      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3354      	adds	r3, #84	; 0x54
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2d8      	uxtb	r0, r3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3354      	adds	r3, #84	; 0x54
 8003028:	4602      	mov	r2, r0
 800302a:	701a      	strb	r2, [r3, #0]
}
 800302c:	e163      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	f040 80f6 	bne.w	8003232 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3361      	adds	r3, #97	; 0x61
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d109      	bne.n	800306e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3360      	adds	r3, #96	; 0x60
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e0c9      	b.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3361      	adds	r3, #97	; 0x61
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d109      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	2205      	movs	r2, #5
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e0b5      	b.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3361      	adds	r3, #97	; 0x61
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d009      	beq.n	80030be <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3361      	adds	r3, #97	; 0x61
 80030b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d150      	bne.n	8003160 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	202c      	movs	r0, #44	; 0x2c
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	440b      	add	r3, r1
 80030dc:	335c      	adds	r3, #92	; 0x5c
 80030de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	335c      	adds	r3, #92	; 0x5c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d912      	bls.n	800311a <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3360      	adds	r3, #96	; 0x60
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003118:	e073      	b.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	2202      	movs	r2, #2
 800312a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003142:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800314a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800315e:	e050      	b.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	; 0x61
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d122      	bne.n	80031ba <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800319c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e023      	b.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3361      	adds	r3, #97	; 0x61
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d119      	bne.n	8003202 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	202c      	movs	r0, #44	; 0x2c
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	440b      	add	r3, r1
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3360      	adds	r3, #96	; 0x60
 80031fe:	2204      	movs	r2, #4
 8003200:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	2302      	movs	r3, #2
 8003212:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	b2d9      	uxtb	r1, r3
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	202c      	movs	r0, #44	; 0x2c
 800321e:	fb00 f303 	mul.w	r3, r0, r3
 8003222:	4413      	add	r3, r2
 8003224:	3360      	adds	r3, #96	; 0x60
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fd04 	bl	8002c38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003230:	e061      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d156      	bne.n	80032f6 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	333f      	adds	r3, #63	; 0x3f
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d111      	bne.n	8003280 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	335c      	adds	r3, #92	; 0x5c
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fba6 	bl	80059ca <USB_HC_Halt>
 800327e:	e031      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333f      	adds	r3, #63	; 0x3f
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	333f      	adds	r3, #63	; 0x3f
 80032a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11d      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d110      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3361      	adds	r3, #97	; 0x61
 80032d0:	2203      	movs	r2, #3
 80032d2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fb73 	bl	80059ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	461a      	mov	r2, r3
 80032f2:	2310      	movs	r3, #16
 80032f4:	6093      	str	r3, [r2, #8]
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b088      	sub	sp, #32
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d11a      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2304      	movs	r3, #4
 800333e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	; 0x61
 800334e:	2206      	movs	r2, #6
 8003350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fb34 	bl	80059ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003362:	e331      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b20      	cmp	r3, #32
 8003378:	d12e      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	2320      	movs	r3, #32
 800338a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	333d      	adds	r3, #61	; 0x3d
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 8313 	bne.w	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	333d      	adds	r3, #61	; 0x3d
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 fafa 	bl	80059ca <USB_HC_Halt>
}
 80033d6:	e2f7      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ee:	d112      	bne.n	8003416 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003402:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fadb 	bl	80059ca <USB_HC_Halt>
}
 8003414:	e2d8      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d140      	bne.n	80034ae <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	335c      	adds	r3, #92	; 0x5c
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d111      	bne.n	8003478 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	333d      	adds	r3, #61	; 0x3d
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	2301      	movs	r3, #1
 8003488:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3361      	adds	r3, #97	; 0x61
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fa8f 	bl	80059ca <USB_HC_Halt>
}
 80034ac:	e28c      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d12c      	bne.n	800351e <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3361      	adds	r3, #97	; 0x61
 80034d2:	2204      	movs	r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	333d      	adds	r3, #61	; 0x3d
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	335c      	adds	r3, #92	; 0x5c
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fa60 	bl	80059ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	2340      	movs	r3, #64	; 0x40
 800351a:	6093      	str	r3, [r2, #8]
}
 800351c:	e254      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d11a      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2308      	movs	r3, #8
 8003544:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3361      	adds	r3, #97	; 0x61
 8003554:	2205      	movs	r2, #5
 8003556:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fa31 	bl	80059ca <USB_HC_Halt>
}
 8003568:	e22e      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d140      	bne.n	8003602 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	335c      	adds	r3, #92	; 0x5c
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3361      	adds	r3, #97	; 0x61
 80035a0:	2203      	movs	r2, #3
 80035a2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333d      	adds	r3, #61	; 0x3d
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d112      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333c      	adds	r3, #60	; 0x3c
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d108      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	333d      	adds	r3, #61	; 0x3d
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 f9ee 	bl	80059ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	461a      	mov	r2, r3
 80035fc:	2310      	movs	r3, #16
 80035fe:	6093      	str	r3, [r2, #8]
}
 8003600:	e1e2      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d164      	bne.n	80036e2 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3361      	adds	r3, #97	; 0x61
 800362e:	2206      	movs	r2, #6
 8003630:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f002 f9c4 	bl	80059ca <USB_HC_Halt>
 8003642:	e044      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	335c      	adds	r3, #92	; 0x5c
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	202c      	movs	r0, #44	; 0x2c
 800365c:	fb00 f303 	mul.w	r3, r0, r3
 8003660:	440b      	add	r3, r1
 8003662:	335c      	adds	r3, #92	; 0x5c
 8003664:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	335c      	adds	r3, #92	; 0x5c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d920      	bls.n	80036bc <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	335c      	adds	r3, #92	; 0x5c
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	2204      	movs	r2, #4
 800369c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	b2d9      	uxtb	r1, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	202c      	movs	r0, #44	; 0x2c
 80036a8:	fb00 f303 	mul.w	r3, r0, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3360      	adds	r3, #96	; 0x60
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fabf 	bl	8002c38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036ba:	e008      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3360      	adds	r3, #96	; 0x60
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	6093      	str	r3, [r2, #8]
}
 80036e0:	e172      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d11b      	bne.n	8003732 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3361      	adds	r3, #97	; 0x61
 8003708:	2208      	movs	r2, #8
 800370a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f002 f957 	bl	80059ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372e:	6093      	str	r3, [r2, #8]
}
 8003730:	e14a      	b.n	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 813f 	bne.w	80039c8 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3361      	adds	r3, #97	; 0x61
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d17d      	bne.n	800385a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	333f      	adds	r3, #63	; 0x3f
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d00a      	beq.n	800379a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	333f      	adds	r3, #63	; 0x3f
 8003792:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003794:	2b03      	cmp	r3, #3
 8003796:	f040 8100 	bne.w	800399a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3355      	adds	r3, #85	; 0x55
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2d8      	uxtb	r0, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3355      	adds	r3, #85	; 0x55
 80037c6:	4602      	mov	r2, r0
 80037c8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f040 80e3 	bne.w	800399a <HCD_HC_OUT_IRQHandler+0x69c>
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	334c      	adds	r3, #76	; 0x4c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80d8 	beq.w	800399a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	334c      	adds	r3, #76	; 0x4c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	202c      	movs	r0, #44	; 0x2c
 8003800:	fb00 f202 	mul.w	r2, r0, r2
 8003804:	440a      	add	r2, r1
 8003806:	3240      	adds	r2, #64	; 0x40
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	4413      	add	r3, r2
 800380c:	3b01      	subs	r3, #1
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	202c      	movs	r0, #44	; 0x2c
 8003814:	fb00 f202 	mul.w	r2, r0, r2
 8003818:	440a      	add	r2, r1
 800381a:	3240      	adds	r2, #64	; 0x40
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80b5 	beq.w	800399a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3355      	adds	r3, #85	; 0x55
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2d8      	uxtb	r0, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3355      	adds	r3, #85	; 0x55
 8003854:	4602      	mov	r2, r0
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e09f      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	3361      	adds	r3, #97	; 0x61
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d109      	bne.n	8003882 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3360      	adds	r3, #96	; 0x60
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e08b      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3361      	adds	r3, #97	; 0x61
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d109      	bne.n	80038aa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3360      	adds	r3, #96	; 0x60
 80038a4:	2202      	movs	r2, #2
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e077      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3361      	adds	r3, #97	; 0x61
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d109      	bne.n	80038d2 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3360      	adds	r3, #96	; 0x60
 80038cc:	2205      	movs	r2, #5
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e063      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3361      	adds	r3, #97	; 0x61
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d009      	beq.n	80038fa <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3361      	adds	r3, #97	; 0x61
 80038f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d14f      	bne.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	335c      	adds	r3, #92	; 0x5c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	202c      	movs	r0, #44	; 0x2c
 8003912:	fb00 f303 	mul.w	r3, r0, r3
 8003916:	440b      	add	r3, r1
 8003918:	335c      	adds	r3, #92	; 0x5c
 800391a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	335c      	adds	r3, #92	; 0x5c
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d912      	bls.n	8003956 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	335c      	adds	r3, #92	; 0x5c
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3360      	adds	r3, #96	; 0x60
 8003950:	2204      	movs	r2, #4
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e021      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3360      	adds	r3, #96	; 0x60
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800397e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003986:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	461a      	mov	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	461a      	mov	r2, r3
 80039a8:	2302      	movs	r3, #2
 80039aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	202c      	movs	r0, #44	; 0x2c
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3360      	adds	r3, #96	; 0x60
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff f938 	bl	8002c38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	0c5b      	lsrs	r3, r3, #17
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a04:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d004      	beq.n	8003a16 <HCD_RXQLVL_IRQHandler+0x46>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	f000 80a9 	beq.w	8003b66 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a14:	e0aa      	b.n	8003b6c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a6 	beq.w	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3344      	adds	r3, #68	; 0x44
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 809b 	beq.w	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3350      	adds	r3, #80	; 0x50
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	441a      	add	r2, r3
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	202c      	movs	r0, #44	; 0x2c
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	440b      	add	r3, r1
 8003a54:	334c      	adds	r3, #76	; 0x4c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d87a      	bhi.n	8003b52 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3344      	adds	r3, #68	; 0x44
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	b292      	uxth	r2, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f001 fdef 	bl	8005658 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3344      	adds	r3, #68	; 0x44
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	202c      	movs	r0, #44	; 0x2c
 8003a94:	fb00 f303 	mul.w	r3, r0, r3
 8003a98:	440b      	add	r3, r1
 8003a9a:	3344      	adds	r3, #68	; 0x44
 8003a9c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3350      	adds	r3, #80	; 0x50
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	202c      	movs	r0, #44	; 0x2c
 8003ab8:	fb00 f303 	mul.w	r3, r0, r3
 8003abc:	440b      	add	r3, r1
 8003abe:	3350      	adds	r3, #80	; 0x50
 8003ac0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	0cdb      	lsrs	r3, r3, #19
 8003ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3340      	adds	r3, #64	; 0x40
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d13c      	bne.n	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d039      	beq.n	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b0c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b14:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3354      	adds	r3, #84	; 0x54
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f083 0301 	eor.w	r3, r3, #1
 8003b3c:	b2d8      	uxtb	r0, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3354      	adds	r3, #84	; 0x54
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	701a      	strb	r2, [r3, #0]
      break;
 8003b50:	e00b      	b.n	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3360      	adds	r3, #96	; 0x60
 8003b60:	2204      	movs	r2, #4
 8003b62:	701a      	strb	r2, [r3, #0]
      break;
 8003b64:	e001      	b.n	8003b6a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b6a:	bf00      	nop
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ba0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d10b      	bne.n	8003bc4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff f816 	bl	8002be8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d132      	bne.n	8003c34 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d126      	bne.n	8003c2e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d113      	bne.n	8003c10 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf2:	d106      	bne.n	8003c02 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fe9a 	bl	8005934 <USB_InitFSLSPClkSel>
 8003c00:	e011      	b.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fe93 	bl	8005934 <USB_InitFSLSPClkSel>
 8003c0e:	e00a      	b.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c24:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe fff2 	bl	8002c10 <HAL_HCD_PortEnabled_Callback>
 8003c2c:	e002      	b.n	8003c34 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fe fff8 	bl	8002c24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d103      	bne.n	8003c46 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f043 0320 	orr.w	r3, r3, #32
 8003c44:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e267      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d075      	beq.n	8003d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d00c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d112      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c92:	4b82      	ldr	r3, [pc, #520]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05b      	beq.n	8003d64 <HAL_RCC_OscConfig+0x108>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d157      	bne.n	8003d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e242      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x74>
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a75      	ldr	r2, [pc, #468]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e01d      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x98>
 8003cda:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6f      	ldr	r2, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6c      	ldr	r2, [pc, #432]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cf4:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b66      	ldr	r3, [pc, #408]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd ff3e 	bl	8001b94 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fd ff3a 	bl	8001b94 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e207      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0xc0>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ff2a 	bl	8001b94 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd ff26 	bl	8001b94 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1f3      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	4b51      	ldr	r3, [pc, #324]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0xe8>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8a:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e1c7      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	e03a      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCC_OscConfig+0x244>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fedf 	bl	8001b94 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fd fedb 	bl	8001b94 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1a8      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4925      	ldr	r1, [pc, #148]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCC_OscConfig+0x244>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd febe 	bl	8001b94 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fd feba 	bl	8001b94 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e187      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d036      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCC_OscConfig+0x248>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fe9e 	bl	8001b94 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fd fe9a 	bl	8001b94 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e167      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x200>
 8003e7a:	e01b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x248>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fd fe87 	bl	8001b94 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	e00e      	b.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fe83 	bl	8001b94 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d907      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e150      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	42470000 	.word	0x42470000
 8003ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ea      	bne.n	8003e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8097 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b81      	ldr	r3, [pc, #516]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b77      	ldr	r3, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	4b74      	ldr	r3, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a73      	ldr	r2, [pc, #460]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0a:	f7fd fe43 	bl	8001b94 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fd fe3f 	bl	8001b94 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e10c      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x2ea>
 8003f38:	4b64      	ldr	r3, [pc, #400]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a63      	ldr	r2, [pc, #396]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	e01c      	b.n	8003f80 <HAL_RCC_OscConfig+0x324>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x30c>
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5e      	ldr	r2, [pc, #376]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a5b      	ldr	r2, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0x324>
 8003f68:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b55      	ldr	r3, [pc, #340]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a54      	ldr	r2, [pc, #336]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f023 0304 	bic.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fd fe04 	bl	8001b94 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd fe00 	bl	8001b94 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0cb      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	4b49      	ldr	r3, [pc, #292]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ee      	beq.n	8003f90 <HAL_RCC_OscConfig+0x334>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fdee 	bl	8001b94 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fd fdea 	bl	8001b94 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0b5      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a38      	ldr	r2, [pc, #224]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a1 	beq.w	800413c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b08      	cmp	r3, #8
 8004004:	d05c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d141      	bne.n	8004092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd fdbe 	bl	8001b94 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fd fdba 	bl	8001b94 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e087      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	491b      	ldr	r1, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fd fd93 	bl	8001b94 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004072:	f7fd fd8f 	bl	8001b94 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e05c      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x416>
 8004090:	e054      	b.n	800413c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd fd7c 	bl	8001b94 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd fd78 	bl	8001b94 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e045      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x444>
 80040be:	e03d      	b.n	800413c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e038      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40007000 	.word	0x40007000
 80040d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x4ec>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d028      	beq.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d121      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d11a      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004110:	4293      	cmp	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0cc      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b68      	ldr	r3, [pc, #416]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d90c      	bls.n	8004188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0b8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	494d      	ldr	r1, [pc, #308]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d044      	beq.n	800426c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d119      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d003      	beq.n	800420a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004206:	2b03      	cmp	r3, #3
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	4b3f      	ldr	r3, [pc, #252]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e067      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4934      	ldr	r1, [pc, #208]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423c:	f7fd fcaa 	bl	8001b94 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	e00a      	b.n	800425a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004244:	f7fd fca6 	bl	8001b94 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e04f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 020c 	and.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	429a      	cmp	r2, r3
 800426a:	d1eb      	bne.n	8004244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d20c      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4916      	ldr	r1, [pc, #88]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f821 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490a      	ldr	r1, [pc, #40]	; (800430c <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd fb0c 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023c00 	.word	0x40023c00
 8004308:	40023800 	.word	0x40023800
 800430c:	0800a510 	.word	0x0800a510
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b094      	sub	sp, #80	; 0x50
 800431e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	647b      	str	r3, [r7, #68]	; 0x44
 8004324:	2300      	movs	r3, #0
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	2300      	movs	r3, #0
 800432a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004330:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d00d      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0x40>
 800433c:	2b08      	cmp	r3, #8
 800433e:	f200 80e1 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004346:	2b04      	cmp	r3, #4
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x3a>
 800434a:	e0db      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b73      	ldr	r3, [pc, #460]	; (800451c <HAL_RCC_GetSysClockFreq+0x204>)
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004350:	e0db      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004352:	4b73      	ldr	r3, [pc, #460]	; (8004520 <HAL_RCC_GetSysClockFreq+0x208>)
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004356:	e0d8      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004358:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004362:	4b6d      	ldr	r3, [pc, #436]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d063      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436e:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	099b      	lsrs	r3, r3, #6
 8004374:	2200      	movs	r2, #0
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
 8004378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004380:	633b      	str	r3, [r7, #48]	; 0x30
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	0159      	lsls	r1, r3, #5
 8004398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439c:	0150      	lsls	r0, r2, #5
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4621      	mov	r1, r4
 80043a4:	1a51      	subs	r1, r2, r1
 80043a6:	6139      	str	r1, [r7, #16]
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb63 0301 	sbc.w	r3, r3, r1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043bc:	4659      	mov	r1, fp
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c6:	4651      	mov	r1, sl
 80043c8:	018a      	lsls	r2, r1, #6
 80043ca:	4651      	mov	r1, sl
 80043cc:	ebb2 0801 	subs.w	r8, r2, r1
 80043d0:	4659      	mov	r1, fp
 80043d2:	eb63 0901 	sbc.w	r9, r3, r1
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ea:	4690      	mov	r8, r2
 80043ec:	4699      	mov	r9, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	eb18 0303 	adds.w	r3, r8, r3
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	462b      	mov	r3, r5
 80043f8:	eb49 0303 	adc.w	r3, r9, r3
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800440a:	4629      	mov	r1, r5
 800440c:	024b      	lsls	r3, r1, #9
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004414:	4621      	mov	r1, r4
 8004416:	024a      	lsls	r2, r1, #9
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	2200      	movs	r2, #0
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
 8004422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004428:	f7fc fc3e 	bl	8000ca8 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004434:	e058      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	2200      	movs	r2, #0
 800443e:	4618      	mov	r0, r3
 8004440:	4611      	mov	r1, r2
 8004442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	0159      	lsls	r1, r3, #5
 800445e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004462:	0150      	lsls	r0, r2, #5
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4641      	mov	r1, r8
 800446a:	ebb2 0a01 	subs.w	sl, r2, r1
 800446e:	4649      	mov	r1, r9
 8004470:	eb63 0b01 	sbc.w	fp, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004488:	ebb2 040a 	subs.w	r4, r2, sl
 800448c:	eb63 050b 	sbc.w	r5, r3, fp
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	2200      	movs	r2, #0
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	61fa      	str	r2, [r7, #28]
 80044d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044dc:	f7fc fbe4 	bl	8000ca8 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x204>)
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800450c:	4618      	mov	r0, r3
 800450e:	3750      	adds	r7, #80	; 0x50
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800a520 	.word	0x0800a520

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	0800a520 	.word	0x0800a520

0800458c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	220f      	movs	r2, #15
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0203 	and.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_RCC_GetClockConfig+0x60>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f839 	bl	800468e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 f9d8 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e04e      	b.n	800475a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_TIM_Base_Start_IT+0xc4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d01d      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_TIM_Base_Start_IT+0xcc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIM_Base_Start_IT+0xd0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_TIM_Base_Start_IT+0xd4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_Base_Start_IT+0xd8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIM_Base_Start_IT+0xdc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8ee 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8e0 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8f1 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8c4 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8b6 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8c7 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f89a 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f88c 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f89d 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f870 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f862 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f873 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fe14 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f902 	bl	8004b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f838 	bl	80049d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0220 	mvn.w	r2, #32
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8cc 	bl	8004b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d027      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d023      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01f      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d017      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <TIM_Base_SetConfig+0x128>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00f      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <TIM_Base_SetConfig+0x130>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0x134>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <TIM_Base_SetConfig+0x138>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a23      	ldr	r2, [pc, #140]	; (8004b20 <TIM_Base_SetConfig+0x13c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40010400 	.word	0x40010400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	40001c00 	.word	0x40001c00
 8004b20:	40002000 	.word	0x40002000

08004b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e03f      	b.n	8004bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fe26 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9cb 	bl	8004f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08a      	sub	sp, #40	; 0x28
 8004bea:	af02      	add	r7, sp, #8
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d17c      	bne.n	8004d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_Transmit+0x2c>
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e075      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UART_Transmit+0x3e>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e06e      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c3a:	f7fc ffab 	bl	8001b94 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d108      	bne.n	8004c68 <HAL_UART_Transmit+0x82>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e003      	b.n	8004c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c78:	e02a      	b.n	8004cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	; 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f8e2 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e036      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	3302      	adds	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e007      	b.n	8004cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1cf      	bne.n	8004c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2140      	movs	r1, #64	; 0x40
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8b2 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 808c 	bne.w	8004e44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Receive+0x2e>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e084      	b.n	8004e46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive+0x40>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e07d      	b.n	8004e46 <HAL_UART_Receive+0x13c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2222      	movs	r2, #34	; 0x22
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d66:	f7fc ff15 	bl	8001b94 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Receive+0x8a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004da4:	e043      	b.n	8004e2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2120      	movs	r1, #32
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f84c 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e042      	b.n	8004e46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3302      	adds	r3, #2
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e01f      	b.n	8004e20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d007      	beq.n	8004dfa <HAL_UART_Receive+0xf0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_UART_Receive+0xfe>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e008      	b.n	8004e1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1b6      	bne.n	8004da6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b090      	sub	sp, #64	; 0x40
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5e:	e050      	b.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e66:	d04c      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e6e:	f7fc fe91 	bl	8001b94 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d241      	bcs.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e9e:	637a      	str	r2, [r7, #52]	; 0x34
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3314      	adds	r3, #20
 8004eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed2:	623a      	str	r2, [r7, #32]
 8004ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	69f9      	ldr	r1, [r7, #28]
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e00f      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d09f      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3740      	adds	r7, #64	; 0x40
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f30:	b0c0      	sub	sp, #256	; 0x100
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	ea40 0301 	orr.w	r3, r0, r1
 8004f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f84:	f021 010c 	bic.w	r1, r1, #12
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f92:	430b      	orrs	r3, r1
 8004f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	6999      	ldr	r1, [r3, #24]
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	ea40 0301 	orr.w	r3, r0, r1
 8004fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <UART_SetConfig+0x2cc>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d005      	beq.n	8004fcc <UART_SetConfig+0xa0>
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b8d      	ldr	r3, [pc, #564]	; (80051fc <UART_SetConfig+0x2d0>)
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d104      	bne.n	8004fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7ff faca 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fd4:	e003      	b.n	8004fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd6:	f7ff fab1 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8004fda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe8:	f040 810c 	bne.w	8005204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	1891      	adds	r1, r2, r2
 8005004:	65b9      	str	r1, [r7, #88]	; 0x58
 8005006:	415b      	adcs	r3, r3
 8005008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800500a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800500e:	4621      	mov	r1, r4
 8005010:	eb12 0801 	adds.w	r8, r2, r1
 8005014:	4629      	mov	r1, r5
 8005016:	eb43 0901 	adc.w	r9, r3, r1
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502e:	4690      	mov	r8, r2
 8005030:	4699      	mov	r9, r3
 8005032:	4623      	mov	r3, r4
 8005034:	eb18 0303 	adds.w	r3, r8, r3
 8005038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800503c:	462b      	mov	r3, r5
 800503e:	eb49 0303 	adc.w	r3, r9, r3
 8005042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005052:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800505a:	460b      	mov	r3, r1
 800505c:	18db      	adds	r3, r3, r3
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
 8005060:	4613      	mov	r3, r2
 8005062:	eb42 0303 	adc.w	r3, r2, r3
 8005066:	657b      	str	r3, [r7, #84]	; 0x54
 8005068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800506c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005070:	f7fb fe1a 	bl	8000ca8 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4b61      	ldr	r3, [pc, #388]	; (8005200 <UART_SetConfig+0x2d4>)
 800507a:	fba3 2302 	umull	r2, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	011c      	lsls	r4, r3, #4
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800508c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	1891      	adds	r1, r2, r2
 800509a:	64b9      	str	r1, [r7, #72]	; 0x48
 800509c:	415b      	adcs	r3, r3
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050a4:	4641      	mov	r1, r8
 80050a6:	eb12 0a01 	adds.w	sl, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0b01 	adc.w	fp, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c4:	4692      	mov	sl, r2
 80050c6:	469b      	mov	fp, r3
 80050c8:	4643      	mov	r3, r8
 80050ca:	eb1a 0303 	adds.w	r3, sl, r3
 80050ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050d2:	464b      	mov	r3, r9
 80050d4:	eb4b 0303 	adc.w	r3, fp, r3
 80050d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f0:	460b      	mov	r3, r1
 80050f2:	18db      	adds	r3, r3, r3
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
 80050f6:	4613      	mov	r3, r2
 80050f8:	eb42 0303 	adc.w	r3, r2, r3
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
 80050fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005106:	f7fb fdcf 	bl	8000ca8 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4611      	mov	r1, r2
 8005110:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <UART_SetConfig+0x2d4>)
 8005112:	fba3 2301 	umull	r2, r3, r3, r1
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2264      	movs	r2, #100	; 0x64
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	1acb      	subs	r3, r1, r3
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <UART_SetConfig+0x2d4>)
 8005128:	fba3 2302 	umull	r2, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005134:	441c      	add	r4, r3
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005148:	4642      	mov	r2, r8
 800514a:	464b      	mov	r3, r9
 800514c:	1891      	adds	r1, r2, r2
 800514e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005150:	415b      	adcs	r3, r3
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005158:	4641      	mov	r1, r8
 800515a:	1851      	adds	r1, r2, r1
 800515c:	6339      	str	r1, [r7, #48]	; 0x30
 800515e:	4649      	mov	r1, r9
 8005160:	414b      	adcs	r3, r1
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005170:	4659      	mov	r1, fp
 8005172:	00cb      	lsls	r3, r1, #3
 8005174:	4651      	mov	r1, sl
 8005176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517a:	4651      	mov	r1, sl
 800517c:	00ca      	lsls	r2, r1, #3
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	4603      	mov	r3, r0
 8005184:	4642      	mov	r2, r8
 8005186:	189b      	adds	r3, r3, r2
 8005188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800518c:	464b      	mov	r3, r9
 800518e:	460a      	mov	r2, r1
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051ac:	460b      	mov	r3, r1
 80051ae:	18db      	adds	r3, r3, r3
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b2:	4613      	mov	r3, r2
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051c2:	f7fb fd71 	bl	8000ca8 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <UART_SetConfig+0x2d4>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <UART_SetConfig+0x2d4>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4422      	add	r2, r4
 80051f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f4:	e106      	b.n	8005404 <UART_SetConfig+0x4d8>
 80051f6:	bf00      	nop
 80051f8:	40011000 	.word	0x40011000
 80051fc:	40011400 	.word	0x40011400
 8005200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800520e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005216:	4642      	mov	r2, r8
 8005218:	464b      	mov	r3, r9
 800521a:	1891      	adds	r1, r2, r2
 800521c:	6239      	str	r1, [r7, #32]
 800521e:	415b      	adcs	r3, r3
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005226:	4641      	mov	r1, r8
 8005228:	1854      	adds	r4, r2, r1
 800522a:	4649      	mov	r1, r9
 800522c:	eb43 0501 	adc.w	r5, r3, r1
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	00eb      	lsls	r3, r5, #3
 800523a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523e:	00e2      	lsls	r2, r4, #3
 8005240:	4614      	mov	r4, r2
 8005242:	461d      	mov	r5, r3
 8005244:	4643      	mov	r3, r8
 8005246:	18e3      	adds	r3, r4, r3
 8005248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800524c:	464b      	mov	r3, r9
 800524e:	eb45 0303 	adc.w	r3, r5, r3
 8005252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005272:	4629      	mov	r1, r5
 8005274:	008b      	lsls	r3, r1, #2
 8005276:	4621      	mov	r1, r4
 8005278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527c:	4621      	mov	r1, r4
 800527e:	008a      	lsls	r2, r1, #2
 8005280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005284:	f7fb fd10 	bl	8000ca8 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b60      	ldr	r3, [pc, #384]	; (8005410 <UART_SetConfig+0x4e4>)
 800528e:	fba3 2302 	umull	r2, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	011c      	lsls	r4, r3, #4
 8005296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	61b9      	str	r1, [r7, #24]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b8:	4641      	mov	r1, r8
 80052ba:	1851      	adds	r1, r2, r1
 80052bc:	6139      	str	r1, [r7, #16]
 80052be:	4649      	mov	r1, r9
 80052c0:	414b      	adcs	r3, r1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d0:	4659      	mov	r1, fp
 80052d2:	00cb      	lsls	r3, r1, #3
 80052d4:	4651      	mov	r1, sl
 80052d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052da:	4651      	mov	r1, sl
 80052dc:	00ca      	lsls	r2, r1, #3
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	4642      	mov	r2, r8
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052ec:	464b      	mov	r3, r9
 80052ee:	460a      	mov	r2, r1
 80052f0:	eb42 0303 	adc.w	r3, r2, r3
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	67bb      	str	r3, [r7, #120]	; 0x78
 8005302:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005310:	4649      	mov	r1, r9
 8005312:	008b      	lsls	r3, r1, #2
 8005314:	4641      	mov	r1, r8
 8005316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531a:	4641      	mov	r1, r8
 800531c:	008a      	lsls	r2, r1, #2
 800531e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005322:	f7fb fcc1 	bl	8000ca8 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4611      	mov	r1, r2
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <UART_SetConfig+0x4e4>)
 800532e:	fba3 2301 	umull	r2, r3, r3, r1
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	1acb      	subs	r3, r1, r3
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a33      	ldr	r2, [pc, #204]	; (8005410 <UART_SetConfig+0x4e4>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534c:	441c      	add	r4, r3
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	673b      	str	r3, [r7, #112]	; 0x70
 8005356:	677a      	str	r2, [r7, #116]	; 0x74
 8005358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	415b      	adcs	r3, r3
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800536c:	4641      	mov	r1, r8
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6039      	str	r1, [r7, #0]
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005384:	4659      	mov	r1, fp
 8005386:	00cb      	lsls	r3, r1, #3
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538e:	4651      	mov	r1, sl
 8005390:	00ca      	lsls	r2, r1, #3
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	4603      	mov	r3, r0
 8005398:	4642      	mov	r2, r8
 800539a:	189b      	adds	r3, r3, r2
 800539c:	66bb      	str	r3, [r7, #104]	; 0x68
 800539e:	464b      	mov	r3, r9
 80053a0:	460a      	mov	r2, r1
 80053a2:	eb42 0303 	adc.w	r3, r2, r3
 80053a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
 80053b2:	667a      	str	r2, [r7, #100]	; 0x64
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c0:	4649      	mov	r1, r9
 80053c2:	008b      	lsls	r3, r1, #2
 80053c4:	4641      	mov	r1, r8
 80053c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ca:	4641      	mov	r1, r8
 80053cc:	008a      	lsls	r2, r1, #2
 80053ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053d2:	f7fb fc69 	bl	8000ca8 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <UART_SetConfig+0x4e4>)
 80053dc:	fba3 1302 	umull	r1, r3, r3, r2
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	2164      	movs	r1, #100	; 0x64
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	3332      	adds	r3, #50	; 0x32
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <UART_SetConfig+0x4e4>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4422      	add	r2, r4
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800540a:	46bd      	mov	sp, r7
 800540c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005410:	51eb851f 	.word	0x51eb851f

08005414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005414:	b084      	sub	sp, #16
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	f107 001c 	add.w	r0, r7, #28
 8005422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d122      	bne.n	8005472 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f970 	bl	800574c <USB_CoreReset>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e01a      	b.n	80054a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f964 	bl	800574c <USB_CoreReset>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
 800549a:	e005      	b.n	80054a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10b      	bne.n	80054c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f043 0206 	orr.w	r2, r3, #6
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d2:	b004      	add	sp, #16
 80054d4:	4770      	bx	lr

080054d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d115      	bne.n	8005546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005526:	2001      	movs	r0, #1
 8005528:	f7fc fb40 	bl	8001bac <HAL_Delay>
      ms++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8fb 	bl	800572e <USB_GetMode>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d01e      	beq.n	800557c <USB_SetCurrentMode+0x84>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b31      	cmp	r3, #49	; 0x31
 8005542:	d9f0      	bls.n	8005526 <USB_SetCurrentMode+0x2e>
 8005544:	e01a      	b.n	800557c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d115      	bne.n	8005578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005558:	2001      	movs	r0, #1
 800555a:	f7fc fb27 	bl	8001bac <HAL_Delay>
      ms++;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8e2 	bl	800572e <USB_GetMode>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <USB_SetCurrentMode+0x84>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b31      	cmp	r3, #49	; 0x31
 8005574:	d9f0      	bls.n	8005558 <USB_SetCurrentMode+0x60>
 8005576:	e001      	b.n	800557c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e005      	b.n	8005588 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b32      	cmp	r3, #50	; 0x32
 8005580:	d101      	bne.n	8005586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <USB_FlushTxFifo+0x64>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e01b      	b.n	80055e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	daf2      	bge.n	800559e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	019b      	lsls	r3, r3, #6
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <USB_FlushTxFifo+0x64>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e006      	b.n	80055e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d0f0      	beq.n	80055c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	00030d40 	.word	0x00030d40

080055f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a11      	ldr	r2, [pc, #68]	; (8005654 <USB_FlushRxFifo+0x5c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e018      	b.n	8005648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	daf2      	bge.n	8005604 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2210      	movs	r2, #16
 8005626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a08      	ldr	r2, [pc, #32]	; (8005654 <USB_FlushRxFifo+0x5c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e006      	b.n	8005648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d0f0      	beq.n	8005628 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	00030d40 	.word	0x00030d40

08005658 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005658:	b480      	push	{r7}
 800565a:	b08b      	sub	sp, #44	; 0x2c
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	b29b      	uxth	r3, r3
 8005674:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	e014      	b.n	80056ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	3301      	adds	r3, #1
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	3301      	adds	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	3301      	adds	r3, #1
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	3301      	adds	r3, #1
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3e6      	bcc.n	8005684 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056b6:	8bfb      	ldrh	r3, [r7, #30]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	461a      	mov	r2, r3
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	701a      	strb	r2, [r3, #0]
      i++;
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	3301      	adds	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056ee:	8bfb      	ldrh	r3, [r7, #30]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056f4:	8bfb      	ldrh	r3, [r7, #30]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ea      	bne.n	80056d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	372c      	adds	r7, #44	; 0x2c
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_CoreReset+0x64>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01b      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_CoreReset+0x64>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d0f0      	beq.n	8005782 <USB_CoreReset+0x36>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d018      	beq.n	800583c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10a      	bne.n	8005826 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	e014      	b.n	8005850 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e009      	b.n	8005850 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800584a:	f023 0304 	bic.w	r3, r3, #4
 800584e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005850:	2110      	movs	r1, #16
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fe9c 	bl	8005590 <USB_FlushTxFifo>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fec8 	bl	80055f8 <USB_FlushRxFifo>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e015      	b.n	80058a4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800588a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3e5      	bcc.n	8005878 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a13      	ldr	r2, [pc, #76]	; (8005920 <USB_HostInit+0x16c>)
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <USB_HostInit+0x170>)
 80058d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058dc:	e009      	b.n	80058f2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2280      	movs	r2, #128	; 0x80
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a10      	ldr	r2, [pc, #64]	; (8005928 <USB_HostInit+0x174>)
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a0f      	ldr	r2, [pc, #60]	; (800592c <USB_HostInit+0x178>)
 80058ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f043 0210 	orr.w	r2, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <USB_HostInit+0x17c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800591c:	b004      	add	sp, #16
 800591e:	4770      	bx	lr
 8005920:	01000200 	.word	0x01000200
 8005924:	00e00300 	.word	0x00e00300
 8005928:	00600080 	.word	0x00600080
 800592c:	004000e0 	.word	0x004000e0
 8005930:	a3200008 	.word	0xa3200008

08005934 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800596c:	4313      	orrs	r3, r2
 800596e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597c:	461a      	mov	r2, r3
 800597e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005982:	6053      	str	r3, [r2, #4]
 8005984:	e009      	b.n	800599a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d106      	bne.n	800599a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	461a      	mov	r2, r3
 8005994:	f241 7370 	movw	r3, #6000	; 0x1770
 8005998:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	b29b      	uxth	r3, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b089      	sub	sp, #36	; 0x24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	0c9b      	lsrs	r3, r3, #18
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	0fdb      	lsrs	r3, r3, #31
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d104      	bne.n	8005a24 <USB_HC_Halt+0x5a>
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e0c8      	b.n	8005bb6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <USB_HC_Halt+0x66>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d163      	bne.n	8005af8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 80ab 	bne.w	8005bb4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d133      	bne.n	8005ad2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aa8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab6:	d81d      	bhi.n	8005af4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ace:	d0ec      	beq.n	8005aaa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ad0:	e070      	b.n	8005bb4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005af0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af2:	e05f      	b.n	8005bb4 <USB_HC_Halt+0x1ea>
            break;
 8005af4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af6:	e05d      	b.n	8005bb4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d133      	bne.n	8005b90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b74:	d81d      	bhi.n	8005bb2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b8c:	d0ec      	beq.n	8005b68 <USB_HC_Halt+0x19e>
 8005b8e:	e011      	b.n	8005bb4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	e000      	b.n	8005bb4 <USB_HC_Halt+0x1ea>
          break;
 8005bb2:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3724      	adds	r7, #36	; 0x24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <__cvt>:
 8005bc2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc6:	ec55 4b10 	vmov	r4, r5, d0
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	460e      	mov	r6, r1
 8005bce:	4619      	mov	r1, r3
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	bfbb      	ittet	lt
 8005bd4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bd8:	461d      	movlt	r5, r3
 8005bda:	2300      	movge	r3, #0
 8005bdc:	232d      	movlt	r3, #45	; 0x2d
 8005bde:	700b      	strb	r3, [r1, #0]
 8005be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005be2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005be6:	4691      	mov	r9, r2
 8005be8:	f023 0820 	bic.w	r8, r3, #32
 8005bec:	bfbc      	itt	lt
 8005bee:	4622      	movlt	r2, r4
 8005bf0:	4614      	movlt	r4, r2
 8005bf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bf6:	d005      	beq.n	8005c04 <__cvt+0x42>
 8005bf8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bfc:	d100      	bne.n	8005c00 <__cvt+0x3e>
 8005bfe:	3601      	adds	r6, #1
 8005c00:	2102      	movs	r1, #2
 8005c02:	e000      	b.n	8005c06 <__cvt+0x44>
 8005c04:	2103      	movs	r1, #3
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	ab02      	add	r3, sp, #8
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	ec45 4b10 	vmov	d0, r4, r5
 8005c12:	4653      	mov	r3, sl
 8005c14:	4632      	mov	r2, r6
 8005c16:	f001 f92b 	bl	8006e70 <_dtoa_r>
 8005c1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c1e:	4607      	mov	r7, r0
 8005c20:	d102      	bne.n	8005c28 <__cvt+0x66>
 8005c22:	f019 0f01 	tst.w	r9, #1
 8005c26:	d022      	beq.n	8005c6e <__cvt+0xac>
 8005c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c2c:	eb07 0906 	add.w	r9, r7, r6
 8005c30:	d110      	bne.n	8005c54 <__cvt+0x92>
 8005c32:	783b      	ldrb	r3, [r7, #0]
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d10a      	bne.n	8005c4e <__cvt+0x8c>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c44:	b918      	cbnz	r0, 8005c4e <__cvt+0x8c>
 8005c46:	f1c6 0601 	rsb	r6, r6, #1
 8005c4a:	f8ca 6000 	str.w	r6, [sl]
 8005c4e:	f8da 3000 	ldr.w	r3, [sl]
 8005c52:	4499      	add	r9, r3
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa ff44 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c60:	b108      	cbz	r0, 8005c66 <__cvt+0xa4>
 8005c62:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c66:	2230      	movs	r2, #48	; 0x30
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	454b      	cmp	r3, r9
 8005c6c:	d307      	bcc.n	8005c7e <__cvt+0xbc>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c72:	1bdb      	subs	r3, r3, r7
 8005c74:	4638      	mov	r0, r7
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	b004      	add	sp, #16
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	9103      	str	r1, [sp, #12]
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e7f0      	b.n	8005c68 <__cvt+0xa6>

08005c86 <__exponent>:
 8005c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	bfb8      	it	lt
 8005c8e:	4249      	neglt	r1, r1
 8005c90:	f803 2b02 	strb.w	r2, [r3], #2
 8005c94:	bfb4      	ite	lt
 8005c96:	222d      	movlt	r2, #45	; 0x2d
 8005c98:	222b      	movge	r2, #43	; 0x2b
 8005c9a:	2909      	cmp	r1, #9
 8005c9c:	7042      	strb	r2, [r0, #1]
 8005c9e:	dd2a      	ble.n	8005cf6 <__exponent+0x70>
 8005ca0:	f10d 0207 	add.w	r2, sp, #7
 8005ca4:	4617      	mov	r7, r2
 8005ca6:	260a      	movs	r6, #10
 8005ca8:	4694      	mov	ip, r2
 8005caa:	fb91 f5f6 	sdiv	r5, r1, r6
 8005cae:	fb06 1415 	mls	r4, r6, r5, r1
 8005cb2:	3430      	adds	r4, #48	; 0x30
 8005cb4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005cb8:	460c      	mov	r4, r1
 8005cba:	2c63      	cmp	r4, #99	; 0x63
 8005cbc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	dcf1      	bgt.n	8005ca8 <__exponent+0x22>
 8005cc4:	3130      	adds	r1, #48	; 0x30
 8005cc6:	f1ac 0402 	sub.w	r4, ip, #2
 8005cca:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cce:	1c41      	adds	r1, r0, #1
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	42ba      	cmp	r2, r7
 8005cd4:	d30a      	bcc.n	8005cec <__exponent+0x66>
 8005cd6:	f10d 0209 	add.w	r2, sp, #9
 8005cda:	eba2 020c 	sub.w	r2, r2, ip
 8005cde:	42bc      	cmp	r4, r7
 8005ce0:	bf88      	it	hi
 8005ce2:	2200      	movhi	r2, #0
 8005ce4:	4413      	add	r3, r2
 8005ce6:	1a18      	subs	r0, r3, r0
 8005ce8:	b003      	add	sp, #12
 8005cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cf0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005cf4:	e7ed      	b.n	8005cd2 <__exponent+0x4c>
 8005cf6:	2330      	movs	r3, #48	; 0x30
 8005cf8:	3130      	adds	r1, #48	; 0x30
 8005cfa:	7083      	strb	r3, [r0, #2]
 8005cfc:	70c1      	strb	r1, [r0, #3]
 8005cfe:	1d03      	adds	r3, r0, #4
 8005d00:	e7f1      	b.n	8005ce6 <__exponent+0x60>
	...

08005d04 <_printf_float>:
 8005d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	ed2d 8b02 	vpush	{d8}
 8005d0c:	b08d      	sub	sp, #52	; 0x34
 8005d0e:	460c      	mov	r4, r1
 8005d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d14:	4616      	mov	r6, r2
 8005d16:	461f      	mov	r7, r3
 8005d18:	4605      	mov	r5, r0
 8005d1a:	f000 ffa5 	bl	8006c68 <_localeconv_r>
 8005d1e:	f8d0 a000 	ldr.w	sl, [r0]
 8005d22:	4650      	mov	r0, sl
 8005d24:	f7fa fab4 	bl	8000290 <strlen>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	9305      	str	r3, [sp, #20]
 8005d30:	f8d8 3000 	ldr.w	r3, [r8]
 8005d34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d38:	3307      	adds	r3, #7
 8005d3a:	f023 0307 	bic.w	r3, r3, #7
 8005d3e:	f103 0208 	add.w	r2, r3, #8
 8005d42:	f8c8 2000 	str.w	r2, [r8]
 8005d46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d54:	ee08 0a10 	vmov	s16, r0
 8005d58:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d60:	4b9e      	ldr	r3, [pc, #632]	; (8005fdc <_printf_float+0x2d8>)
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d66:	f7fa fef1 	bl	8000b4c <__aeabi_dcmpun>
 8005d6a:	bb88      	cbnz	r0, 8005dd0 <_printf_float+0xcc>
 8005d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d70:	4b9a      	ldr	r3, [pc, #616]	; (8005fdc <_printf_float+0x2d8>)
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d76:	f7fa fecb 	bl	8000b10 <__aeabi_dcmple>
 8005d7a:	bb48      	cbnz	r0, 8005dd0 <_printf_float+0xcc>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa feba 	bl	8000afc <__aeabi_dcmplt>
 8005d88:	b110      	cbz	r0, 8005d90 <_printf_float+0x8c>
 8005d8a:	232d      	movs	r3, #45	; 0x2d
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	4a93      	ldr	r2, [pc, #588]	; (8005fe0 <_printf_float+0x2dc>)
 8005d92:	4b94      	ldr	r3, [pc, #592]	; (8005fe4 <_printf_float+0x2e0>)
 8005d94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d98:	bf94      	ite	ls
 8005d9a:	4690      	movls	r8, r2
 8005d9c:	4698      	movhi	r8, r3
 8005d9e:	2303      	movs	r3, #3
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	9b05      	ldr	r3, [sp, #20]
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	f04f 0900 	mov.w	r9, #0
 8005dae:	9700      	str	r7, [sp, #0]
 8005db0:	4633      	mov	r3, r6
 8005db2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f9da 	bl	8006170 <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	f040 8090 	bne.w	8005ee2 <_printf_float+0x1de>
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc6:	b00d      	add	sp, #52	; 0x34
 8005dc8:	ecbd 8b02 	vpop	{d8}
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa feb8 	bl	8000b4c <__aeabi_dcmpun>
 8005ddc:	b140      	cbz	r0, 8005df0 <_printf_float+0xec>
 8005dde:	464b      	mov	r3, r9
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfbc      	itt	lt
 8005de4:	232d      	movlt	r3, #45	; 0x2d
 8005de6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dea:	4a7f      	ldr	r2, [pc, #508]	; (8005fe8 <_printf_float+0x2e4>)
 8005dec:	4b7f      	ldr	r3, [pc, #508]	; (8005fec <_printf_float+0x2e8>)
 8005dee:	e7d1      	b.n	8005d94 <_printf_float+0x90>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	d13f      	bne.n	8005e7c <_printf_float+0x178>
 8005dfc:	2306      	movs	r3, #6
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	9b05      	ldr	r3, [sp, #20]
 8005e02:	6861      	ldr	r1, [r4, #4]
 8005e04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9303      	str	r3, [sp, #12]
 8005e0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e12:	ab09      	add	r3, sp, #36	; 0x24
 8005e14:	ec49 8b10 	vmov	d0, r8, r9
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff fece 	bl	8005bc2 <__cvt>
 8005e26:	9b06      	ldr	r3, [sp, #24]
 8005e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e2a:	2b47      	cmp	r3, #71	; 0x47
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	d108      	bne.n	8005e42 <_printf_float+0x13e>
 8005e30:	1cc8      	adds	r0, r1, #3
 8005e32:	db02      	blt.n	8005e3a <_printf_float+0x136>
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	4299      	cmp	r1, r3
 8005e38:	dd41      	ble.n	8005ebe <_printf_float+0x1ba>
 8005e3a:	f1ab 0302 	sub.w	r3, fp, #2
 8005e3e:	fa5f fb83 	uxtb.w	fp, r3
 8005e42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e46:	d820      	bhi.n	8005e8a <_printf_float+0x186>
 8005e48:	3901      	subs	r1, #1
 8005e4a:	465a      	mov	r2, fp
 8005e4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e50:	9109      	str	r1, [sp, #36]	; 0x24
 8005e52:	f7ff ff18 	bl	8005c86 <__exponent>
 8005e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e58:	1813      	adds	r3, r2, r0
 8005e5a:	2a01      	cmp	r2, #1
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	dc02      	bgt.n	8005e68 <_printf_float+0x164>
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	07d2      	lsls	r2, r2, #31
 8005e66:	d501      	bpl.n	8005e6c <_printf_float+0x168>
 8005e68:	3301      	adds	r3, #1
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d09c      	beq.n	8005dae <_printf_float+0xaa>
 8005e74:	232d      	movs	r3, #45	; 0x2d
 8005e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7a:	e798      	b.n	8005dae <_printf_float+0xaa>
 8005e7c:	9a06      	ldr	r2, [sp, #24]
 8005e7e:	2a47      	cmp	r2, #71	; 0x47
 8005e80:	d1be      	bne.n	8005e00 <_printf_float+0xfc>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1bc      	bne.n	8005e00 <_printf_float+0xfc>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e7b9      	b.n	8005dfe <_printf_float+0xfa>
 8005e8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e8e:	d118      	bne.n	8005ec2 <_printf_float+0x1be>
 8005e90:	2900      	cmp	r1, #0
 8005e92:	6863      	ldr	r3, [r4, #4]
 8005e94:	dd0b      	ble.n	8005eae <_printf_float+0x1aa>
 8005e96:	6121      	str	r1, [r4, #16]
 8005e98:	b913      	cbnz	r3, 8005ea0 <_printf_float+0x19c>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	07d0      	lsls	r0, r2, #31
 8005e9e:	d502      	bpl.n	8005ea6 <_printf_float+0x1a2>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	440b      	add	r3, r1
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	e7de      	b.n	8005e6c <_printf_float+0x168>
 8005eae:	b913      	cbnz	r3, 8005eb6 <_printf_float+0x1b2>
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	07d2      	lsls	r2, r2, #31
 8005eb4:	d501      	bpl.n	8005eba <_printf_float+0x1b6>
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	e7f4      	b.n	8005ea4 <_printf_float+0x1a0>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e7f2      	b.n	8005ea4 <_printf_float+0x1a0>
 8005ebe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	db05      	blt.n	8005ed4 <_printf_float+0x1d0>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	6121      	str	r1, [r4, #16]
 8005ecc:	07d8      	lsls	r0, r3, #31
 8005ece:	d5ea      	bpl.n	8005ea6 <_printf_float+0x1a2>
 8005ed0:	1c4b      	adds	r3, r1, #1
 8005ed2:	e7e7      	b.n	8005ea4 <_printf_float+0x1a0>
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	bfd4      	ite	le
 8005ed8:	f1c1 0202 	rsble	r2, r1, #2
 8005edc:	2201      	movgt	r2, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	e7e0      	b.n	8005ea4 <_printf_float+0x1a0>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	055a      	lsls	r2, r3, #21
 8005ee6:	d407      	bmi.n	8005ef8 <_printf_float+0x1f4>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	4642      	mov	r2, r8
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d12c      	bne.n	8005f50 <_printf_float+0x24c>
 8005ef6:	e764      	b.n	8005dc2 <_printf_float+0xbe>
 8005ef8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005efc:	f240 80e0 	bls.w	80060c0 <_printf_float+0x3bc>
 8005f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	f7fa fdee 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d034      	beq.n	8005f7a <_printf_float+0x276>
 8005f10:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <_printf_float+0x2ec>)
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af51 	beq.w	8005dc2 <_printf_float+0xbe>
 8005f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f24:	429a      	cmp	r2, r3
 8005f26:	db02      	blt.n	8005f2e <_printf_float+0x22a>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	07d8      	lsls	r0, r3, #31
 8005f2c:	d510      	bpl.n	8005f50 <_printf_float+0x24c>
 8005f2e:	ee18 3a10 	vmov	r3, s16
 8005f32:	4652      	mov	r2, sl
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f af41 	beq.w	8005dc2 <_printf_float+0xbe>
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	f104 091a 	add.w	r9, r4, #26
 8005f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4543      	cmp	r3, r8
 8005f4e:	dc09      	bgt.n	8005f64 <_printf_float+0x260>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	f100 8107 	bmi.w	8006166 <_printf_float+0x462>
 8005f58:	68e0      	ldr	r0, [r4, #12]
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	bfb8      	it	lt
 8005f60:	4618      	movlt	r0, r3
 8005f62:	e730      	b.n	8005dc6 <_printf_float+0xc2>
 8005f64:	2301      	movs	r3, #1
 8005f66:	464a      	mov	r2, r9
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f af27 	beq.w	8005dc2 <_printf_float+0xbe>
 8005f74:	f108 0801 	add.w	r8, r8, #1
 8005f78:	e7e6      	b.n	8005f48 <_printf_float+0x244>
 8005f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dc39      	bgt.n	8005ff4 <_printf_float+0x2f0>
 8005f80:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <_printf_float+0x2ec>)
 8005f82:	2301      	movs	r3, #1
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f af19 	beq.w	8005dc2 <_printf_float+0xbe>
 8005f90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f94:	4313      	orrs	r3, r2
 8005f96:	d102      	bne.n	8005f9e <_printf_float+0x29a>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	07d9      	lsls	r1, r3, #31
 8005f9c:	d5d8      	bpl.n	8005f50 <_printf_float+0x24c>
 8005f9e:	ee18 3a10 	vmov	r3, s16
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f af09 	beq.w	8005dc2 <_printf_float+0xbe>
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	f104 0a1a 	add.w	sl, r4, #26
 8005fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fba:	425b      	negs	r3, r3
 8005fbc:	454b      	cmp	r3, r9
 8005fbe:	dc01      	bgt.n	8005fc4 <_printf_float+0x2c0>
 8005fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc2:	e792      	b.n	8005eea <_printf_float+0x1e6>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f aef7 	beq.w	8005dc2 <_printf_float+0xbe>
 8005fd4:	f109 0901 	add.w	r9, r9, #1
 8005fd8:	e7ee      	b.n	8005fb8 <_printf_float+0x2b4>
 8005fda:	bf00      	nop
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	0800a528 	.word	0x0800a528
 8005fe4:	0800a52c 	.word	0x0800a52c
 8005fe8:	0800a530 	.word	0x0800a530
 8005fec:	0800a534 	.word	0x0800a534
 8005ff0:	0800a538 	.word	0x0800a538
 8005ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bfa8      	it	ge
 8005ffc:	461a      	movge	r2, r3
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	4691      	mov	r9, r2
 8006002:	dc37      	bgt.n	8006074 <_printf_float+0x370>
 8006004:	f04f 0b00 	mov.w	fp, #0
 8006008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800600c:	f104 021a 	add.w	r2, r4, #26
 8006010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	eba3 0309 	sub.w	r3, r3, r9
 8006018:	455b      	cmp	r3, fp
 800601a:	dc33      	bgt.n	8006084 <_printf_float+0x380>
 800601c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006020:	429a      	cmp	r2, r3
 8006022:	db3b      	blt.n	800609c <_printf_float+0x398>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07da      	lsls	r2, r3, #31
 8006028:	d438      	bmi.n	800609c <_printf_float+0x398>
 800602a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800602e:	eba2 0903 	sub.w	r9, r2, r3
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	4591      	cmp	r9, r2
 8006038:	bfa8      	it	ge
 800603a:	4691      	movge	r9, r2
 800603c:	f1b9 0f00 	cmp.w	r9, #0
 8006040:	dc35      	bgt.n	80060ae <_printf_float+0x3aa>
 8006042:	f04f 0800 	mov.w	r8, #0
 8006046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800604a:	f104 0a1a 	add.w	sl, r4, #26
 800604e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	eba3 0309 	sub.w	r3, r3, r9
 8006058:	4543      	cmp	r3, r8
 800605a:	f77f af79 	ble.w	8005f50 <_printf_float+0x24c>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f aeaa 	beq.w	8005dc2 <_printf_float+0xbe>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	e7ec      	b.n	800604e <_printf_float+0x34a>
 8006074:	4613      	mov	r3, r2
 8006076:	4631      	mov	r1, r6
 8006078:	4642      	mov	r2, r8
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	d1c0      	bne.n	8006004 <_printf_float+0x300>
 8006082:	e69e      	b.n	8005dc2 <_printf_float+0xbe>
 8006084:	2301      	movs	r3, #1
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	9205      	str	r2, [sp, #20]
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	f43f ae97 	beq.w	8005dc2 <_printf_float+0xbe>
 8006094:	9a05      	ldr	r2, [sp, #20]
 8006096:	f10b 0b01 	add.w	fp, fp, #1
 800609a:	e7b9      	b.n	8006010 <_printf_float+0x30c>
 800609c:	ee18 3a10 	vmov	r3, s16
 80060a0:	4652      	mov	r2, sl
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d1be      	bne.n	800602a <_printf_float+0x326>
 80060ac:	e689      	b.n	8005dc2 <_printf_float+0xbe>
 80060ae:	9a05      	ldr	r2, [sp, #20]
 80060b0:	464b      	mov	r3, r9
 80060b2:	4442      	add	r2, r8
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	d1c1      	bne.n	8006042 <_printf_float+0x33e>
 80060be:	e680      	b.n	8005dc2 <_printf_float+0xbe>
 80060c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c2:	2a01      	cmp	r2, #1
 80060c4:	dc01      	bgt.n	80060ca <_printf_float+0x3c6>
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d53a      	bpl.n	8006140 <_printf_float+0x43c>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4642      	mov	r2, r8
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f ae74 	beq.w	8005dc2 <_printf_float+0xbe>
 80060da:	ee18 3a10 	vmov	r3, s16
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f ae6b 	beq.w	8005dc2 <_printf_float+0xbe>
 80060ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80060f8:	f7fa fcf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80060fc:	b9d8      	cbnz	r0, 8006136 <_printf_float+0x432>
 80060fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006102:	f108 0201 	add.w	r2, r8, #1
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	d10e      	bne.n	800612e <_printf_float+0x42a>
 8006110:	e657      	b.n	8005dc2 <_printf_float+0xbe>
 8006112:	2301      	movs	r3, #1
 8006114:	4652      	mov	r2, sl
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f ae50 	beq.w	8005dc2 <_printf_float+0xbe>
 8006122:	f108 0801 	add.w	r8, r8, #1
 8006126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	4543      	cmp	r3, r8
 800612c:	dcf1      	bgt.n	8006112 <_printf_float+0x40e>
 800612e:	464b      	mov	r3, r9
 8006130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006134:	e6da      	b.n	8005eec <_printf_float+0x1e8>
 8006136:	f04f 0800 	mov.w	r8, #0
 800613a:	f104 0a1a 	add.w	sl, r4, #26
 800613e:	e7f2      	b.n	8006126 <_printf_float+0x422>
 8006140:	2301      	movs	r3, #1
 8006142:	4642      	mov	r2, r8
 8006144:	e7df      	b.n	8006106 <_printf_float+0x402>
 8006146:	2301      	movs	r3, #1
 8006148:	464a      	mov	r2, r9
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f ae36 	beq.w	8005dc2 <_printf_float+0xbe>
 8006156:	f108 0801 	add.w	r8, r8, #1
 800615a:	68e3      	ldr	r3, [r4, #12]
 800615c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615e:	1a5b      	subs	r3, r3, r1
 8006160:	4543      	cmp	r3, r8
 8006162:	dcf0      	bgt.n	8006146 <_printf_float+0x442>
 8006164:	e6f8      	b.n	8005f58 <_printf_float+0x254>
 8006166:	f04f 0800 	mov.w	r8, #0
 800616a:	f104 0919 	add.w	r9, r4, #25
 800616e:	e7f4      	b.n	800615a <_printf_float+0x456>

08006170 <_printf_common>:
 8006170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	4616      	mov	r6, r2
 8006176:	4699      	mov	r9, r3
 8006178:	688a      	ldr	r2, [r1, #8]
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006180:	4293      	cmp	r3, r2
 8006182:	bfb8      	it	lt
 8006184:	4613      	movlt	r3, r2
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800618c:	4607      	mov	r7, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b10a      	cbz	r2, 8006196 <_printf_common+0x26>
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	6833      	ldrmi	r3, [r6, #0]
 800619e:	3302      	addmi	r3, #2
 80061a0:	6033      	strmi	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	f015 0506 	ands.w	r5, r5, #6
 80061a8:	d106      	bne.n	80061b8 <_printf_common+0x48>
 80061aa:	f104 0a19 	add.w	sl, r4, #25
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	6832      	ldr	r2, [r6, #0]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc26      	bgt.n	8006206 <_printf_common+0x96>
 80061b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061bc:	1e13      	subs	r3, r2, #0
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	bf18      	it	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d42b      	bmi.n	8006220 <_printf_common+0xb0>
 80061c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061cc:	4649      	mov	r1, r9
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c0      	blx	r8
 80061d2:	3001      	adds	r0, #1
 80061d4:	d01e      	beq.n	8006214 <_printf_common+0xa4>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	2b04      	cmp	r3, #4
 80061e0:	bf02      	ittt	eq
 80061e2:	68e5      	ldreq	r5, [r4, #12]
 80061e4:	6833      	ldreq	r3, [r6, #0]
 80061e6:	1aed      	subeq	r5, r5, r3
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	2600      	movs	r6, #0
 80061fc:	341a      	adds	r4, #26
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d11a      	bne.n	8006238 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e008      	b.n	8006218 <_printf_common+0xa8>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4649      	mov	r1, r9
 800620c:	4638      	mov	r0, r7
 800620e:	47c0      	blx	r8
 8006210:	3001      	adds	r0, #1
 8006212:	d103      	bne.n	800621c <_printf_common+0xac>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	3501      	adds	r5, #1
 800621e:	e7c6      	b.n	80061ae <_printf_common+0x3e>
 8006220:	18e1      	adds	r1, r4, r3
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	2030      	movs	r0, #48	; 0x30
 8006226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800622a:	4422      	add	r2, r4
 800622c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006234:	3302      	adds	r3, #2
 8006236:	e7c7      	b.n	80061c8 <_printf_common+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	4622      	mov	r2, r4
 800623c:	4649      	mov	r1, r9
 800623e:	4638      	mov	r0, r7
 8006240:	47c0      	blx	r8
 8006242:	3001      	adds	r0, #1
 8006244:	d0e6      	beq.n	8006214 <_printf_common+0xa4>
 8006246:	3601      	adds	r6, #1
 8006248:	e7d9      	b.n	80061fe <_printf_common+0x8e>
	...

0800624c <_printf_i>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	7e0f      	ldrb	r7, [r1, #24]
 8006252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006254:	2f78      	cmp	r7, #120	; 0x78
 8006256:	4691      	mov	r9, r2
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	469a      	mov	sl, r3
 800625e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006262:	d807      	bhi.n	8006274 <_printf_i+0x28>
 8006264:	2f62      	cmp	r7, #98	; 0x62
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x32>
 8006268:	2f00      	cmp	r7, #0
 800626a:	f000 80d4 	beq.w	8006416 <_printf_i+0x1ca>
 800626e:	2f58      	cmp	r7, #88	; 0x58
 8006270:	f000 80c0 	beq.w	80063f4 <_printf_i+0x1a8>
 8006274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800627c:	e03a      	b.n	80062f4 <_printf_i+0xa8>
 800627e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006282:	2b15      	cmp	r3, #21
 8006284:	d8f6      	bhi.n	8006274 <_printf_i+0x28>
 8006286:	a101      	add	r1, pc, #4	; (adr r1, 800628c <_printf_i+0x40>)
 8006288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006275 	.word	0x08006275
 8006298:	08006275 	.word	0x08006275
 800629c:	08006275 	.word	0x08006275
 80062a0:	08006275 	.word	0x08006275
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006275 	.word	0x08006275
 80062ac:	08006275 	.word	0x08006275
 80062b0:	08006275 	.word	0x08006275
 80062b4:	08006275 	.word	0x08006275
 80062b8:	080063fd 	.word	0x080063fd
 80062bc:	08006325 	.word	0x08006325
 80062c0:	080063b7 	.word	0x080063b7
 80062c4:	08006275 	.word	0x08006275
 80062c8:	08006275 	.word	0x08006275
 80062cc:	0800641f 	.word	0x0800641f
 80062d0:	08006275 	.word	0x08006275
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006275 	.word	0x08006275
 80062dc:	08006275 	.word	0x08006275
 80062e0:	080063bf 	.word	0x080063bf
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	602a      	str	r2, [r5, #0]
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f4:	2301      	movs	r3, #1
 80062f6:	e09f      	b.n	8006438 <_printf_i+0x1ec>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	0607      	lsls	r7, r0, #24
 80062fe:	f103 0104 	add.w	r1, r3, #4
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	d501      	bpl.n	800630a <_printf_i+0xbe>
 8006306:	681e      	ldr	r6, [r3, #0]
 8006308:	e003      	b.n	8006312 <_printf_i+0xc6>
 800630a:	0646      	lsls	r6, r0, #25
 800630c:	d5fb      	bpl.n	8006306 <_printf_i+0xba>
 800630e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006312:	2e00      	cmp	r6, #0
 8006314:	da03      	bge.n	800631e <_printf_i+0xd2>
 8006316:	232d      	movs	r3, #45	; 0x2d
 8006318:	4276      	negs	r6, r6
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631e:	485a      	ldr	r0, [pc, #360]	; (8006488 <_printf_i+0x23c>)
 8006320:	230a      	movs	r3, #10
 8006322:	e012      	b.n	800634a <_printf_i+0xfe>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	6820      	ldr	r0, [r4, #0]
 8006328:	1d19      	adds	r1, r3, #4
 800632a:	6029      	str	r1, [r5, #0]
 800632c:	0605      	lsls	r5, r0, #24
 800632e:	d501      	bpl.n	8006334 <_printf_i+0xe8>
 8006330:	681e      	ldr	r6, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0xee>
 8006334:	0641      	lsls	r1, r0, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0xe4>
 8006338:	881e      	ldrh	r6, [r3, #0]
 800633a:	4853      	ldr	r0, [pc, #332]	; (8006488 <_printf_i+0x23c>)
 800633c:	2f6f      	cmp	r7, #111	; 0x6f
 800633e:	bf0c      	ite	eq
 8006340:	2308      	moveq	r3, #8
 8006342:	230a      	movne	r3, #10
 8006344:	2100      	movs	r1, #0
 8006346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800634a:	6865      	ldr	r5, [r4, #4]
 800634c:	60a5      	str	r5, [r4, #8]
 800634e:	2d00      	cmp	r5, #0
 8006350:	bfa2      	ittt	ge
 8006352:	6821      	ldrge	r1, [r4, #0]
 8006354:	f021 0104 	bicge.w	r1, r1, #4
 8006358:	6021      	strge	r1, [r4, #0]
 800635a:	b90e      	cbnz	r6, 8006360 <_printf_i+0x114>
 800635c:	2d00      	cmp	r5, #0
 800635e:	d04b      	beq.n	80063f8 <_printf_i+0x1ac>
 8006360:	4615      	mov	r5, r2
 8006362:	fbb6 f1f3 	udiv	r1, r6, r3
 8006366:	fb03 6711 	mls	r7, r3, r1, r6
 800636a:	5dc7      	ldrb	r7, [r0, r7]
 800636c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006370:	4637      	mov	r7, r6
 8006372:	42bb      	cmp	r3, r7
 8006374:	460e      	mov	r6, r1
 8006376:	d9f4      	bls.n	8006362 <_printf_i+0x116>
 8006378:	2b08      	cmp	r3, #8
 800637a:	d10b      	bne.n	8006394 <_printf_i+0x148>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07de      	lsls	r6, r3, #31
 8006380:	d508      	bpl.n	8006394 <_printf_i+0x148>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	4299      	cmp	r1, r3
 8006388:	bfde      	ittt	le
 800638a:	2330      	movle	r3, #48	; 0x30
 800638c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006390:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006394:	1b52      	subs	r2, r2, r5
 8006396:	6122      	str	r2, [r4, #16]
 8006398:	f8cd a000 	str.w	sl, [sp]
 800639c:	464b      	mov	r3, r9
 800639e:	aa03      	add	r2, sp, #12
 80063a0:	4621      	mov	r1, r4
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fee4 	bl	8006170 <_printf_common>
 80063a8:	3001      	adds	r0, #1
 80063aa:	d14a      	bne.n	8006442 <_printf_i+0x1f6>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b0:	b004      	add	sp, #16
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	4833      	ldr	r0, [pc, #204]	; (800648c <_printf_i+0x240>)
 80063c0:	2778      	movs	r7, #120	; 0x78
 80063c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	6829      	ldr	r1, [r5, #0]
 80063ca:	061f      	lsls	r7, r3, #24
 80063cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80063d0:	d402      	bmi.n	80063d8 <_printf_i+0x18c>
 80063d2:	065f      	lsls	r7, r3, #25
 80063d4:	bf48      	it	mi
 80063d6:	b2b6      	uxthmi	r6, r6
 80063d8:	07df      	lsls	r7, r3, #31
 80063da:	bf48      	it	mi
 80063dc:	f043 0320 	orrmi.w	r3, r3, #32
 80063e0:	6029      	str	r1, [r5, #0]
 80063e2:	bf48      	it	mi
 80063e4:	6023      	strmi	r3, [r4, #0]
 80063e6:	b91e      	cbnz	r6, 80063f0 <_printf_i+0x1a4>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	2310      	movs	r3, #16
 80063f2:	e7a7      	b.n	8006344 <_printf_i+0xf8>
 80063f4:	4824      	ldr	r0, [pc, #144]	; (8006488 <_printf_i+0x23c>)
 80063f6:	e7e4      	b.n	80063c2 <_printf_i+0x176>
 80063f8:	4615      	mov	r5, r2
 80063fa:	e7bd      	b.n	8006378 <_printf_i+0x12c>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	6826      	ldr	r6, [r4, #0]
 8006400:	6961      	ldr	r1, [r4, #20]
 8006402:	1d18      	adds	r0, r3, #4
 8006404:	6028      	str	r0, [r5, #0]
 8006406:	0635      	lsls	r5, r6, #24
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	d501      	bpl.n	8006410 <_printf_i+0x1c4>
 800640c:	6019      	str	r1, [r3, #0]
 800640e:	e002      	b.n	8006416 <_printf_i+0x1ca>
 8006410:	0670      	lsls	r0, r6, #25
 8006412:	d5fb      	bpl.n	800640c <_printf_i+0x1c0>
 8006414:	8019      	strh	r1, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	4615      	mov	r5, r2
 800641c:	e7bc      	b.n	8006398 <_printf_i+0x14c>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	602a      	str	r2, [r5, #0]
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	2100      	movs	r1, #0
 800642a:	4628      	mov	r0, r5
 800642c:	f7f9 fee0 	bl	80001f0 <memchr>
 8006430:	b108      	cbz	r0, 8006436 <_printf_i+0x1ea>
 8006432:	1b40      	subs	r0, r0, r5
 8006434:	6060      	str	r0, [r4, #4]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	2300      	movs	r3, #0
 800643c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006440:	e7aa      	b.n	8006398 <_printf_i+0x14c>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	462a      	mov	r2, r5
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d0ad      	beq.n	80063ac <_printf_i+0x160>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	079b      	lsls	r3, r3, #30
 8006454:	d413      	bmi.n	800647e <_printf_i+0x232>
 8006456:	68e0      	ldr	r0, [r4, #12]
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	4298      	cmp	r0, r3
 800645c:	bfb8      	it	lt
 800645e:	4618      	movlt	r0, r3
 8006460:	e7a6      	b.n	80063b0 <_printf_i+0x164>
 8006462:	2301      	movs	r3, #1
 8006464:	4632      	mov	r2, r6
 8006466:	4649      	mov	r1, r9
 8006468:	4640      	mov	r0, r8
 800646a:	47d0      	blx	sl
 800646c:	3001      	adds	r0, #1
 800646e:	d09d      	beq.n	80063ac <_printf_i+0x160>
 8006470:	3501      	adds	r5, #1
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	9903      	ldr	r1, [sp, #12]
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	42ab      	cmp	r3, r5
 800647a:	dcf2      	bgt.n	8006462 <_printf_i+0x216>
 800647c:	e7eb      	b.n	8006456 <_printf_i+0x20a>
 800647e:	2500      	movs	r5, #0
 8006480:	f104 0619 	add.w	r6, r4, #25
 8006484:	e7f5      	b.n	8006472 <_printf_i+0x226>
 8006486:	bf00      	nop
 8006488:	0800a53a 	.word	0x0800a53a
 800648c:	0800a54b 	.word	0x0800a54b

08006490 <_scanf_float>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	b087      	sub	sp, #28
 8006496:	4617      	mov	r7, r2
 8006498:	9303      	str	r3, [sp, #12]
 800649a:	688b      	ldr	r3, [r1, #8]
 800649c:	1e5a      	subs	r2, r3, #1
 800649e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064a2:	bf83      	ittte	hi
 80064a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064a8:	195b      	addhi	r3, r3, r5
 80064aa:	9302      	strhi	r3, [sp, #8]
 80064ac:	2300      	movls	r3, #0
 80064ae:	bf86      	itte	hi
 80064b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064b4:	608b      	strhi	r3, [r1, #8]
 80064b6:	9302      	strls	r3, [sp, #8]
 80064b8:	680b      	ldr	r3, [r1, #0]
 80064ba:	468b      	mov	fp, r1
 80064bc:	2500      	movs	r5, #0
 80064be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80064c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80064c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064ca:	4680      	mov	r8, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	465e      	mov	r6, fp
 80064d0:	46aa      	mov	sl, r5
 80064d2:	46a9      	mov	r9, r5
 80064d4:	9501      	str	r5, [sp, #4]
 80064d6:	68a2      	ldr	r2, [r4, #8]
 80064d8:	b152      	cbz	r2, 80064f0 <_scanf_float+0x60>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b4e      	cmp	r3, #78	; 0x4e
 80064e0:	d864      	bhi.n	80065ac <_scanf_float+0x11c>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d83c      	bhi.n	8006560 <_scanf_float+0xd0>
 80064e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80064ea:	b2c8      	uxtb	r0, r1
 80064ec:	280e      	cmp	r0, #14
 80064ee:	d93a      	bls.n	8006566 <_scanf_float+0xd6>
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	d003      	beq.n	80064fe <_scanf_float+0x6e>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006502:	f1ba 0f01 	cmp.w	sl, #1
 8006506:	f200 8113 	bhi.w	8006730 <_scanf_float+0x2a0>
 800650a:	455e      	cmp	r6, fp
 800650c:	f200 8105 	bhi.w	800671a <_scanf_float+0x28a>
 8006510:	2501      	movs	r5, #1
 8006512:	4628      	mov	r0, r5
 8006514:	b007      	add	sp, #28
 8006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800651e:	2a0d      	cmp	r2, #13
 8006520:	d8e6      	bhi.n	80064f0 <_scanf_float+0x60>
 8006522:	a101      	add	r1, pc, #4	; (adr r1, 8006528 <_scanf_float+0x98>)
 8006524:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006528:	08006667 	.word	0x08006667
 800652c:	080064f1 	.word	0x080064f1
 8006530:	080064f1 	.word	0x080064f1
 8006534:	080064f1 	.word	0x080064f1
 8006538:	080066c7 	.word	0x080066c7
 800653c:	0800669f 	.word	0x0800669f
 8006540:	080064f1 	.word	0x080064f1
 8006544:	080064f1 	.word	0x080064f1
 8006548:	08006675 	.word	0x08006675
 800654c:	080064f1 	.word	0x080064f1
 8006550:	080064f1 	.word	0x080064f1
 8006554:	080064f1 	.word	0x080064f1
 8006558:	080064f1 	.word	0x080064f1
 800655c:	0800662d 	.word	0x0800662d
 8006560:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006564:	e7db      	b.n	800651e <_scanf_float+0x8e>
 8006566:	290e      	cmp	r1, #14
 8006568:	d8c2      	bhi.n	80064f0 <_scanf_float+0x60>
 800656a:	a001      	add	r0, pc, #4	; (adr r0, 8006570 <_scanf_float+0xe0>)
 800656c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006570:	0800661f 	.word	0x0800661f
 8006574:	080064f1 	.word	0x080064f1
 8006578:	0800661f 	.word	0x0800661f
 800657c:	080066b3 	.word	0x080066b3
 8006580:	080064f1 	.word	0x080064f1
 8006584:	080065cd 	.word	0x080065cd
 8006588:	08006609 	.word	0x08006609
 800658c:	08006609 	.word	0x08006609
 8006590:	08006609 	.word	0x08006609
 8006594:	08006609 	.word	0x08006609
 8006598:	08006609 	.word	0x08006609
 800659c:	08006609 	.word	0x08006609
 80065a0:	08006609 	.word	0x08006609
 80065a4:	08006609 	.word	0x08006609
 80065a8:	08006609 	.word	0x08006609
 80065ac:	2b6e      	cmp	r3, #110	; 0x6e
 80065ae:	d809      	bhi.n	80065c4 <_scanf_float+0x134>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d8b2      	bhi.n	800651a <_scanf_float+0x8a>
 80065b4:	2b54      	cmp	r3, #84	; 0x54
 80065b6:	d077      	beq.n	80066a8 <_scanf_float+0x218>
 80065b8:	2b59      	cmp	r3, #89	; 0x59
 80065ba:	d199      	bne.n	80064f0 <_scanf_float+0x60>
 80065bc:	2d07      	cmp	r5, #7
 80065be:	d197      	bne.n	80064f0 <_scanf_float+0x60>
 80065c0:	2508      	movs	r5, #8
 80065c2:	e029      	b.n	8006618 <_scanf_float+0x188>
 80065c4:	2b74      	cmp	r3, #116	; 0x74
 80065c6:	d06f      	beq.n	80066a8 <_scanf_float+0x218>
 80065c8:	2b79      	cmp	r3, #121	; 0x79
 80065ca:	e7f6      	b.n	80065ba <_scanf_float+0x12a>
 80065cc:	6821      	ldr	r1, [r4, #0]
 80065ce:	05c8      	lsls	r0, r1, #23
 80065d0:	d51a      	bpl.n	8006608 <_scanf_float+0x178>
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065d8:	6021      	str	r1, [r4, #0]
 80065da:	f109 0901 	add.w	r9, r9, #1
 80065de:	b11b      	cbz	r3, 80065e8 <_scanf_float+0x158>
 80065e0:	3b01      	subs	r3, #1
 80065e2:	3201      	adds	r2, #1
 80065e4:	9302      	str	r3, [sp, #8]
 80065e6:	60a2      	str	r2, [r4, #8]
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	f340 8084 	ble.w	8006708 <_scanf_float+0x278>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	e766      	b.n	80064d6 <_scanf_float+0x46>
 8006608:	eb1a 0f05 	cmn.w	sl, r5
 800660c:	f47f af70 	bne.w	80064f0 <_scanf_float+0x60>
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	f806 3b01 	strb.w	r3, [r6], #1
 800661c:	e7e4      	b.n	80065e8 <_scanf_float+0x158>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	0610      	lsls	r0, r2, #24
 8006622:	f57f af65 	bpl.w	80064f0 <_scanf_float+0x60>
 8006626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662a:	e7f4      	b.n	8006616 <_scanf_float+0x186>
 800662c:	f1ba 0f00 	cmp.w	sl, #0
 8006630:	d10e      	bne.n	8006650 <_scanf_float+0x1c0>
 8006632:	f1b9 0f00 	cmp.w	r9, #0
 8006636:	d10e      	bne.n	8006656 <_scanf_float+0x1c6>
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800663e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006642:	d108      	bne.n	8006656 <_scanf_float+0x1c6>
 8006644:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	f04f 0a01 	mov.w	sl, #1
 800664e:	e7e3      	b.n	8006618 <_scanf_float+0x188>
 8006650:	f1ba 0f02 	cmp.w	sl, #2
 8006654:	d055      	beq.n	8006702 <_scanf_float+0x272>
 8006656:	2d01      	cmp	r5, #1
 8006658:	d002      	beq.n	8006660 <_scanf_float+0x1d0>
 800665a:	2d04      	cmp	r5, #4
 800665c:	f47f af48 	bne.w	80064f0 <_scanf_float+0x60>
 8006660:	3501      	adds	r5, #1
 8006662:	b2ed      	uxtb	r5, r5
 8006664:	e7d8      	b.n	8006618 <_scanf_float+0x188>
 8006666:	f1ba 0f01 	cmp.w	sl, #1
 800666a:	f47f af41 	bne.w	80064f0 <_scanf_float+0x60>
 800666e:	f04f 0a02 	mov.w	sl, #2
 8006672:	e7d1      	b.n	8006618 <_scanf_float+0x188>
 8006674:	b97d      	cbnz	r5, 8006696 <_scanf_float+0x206>
 8006676:	f1b9 0f00 	cmp.w	r9, #0
 800667a:	f47f af3c 	bne.w	80064f6 <_scanf_float+0x66>
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006684:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006688:	f47f af39 	bne.w	80064fe <_scanf_float+0x6e>
 800668c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006690:	6022      	str	r2, [r4, #0]
 8006692:	2501      	movs	r5, #1
 8006694:	e7c0      	b.n	8006618 <_scanf_float+0x188>
 8006696:	2d03      	cmp	r5, #3
 8006698:	d0e2      	beq.n	8006660 <_scanf_float+0x1d0>
 800669a:	2d05      	cmp	r5, #5
 800669c:	e7de      	b.n	800665c <_scanf_float+0x1cc>
 800669e:	2d02      	cmp	r5, #2
 80066a0:	f47f af26 	bne.w	80064f0 <_scanf_float+0x60>
 80066a4:	2503      	movs	r5, #3
 80066a6:	e7b7      	b.n	8006618 <_scanf_float+0x188>
 80066a8:	2d06      	cmp	r5, #6
 80066aa:	f47f af21 	bne.w	80064f0 <_scanf_float+0x60>
 80066ae:	2507      	movs	r5, #7
 80066b0:	e7b2      	b.n	8006618 <_scanf_float+0x188>
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	0591      	lsls	r1, r2, #22
 80066b6:	f57f af1b 	bpl.w	80064f0 <_scanf_float+0x60>
 80066ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80066c4:	e7a8      	b.n	8006618 <_scanf_float+0x188>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80066cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80066d0:	d006      	beq.n	80066e0 <_scanf_float+0x250>
 80066d2:	0550      	lsls	r0, r2, #21
 80066d4:	f57f af0c 	bpl.w	80064f0 <_scanf_float+0x60>
 80066d8:	f1b9 0f00 	cmp.w	r9, #0
 80066dc:	f43f af0f 	beq.w	80064fe <_scanf_float+0x6e>
 80066e0:	0591      	lsls	r1, r2, #22
 80066e2:	bf58      	it	pl
 80066e4:	9901      	ldrpl	r1, [sp, #4]
 80066e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066ea:	bf58      	it	pl
 80066ec:	eba9 0101 	subpl.w	r1, r9, r1
 80066f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80066f4:	bf58      	it	pl
 80066f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	f04f 0900 	mov.w	r9, #0
 8006700:	e78a      	b.n	8006618 <_scanf_float+0x188>
 8006702:	f04f 0a03 	mov.w	sl, #3
 8006706:	e787      	b.n	8006618 <_scanf_float+0x188>
 8006708:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800670c:	4639      	mov	r1, r7
 800670e:	4640      	mov	r0, r8
 8006710:	4798      	blx	r3
 8006712:	2800      	cmp	r0, #0
 8006714:	f43f aedf 	beq.w	80064d6 <_scanf_float+0x46>
 8006718:	e6ea      	b.n	80064f0 <_scanf_float+0x60>
 800671a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800671e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006722:	463a      	mov	r2, r7
 8006724:	4640      	mov	r0, r8
 8006726:	4798      	blx	r3
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	3b01      	subs	r3, #1
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	e6ec      	b.n	800650a <_scanf_float+0x7a>
 8006730:	1e6b      	subs	r3, r5, #1
 8006732:	2b06      	cmp	r3, #6
 8006734:	d825      	bhi.n	8006782 <_scanf_float+0x2f2>
 8006736:	2d02      	cmp	r5, #2
 8006738:	d836      	bhi.n	80067a8 <_scanf_float+0x318>
 800673a:	455e      	cmp	r6, fp
 800673c:	f67f aee8 	bls.w	8006510 <_scanf_float+0x80>
 8006740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006744:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006748:	463a      	mov	r2, r7
 800674a:	4640      	mov	r0, r8
 800674c:	4798      	blx	r3
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	3b01      	subs	r3, #1
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	e7f1      	b.n	800673a <_scanf_float+0x2aa>
 8006756:	9802      	ldr	r0, [sp, #8]
 8006758:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800675c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006760:	9002      	str	r0, [sp, #8]
 8006762:	463a      	mov	r2, r7
 8006764:	4640      	mov	r0, r8
 8006766:	4798      	blx	r3
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006772:	fa5f fa8a 	uxtb.w	sl, sl
 8006776:	f1ba 0f02 	cmp.w	sl, #2
 800677a:	d1ec      	bne.n	8006756 <_scanf_float+0x2c6>
 800677c:	3d03      	subs	r5, #3
 800677e:	b2ed      	uxtb	r5, r5
 8006780:	1b76      	subs	r6, r6, r5
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	05da      	lsls	r2, r3, #23
 8006786:	d52f      	bpl.n	80067e8 <_scanf_float+0x358>
 8006788:	055b      	lsls	r3, r3, #21
 800678a:	d510      	bpl.n	80067ae <_scanf_float+0x31e>
 800678c:	455e      	cmp	r6, fp
 800678e:	f67f aebf 	bls.w	8006510 <_scanf_float+0x80>
 8006792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800679a:	463a      	mov	r2, r7
 800679c:	4640      	mov	r0, r8
 800679e:	4798      	blx	r3
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	e7f1      	b.n	800678c <_scanf_float+0x2fc>
 80067a8:	46aa      	mov	sl, r5
 80067aa:	9602      	str	r6, [sp, #8]
 80067ac:	e7df      	b.n	800676e <_scanf_float+0x2de>
 80067ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	2965      	cmp	r1, #101	; 0x65
 80067b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80067ba:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	d00c      	beq.n	80067dc <_scanf_float+0x34c>
 80067c2:	2945      	cmp	r1, #69	; 0x45
 80067c4:	d00a      	beq.n	80067dc <_scanf_float+0x34c>
 80067c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067ca:	463a      	mov	r2, r7
 80067cc:	4640      	mov	r0, r8
 80067ce:	4798      	blx	r3
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	1eb5      	subs	r5, r6, #2
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e0:	463a      	mov	r2, r7
 80067e2:	4640      	mov	r0, r8
 80067e4:	4798      	blx	r3
 80067e6:	462e      	mov	r6, r5
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	f015 0510 	ands.w	r5, r5, #16
 80067ee:	d158      	bne.n	80068a2 <_scanf_float+0x412>
 80067f0:	7035      	strb	r5, [r6, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	d11c      	bne.n	8006838 <_scanf_float+0x3a8>
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	454b      	cmp	r3, r9
 8006802:	eba3 0209 	sub.w	r2, r3, r9
 8006806:	d124      	bne.n	8006852 <_scanf_float+0x3c2>
 8006808:	2200      	movs	r2, #0
 800680a:	4659      	mov	r1, fp
 800680c:	4640      	mov	r0, r8
 800680e:	f002 fcdb 	bl	80091c8 <_strtod_r>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	6821      	ldr	r1, [r4, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f011 0f02 	tst.w	r1, #2
 800681c:	ec57 6b10 	vmov	r6, r7, d0
 8006820:	f103 0204 	add.w	r2, r3, #4
 8006824:	d020      	beq.n	8006868 <_scanf_float+0x3d8>
 8006826:	9903      	ldr	r1, [sp, #12]
 8006828:	600a      	str	r2, [r1, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	e9c3 6700 	strd	r6, r7, [r3]
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60e3      	str	r3, [r4, #12]
 8006836:	e66c      	b.n	8006512 <_scanf_float+0x82>
 8006838:	9b04      	ldr	r3, [sp, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0e4      	beq.n	8006808 <_scanf_float+0x378>
 800683e:	9905      	ldr	r1, [sp, #20]
 8006840:	230a      	movs	r3, #10
 8006842:	462a      	mov	r2, r5
 8006844:	3101      	adds	r1, #1
 8006846:	4640      	mov	r0, r8
 8006848:	f002 fd46 	bl	80092d8 <_strtol_r>
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	9e05      	ldr	r6, [sp, #20]
 8006850:	1ac2      	subs	r2, r0, r3
 8006852:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006856:	429e      	cmp	r6, r3
 8006858:	bf28      	it	cs
 800685a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800685e:	4912      	ldr	r1, [pc, #72]	; (80068a8 <_scanf_float+0x418>)
 8006860:	4630      	mov	r0, r6
 8006862:	f000 f995 	bl	8006b90 <siprintf>
 8006866:	e7cf      	b.n	8006808 <_scanf_float+0x378>
 8006868:	f011 0f04 	tst.w	r1, #4
 800686c:	9903      	ldr	r1, [sp, #12]
 800686e:	600a      	str	r2, [r1, #0]
 8006870:	d1db      	bne.n	800682a <_scanf_float+0x39a>
 8006872:	f8d3 8000 	ldr.w	r8, [r3]
 8006876:	ee10 2a10 	vmov	r2, s0
 800687a:	ee10 0a10 	vmov	r0, s0
 800687e:	463b      	mov	r3, r7
 8006880:	4639      	mov	r1, r7
 8006882:	f7fa f963 	bl	8000b4c <__aeabi_dcmpun>
 8006886:	b128      	cbz	r0, 8006894 <_scanf_float+0x404>
 8006888:	4808      	ldr	r0, [pc, #32]	; (80068ac <_scanf_float+0x41c>)
 800688a:	f000 fa63 	bl	8006d54 <nanf>
 800688e:	ed88 0a00 	vstr	s0, [r8]
 8006892:	e7cd      	b.n	8006830 <_scanf_float+0x3a0>
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f7fa f9b6 	bl	8000c08 <__aeabi_d2f>
 800689c:	f8c8 0000 	str.w	r0, [r8]
 80068a0:	e7c6      	b.n	8006830 <_scanf_float+0x3a0>
 80068a2:	2500      	movs	r5, #0
 80068a4:	e635      	b.n	8006512 <_scanf_float+0x82>
 80068a6:	bf00      	nop
 80068a8:	0800a55c 	.word	0x0800a55c
 80068ac:	0800a8ed 	.word	0x0800a8ed

080068b0 <std>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b510      	push	{r4, lr}
 80068b4:	4604      	mov	r4, r0
 80068b6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068be:	6083      	str	r3, [r0, #8]
 80068c0:	8181      	strh	r1, [r0, #12]
 80068c2:	6643      	str	r3, [r0, #100]	; 0x64
 80068c4:	81c2      	strh	r2, [r0, #14]
 80068c6:	6183      	str	r3, [r0, #24]
 80068c8:	4619      	mov	r1, r3
 80068ca:	2208      	movs	r2, #8
 80068cc:	305c      	adds	r0, #92	; 0x5c
 80068ce:	f000 f9c2 	bl	8006c56 <memset>
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <std+0x38>)
 80068d4:	6263      	str	r3, [r4, #36]	; 0x24
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x3c>)
 80068d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <std+0x40>)
 80068dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <std+0x44>)
 80068e0:	6224      	str	r4, [r4, #32]
 80068e2:	6323      	str	r3, [r4, #48]	; 0x30
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	08006bd1 	.word	0x08006bd1
 80068ec:	08006bf3 	.word	0x08006bf3
 80068f0:	08006c2b 	.word	0x08006c2b
 80068f4:	08006c4f 	.word	0x08006c4f

080068f8 <stdio_exit_handler>:
 80068f8:	4a02      	ldr	r2, [pc, #8]	; (8006904 <stdio_exit_handler+0xc>)
 80068fa:	4903      	ldr	r1, [pc, #12]	; (8006908 <stdio_exit_handler+0x10>)
 80068fc:	4803      	ldr	r0, [pc, #12]	; (800690c <stdio_exit_handler+0x14>)
 80068fe:	f000 b869 	b.w	80069d4 <_fwalk_sglue>
 8006902:	bf00      	nop
 8006904:	2000000c 	.word	0x2000000c
 8006908:	08009921 	.word	0x08009921
 800690c:	20000018 	.word	0x20000018

08006910 <cleanup_stdio>:
 8006910:	6841      	ldr	r1, [r0, #4]
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <cleanup_stdio+0x34>)
 8006914:	4299      	cmp	r1, r3
 8006916:	b510      	push	{r4, lr}
 8006918:	4604      	mov	r4, r0
 800691a:	d001      	beq.n	8006920 <cleanup_stdio+0x10>
 800691c:	f003 f800 	bl	8009920 <_fflush_r>
 8006920:	68a1      	ldr	r1, [r4, #8]
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <cleanup_stdio+0x38>)
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <cleanup_stdio+0x1e>
 8006928:	4620      	mov	r0, r4
 800692a:	f002 fff9 	bl	8009920 <_fflush_r>
 800692e:	68e1      	ldr	r1, [r4, #12]
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <cleanup_stdio+0x3c>)
 8006932:	4299      	cmp	r1, r3
 8006934:	d004      	beq.n	8006940 <cleanup_stdio+0x30>
 8006936:	4620      	mov	r0, r4
 8006938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693c:	f002 bff0 	b.w	8009920 <_fflush_r>
 8006940:	bd10      	pop	{r4, pc}
 8006942:	bf00      	nop
 8006944:	200005d4 	.word	0x200005d4
 8006948:	2000063c 	.word	0x2000063c
 800694c:	200006a4 	.word	0x200006a4

08006950 <global_stdio_init.part.0>:
 8006950:	b510      	push	{r4, lr}
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <global_stdio_init.part.0+0x30>)
 8006954:	4c0b      	ldr	r4, [pc, #44]	; (8006984 <global_stdio_init.part.0+0x34>)
 8006956:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <global_stdio_init.part.0+0x38>)
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	4620      	mov	r0, r4
 800695c:	2200      	movs	r2, #0
 800695e:	2104      	movs	r1, #4
 8006960:	f7ff ffa6 	bl	80068b0 <std>
 8006964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006968:	2201      	movs	r2, #1
 800696a:	2109      	movs	r1, #9
 800696c:	f7ff ffa0 	bl	80068b0 <std>
 8006970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006974:	2202      	movs	r2, #2
 8006976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697a:	2112      	movs	r1, #18
 800697c:	f7ff bf98 	b.w	80068b0 <std>
 8006980:	2000070c 	.word	0x2000070c
 8006984:	200005d4 	.word	0x200005d4
 8006988:	080068f9 	.word	0x080068f9

0800698c <__sfp_lock_acquire>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__sfp_lock_acquire+0x8>)
 800698e:	f000 b9df 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006992:	bf00      	nop
 8006994:	20000715 	.word	0x20000715

08006998 <__sfp_lock_release>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__sfp_lock_release+0x8>)
 800699a:	f000 b9da 	b.w	8006d52 <__retarget_lock_release_recursive>
 800699e:	bf00      	nop
 80069a0:	20000715 	.word	0x20000715

080069a4 <__sinit>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4604      	mov	r4, r0
 80069a8:	f7ff fff0 	bl	800698c <__sfp_lock_acquire>
 80069ac:	6a23      	ldr	r3, [r4, #32]
 80069ae:	b11b      	cbz	r3, 80069b8 <__sinit+0x14>
 80069b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b4:	f7ff bff0 	b.w	8006998 <__sfp_lock_release>
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <__sinit+0x28>)
 80069ba:	6223      	str	r3, [r4, #32]
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <__sinit+0x2c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f5      	bne.n	80069b0 <__sinit+0xc>
 80069c4:	f7ff ffc4 	bl	8006950 <global_stdio_init.part.0>
 80069c8:	e7f2      	b.n	80069b0 <__sinit+0xc>
 80069ca:	bf00      	nop
 80069cc:	08006911 	.word	0x08006911
 80069d0:	2000070c 	.word	0x2000070c

080069d4 <_fwalk_sglue>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4607      	mov	r7, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	2600      	movs	r6, #0
 80069e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e4:	f1b9 0901 	subs.w	r9, r9, #1
 80069e8:	d505      	bpl.n	80069f6 <_fwalk_sglue+0x22>
 80069ea:	6824      	ldr	r4, [r4, #0]
 80069ec:	2c00      	cmp	r4, #0
 80069ee:	d1f7      	bne.n	80069e0 <_fwalk_sglue+0xc>
 80069f0:	4630      	mov	r0, r6
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d907      	bls.n	8006a0c <_fwalk_sglue+0x38>
 80069fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d003      	beq.n	8006a0c <_fwalk_sglue+0x38>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c0      	blx	r8
 8006a0a:	4306      	orrs	r6, r0
 8006a0c:	3568      	adds	r5, #104	; 0x68
 8006a0e:	e7e9      	b.n	80069e4 <_fwalk_sglue+0x10>

08006a10 <iprintf>:
 8006a10:	b40f      	push	{r0, r1, r2, r3}
 8006a12:	b507      	push	{r0, r1, r2, lr}
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <iprintf+0x20>)
 8006a16:	ab04      	add	r3, sp, #16
 8006a18:	6808      	ldr	r0, [r1, #0]
 8006a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1e:	6881      	ldr	r1, [r0, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	f002 fddd 	bl	80095e0 <_vfiprintf_r>
 8006a26:	b003      	add	sp, #12
 8006a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a2c:	b004      	add	sp, #16
 8006a2e:	4770      	bx	lr
 8006a30:	20000064 	.word	0x20000064

08006a34 <setvbuf>:
 8006a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	461d      	mov	r5, r3
 8006a3a:	4b54      	ldr	r3, [pc, #336]	; (8006b8c <setvbuf+0x158>)
 8006a3c:	681f      	ldr	r7, [r3, #0]
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460e      	mov	r6, r1
 8006a42:	4690      	mov	r8, r2
 8006a44:	b127      	cbz	r7, 8006a50 <setvbuf+0x1c>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b913      	cbnz	r3, 8006a50 <setvbuf+0x1c>
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ffaa 	bl	80069a4 <__sinit>
 8006a50:	f1b8 0f02 	cmp.w	r8, #2
 8006a54:	d006      	beq.n	8006a64 <setvbuf+0x30>
 8006a56:	f1b8 0f01 	cmp.w	r8, #1
 8006a5a:	f200 8094 	bhi.w	8006b86 <setvbuf+0x152>
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	f2c0 8091 	blt.w	8006b86 <setvbuf+0x152>
 8006a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d405      	bmi.n	8006a76 <setvbuf+0x42>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	059b      	lsls	r3, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <setvbuf+0x42>
 8006a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a72:	f000 f96d 	bl	8006d50 <__retarget_lock_acquire_recursive>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4638      	mov	r0, r7
 8006a7a:	f002 ff51 	bl	8009920 <_fflush_r>
 8006a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a80:	b141      	cbz	r1, 8006a94 <setvbuf+0x60>
 8006a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a86:	4299      	cmp	r1, r3
 8006a88:	d002      	beq.n	8006a90 <setvbuf+0x5c>
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f000 ffe2 	bl	8007a54 <_free_r>
 8006a90:	2300      	movs	r3, #0
 8006a92:	6363      	str	r3, [r4, #52]	; 0x34
 8006a94:	2300      	movs	r3, #0
 8006a96:	61a3      	str	r3, [r4, #24]
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	0618      	lsls	r0, r3, #24
 8006a9e:	d503      	bpl.n	8006aa8 <setvbuf+0x74>
 8006aa0:	6921      	ldr	r1, [r4, #16]
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f000 ffd6 	bl	8007a54 <_free_r>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	f1b8 0f02 	cmp.w	r8, #2
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	d05f      	beq.n	8006b7a <setvbuf+0x146>
 8006aba:	ab01      	add	r3, sp, #4
 8006abc:	466a      	mov	r2, sp
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f002 ff55 	bl	8009970 <__swhatbuf_r>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	4318      	orrs	r0, r3
 8006aca:	81a0      	strh	r0, [r4, #12]
 8006acc:	bb2d      	cbnz	r5, 8006b1a <setvbuf+0xe6>
 8006ace:	9d00      	ldr	r5, [sp, #0]
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f001 f80b 	bl	8007aec <malloc>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d150      	bne.n	8006b7e <setvbuf+0x14a>
 8006adc:	f8dd 9000 	ldr.w	r9, [sp]
 8006ae0:	45a9      	cmp	r9, r5
 8006ae2:	d13e      	bne.n	8006b62 <setvbuf+0x12e>
 8006ae4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ae8:	2200      	movs	r2, #0
 8006aea:	60a2      	str	r2, [r4, #8]
 8006aec:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006af0:	6022      	str	r2, [r4, #0]
 8006af2:	6122      	str	r2, [r4, #16]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afa:	6162      	str	r2, [r4, #20]
 8006afc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006afe:	f043 0302 	orr.w	r3, r3, #2
 8006b02:	07d1      	lsls	r1, r2, #31
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	d404      	bmi.n	8006b12 <setvbuf+0xde>
 8006b08:	059b      	lsls	r3, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <setvbuf+0xde>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0e:	f000 f920 	bl	8006d52 <__retarget_lock_release_recursive>
 8006b12:	4628      	mov	r0, r5
 8006b14:	b003      	add	sp, #12
 8006b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d0d8      	beq.n	8006ad0 <setvbuf+0x9c>
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b913      	cbnz	r3, 8006b28 <setvbuf+0xf4>
 8006b22:	4638      	mov	r0, r7
 8006b24:	f7ff ff3e 	bl	80069a4 <__sinit>
 8006b28:	f1b8 0f01 	cmp.w	r8, #1
 8006b2c:	bf08      	it	eq
 8006b2e:	89a3      	ldrheq	r3, [r4, #12]
 8006b30:	6026      	str	r6, [r4, #0]
 8006b32:	bf04      	itt	eq
 8006b34:	f043 0301 	orreq.w	r3, r3, #1
 8006b38:	81a3      	strheq	r3, [r4, #12]
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f013 0208 	ands.w	r2, r3, #8
 8006b40:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006b44:	d01d      	beq.n	8006b82 <setvbuf+0x14e>
 8006b46:	07da      	lsls	r2, r3, #31
 8006b48:	bf41      	itttt	mi
 8006b4a:	2200      	movmi	r2, #0
 8006b4c:	426d      	negmi	r5, r5
 8006b4e:	60a2      	strmi	r2, [r4, #8]
 8006b50:	61a5      	strmi	r5, [r4, #24]
 8006b52:	bf58      	it	pl
 8006b54:	60a5      	strpl	r5, [r4, #8]
 8006b56:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006b58:	f015 0501 	ands.w	r5, r5, #1
 8006b5c:	d0d4      	beq.n	8006b08 <setvbuf+0xd4>
 8006b5e:	2500      	movs	r5, #0
 8006b60:	e7d7      	b.n	8006b12 <setvbuf+0xde>
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 ffc2 	bl	8007aec <malloc>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0ba      	beq.n	8006ae4 <setvbuf+0xb0>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	464d      	mov	r5, r9
 8006b78:	e7d1      	b.n	8006b1e <setvbuf+0xea>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	e7b4      	b.n	8006ae8 <setvbuf+0xb4>
 8006b7e:	46a9      	mov	r9, r5
 8006b80:	e7f5      	b.n	8006b6e <setvbuf+0x13a>
 8006b82:	60a2      	str	r2, [r4, #8]
 8006b84:	e7e7      	b.n	8006b56 <setvbuf+0x122>
 8006b86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b8a:	e7c2      	b.n	8006b12 <setvbuf+0xde>
 8006b8c:	20000064 	.word	0x20000064

08006b90 <siprintf>:
 8006b90:	b40e      	push	{r1, r2, r3}
 8006b92:	b500      	push	{lr}
 8006b94:	b09c      	sub	sp, #112	; 0x70
 8006b96:	ab1d      	add	r3, sp, #116	; 0x74
 8006b98:	9002      	str	r0, [sp, #8]
 8006b9a:	9006      	str	r0, [sp, #24]
 8006b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ba0:	4809      	ldr	r0, [pc, #36]	; (8006bc8 <siprintf+0x38>)
 8006ba2:	9107      	str	r1, [sp, #28]
 8006ba4:	9104      	str	r1, [sp, #16]
 8006ba6:	4909      	ldr	r1, [pc, #36]	; (8006bcc <siprintf+0x3c>)
 8006ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bac:	9105      	str	r1, [sp, #20]
 8006bae:	6800      	ldr	r0, [r0, #0]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	a902      	add	r1, sp, #8
 8006bb4:	f002 fbec 	bl	8009390 <_svfiprintf_r>
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	b01c      	add	sp, #112	; 0x70
 8006bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr
 8006bc8:	20000064 	.word	0x20000064
 8006bcc:	ffff0208 	.word	0xffff0208

08006bd0 <__sread>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd8:	f000 f86c 	bl	8006cb4 <_read_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	bfab      	itete	ge
 8006be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006be2:	89a3      	ldrhlt	r3, [r4, #12]
 8006be4:	181b      	addge	r3, r3, r0
 8006be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bea:	bfac      	ite	ge
 8006bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bee:	81a3      	strhlt	r3, [r4, #12]
 8006bf0:	bd10      	pop	{r4, pc}

08006bf2 <__swrite>:
 8006bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf6:	461f      	mov	r7, r3
 8006bf8:	898b      	ldrh	r3, [r1, #12]
 8006bfa:	05db      	lsls	r3, r3, #23
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	4616      	mov	r6, r2
 8006c02:	d505      	bpl.n	8006c10 <__swrite+0x1e>
 8006c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c08:	2302      	movs	r3, #2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f000 f840 	bl	8006c90 <_lseek_r>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	463b      	mov	r3, r7
 8006c20:	4628      	mov	r0, r5
 8006c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	f000 b857 	b.w	8006cd8 <_write_r>

08006c2a <__sseek>:
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 f82d 	bl	8006c90 <_lseek_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	bf15      	itete	ne
 8006c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c46:	81a3      	strheq	r3, [r4, #12]
 8006c48:	bf18      	it	ne
 8006c4a:	81a3      	strhne	r3, [r4, #12]
 8006c4c:	bd10      	pop	{r4, pc}

08006c4e <__sclose>:
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 b80d 	b.w	8006c70 <_close_r>

08006c56 <memset>:
 8006c56:	4402      	add	r2, r0
 8006c58:	4603      	mov	r3, r0
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d100      	bne.n	8006c60 <memset+0xa>
 8006c5e:	4770      	bx	lr
 8006c60:	f803 1b01 	strb.w	r1, [r3], #1
 8006c64:	e7f9      	b.n	8006c5a <memset+0x4>
	...

08006c68 <_localeconv_r>:
 8006c68:	4800      	ldr	r0, [pc, #0]	; (8006c6c <_localeconv_r+0x4>)
 8006c6a:	4770      	bx	lr
 8006c6c:	20000158 	.word	0x20000158

08006c70 <_close_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d06      	ldr	r5, [pc, #24]	; (8006c8c <_close_r+0x1c>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7fa fcca 	bl	8001614 <_close>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_close_r+0x1a>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_close_r+0x1a>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20000710 	.word	0x20000710

08006c90 <_lseek_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d07      	ldr	r5, [pc, #28]	; (8006cb0 <_lseek_r+0x20>)
 8006c94:	4604      	mov	r4, r0
 8006c96:	4608      	mov	r0, r1
 8006c98:	4611      	mov	r1, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa fccf 	bl	8001642 <_lseek>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_lseek_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_lseek_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	20000710 	.word	0x20000710

08006cb4 <_read_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d07      	ldr	r5, [pc, #28]	; (8006cd4 <_read_r+0x20>)
 8006cb8:	4604      	mov	r4, r0
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	602a      	str	r2, [r5, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f7fa fcce 	bl	8001664 <_read>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_read_r+0x1e>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_read_r+0x1e>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000710 	.word	0x20000710

08006cd8 <_write_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d07      	ldr	r5, [pc, #28]	; (8006cf8 <_write_r+0x20>)
 8006cdc:	4604      	mov	r4, r0
 8006cde:	4608      	mov	r0, r1
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	602a      	str	r2, [r5, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f7fa fc68 	bl	80015bc <_write>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_write_r+0x1e>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_write_r+0x1e>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000710 	.word	0x20000710

08006cfc <__errno>:
 8006cfc:	4b01      	ldr	r3, [pc, #4]	; (8006d04 <__errno+0x8>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000064 	.word	0x20000064

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4d0d      	ldr	r5, [pc, #52]	; (8006d40 <__libc_init_array+0x38>)
 8006d0c:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d0e:	1b64      	subs	r4, r4, r5
 8006d10:	10a4      	asrs	r4, r4, #2
 8006d12:	2600      	movs	r6, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	4d0b      	ldr	r5, [pc, #44]	; (8006d48 <__libc_init_array+0x40>)
 8006d1a:	4c0c      	ldr	r4, [pc, #48]	; (8006d4c <__libc_init_array+0x44>)
 8006d1c:	f003 fbe6 	bl	800a4ec <_init>
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	2600      	movs	r6, #0
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	0800a958 	.word	0x0800a958
 8006d44:	0800a958 	.word	0x0800a958
 8006d48:	0800a958 	.word	0x0800a958
 8006d4c:	0800a95c 	.word	0x0800a95c

08006d50 <__retarget_lock_acquire_recursive>:
 8006d50:	4770      	bx	lr

08006d52 <__retarget_lock_release_recursive>:
 8006d52:	4770      	bx	lr

08006d54 <nanf>:
 8006d54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d5c <nanf+0x8>
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	7fc00000 	.word	0x7fc00000

08006d60 <quorem>:
 8006d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	6903      	ldr	r3, [r0, #16]
 8006d66:	690c      	ldr	r4, [r1, #16]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	db7e      	blt.n	8006e6c <quorem+0x10c>
 8006d6e:	3c01      	subs	r4, #1
 8006d70:	f101 0814 	add.w	r8, r1, #20
 8006d74:	f100 0514 	add.w	r5, r0, #20
 8006d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d86:	3301      	adds	r3, #1
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d92:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d96:	d331      	bcc.n	8006dfc <quorem+0x9c>
 8006d98:	f04f 0e00 	mov.w	lr, #0
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	46ac      	mov	ip, r5
 8006da0:	46f2      	mov	sl, lr
 8006da2:	f850 2b04 	ldr.w	r2, [r0], #4
 8006da6:	b293      	uxth	r3, r2
 8006da8:	fb06 e303 	mla	r3, r6, r3, lr
 8006dac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006db0:	0c1a      	lsrs	r2, r3, #16
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ebaa 0303 	sub.w	r3, sl, r3
 8006db8:	f8dc a000 	ldr.w	sl, [ip]
 8006dbc:	fa13 f38a 	uxtah	r3, r3, sl
 8006dc0:	fb06 220e 	mla	r2, r6, lr, r2
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dd6:	f8bd 3000 	ldrh.w	r3, [sp]
 8006dda:	4581      	cmp	r9, r0
 8006ddc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006de0:	f84c 3b04 	str.w	r3, [ip], #4
 8006de4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006de8:	d2db      	bcs.n	8006da2 <quorem+0x42>
 8006dea:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dee:	b92b      	cbnz	r3, 8006dfc <quorem+0x9c>
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	3b04      	subs	r3, #4
 8006df4:	429d      	cmp	r5, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	d32c      	bcc.n	8006e54 <quorem+0xf4>
 8006dfa:	613c      	str	r4, [r7, #16]
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f001 f9ef 	bl	80081e0 <__mcmp>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	db22      	blt.n	8006e4c <quorem+0xec>
 8006e06:	3601      	adds	r6, #1
 8006e08:	4629      	mov	r1, r5
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e10:	f8d1 c000 	ldr.w	ip, [r1]
 8006e14:	b293      	uxth	r3, r2
 8006e16:	1ac3      	subs	r3, r0, r3
 8006e18:	0c12      	lsrs	r2, r2, #16
 8006e1a:	fa13 f38c 	uxtah	r3, r3, ip
 8006e1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006e22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e2c:	45c1      	cmp	r9, r8
 8006e2e:	f841 3b04 	str.w	r3, [r1], #4
 8006e32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e36:	d2e9      	bcs.n	8006e0c <quorem+0xac>
 8006e38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e40:	b922      	cbnz	r2, 8006e4c <quorem+0xec>
 8006e42:	3b04      	subs	r3, #4
 8006e44:	429d      	cmp	r5, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	d30a      	bcc.n	8006e60 <quorem+0x100>
 8006e4a:	613c      	str	r4, [r7, #16]
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	b003      	add	sp, #12
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	3b04      	subs	r3, #4
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	d1ce      	bne.n	8006dfa <quorem+0x9a>
 8006e5c:	3c01      	subs	r4, #1
 8006e5e:	e7c9      	b.n	8006df4 <quorem+0x94>
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	3b04      	subs	r3, #4
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d1f0      	bne.n	8006e4a <quorem+0xea>
 8006e68:	3c01      	subs	r4, #1
 8006e6a:	e7eb      	b.n	8006e44 <quorem+0xe4>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e7ee      	b.n	8006e4e <quorem+0xee>

08006e70 <_dtoa_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b04 	vpush	{d8-d9}
 8006e78:	69c5      	ldr	r5, [r0, #28]
 8006e7a:	b093      	sub	sp, #76	; 0x4c
 8006e7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e80:	ec57 6b10 	vmov	r6, r7, d0
 8006e84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e88:	9107      	str	r1, [sp, #28]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e90:	b975      	cbnz	r5, 8006eb0 <_dtoa_r+0x40>
 8006e92:	2010      	movs	r0, #16
 8006e94:	f000 fe2a 	bl	8007aec <malloc>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	61e0      	str	r0, [r4, #28]
 8006e9c:	b920      	cbnz	r0, 8006ea8 <_dtoa_r+0x38>
 8006e9e:	4bae      	ldr	r3, [pc, #696]	; (8007158 <_dtoa_r+0x2e8>)
 8006ea0:	21ef      	movs	r1, #239	; 0xef
 8006ea2:	48ae      	ldr	r0, [pc, #696]	; (800715c <_dtoa_r+0x2ec>)
 8006ea4:	f002 fed0 	bl	8009c48 <__assert_func>
 8006ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eac:	6005      	str	r5, [r0, #0]
 8006eae:	60c5      	str	r5, [r0, #12]
 8006eb0:	69e3      	ldr	r3, [r4, #28]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	b151      	cbz	r1, 8006ecc <_dtoa_r+0x5c>
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	604a      	str	r2, [r1, #4]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4093      	lsls	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 ff07 	bl	8007cd4 <_Bfree>
 8006ec6:	69e3      	ldr	r3, [r4, #28]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	1e3b      	subs	r3, r7, #0
 8006ece:	bfbb      	ittet	lt
 8006ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	9303      	strlt	r3, [sp, #12]
 8006ed6:	2300      	movge	r3, #0
 8006ed8:	2201      	movlt	r2, #1
 8006eda:	bfac      	ite	ge
 8006edc:	f8c8 3000 	strge.w	r3, [r8]
 8006ee0:	f8c8 2000 	strlt.w	r2, [r8]
 8006ee4:	4b9e      	ldr	r3, [pc, #632]	; (8007160 <_dtoa_r+0x2f0>)
 8006ee6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006eea:	ea33 0308 	bics.w	r3, r3, r8
 8006eee:	d11b      	bne.n	8006f28 <_dtoa_r+0xb8>
 8006ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006efc:	4333      	orrs	r3, r6
 8006efe:	f000 8593 	beq.w	8007a28 <_dtoa_r+0xbb8>
 8006f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f04:	b963      	cbnz	r3, 8006f20 <_dtoa_r+0xb0>
 8006f06:	4b97      	ldr	r3, [pc, #604]	; (8007164 <_dtoa_r+0x2f4>)
 8006f08:	e027      	b.n	8006f5a <_dtoa_r+0xea>
 8006f0a:	4b97      	ldr	r3, [pc, #604]	; (8007168 <_dtoa_r+0x2f8>)
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9800      	ldr	r0, [sp, #0]
 8006f16:	b013      	add	sp, #76	; 0x4c
 8006f18:	ecbd 8b04 	vpop	{d8-d9}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	4b90      	ldr	r3, [pc, #576]	; (8007164 <_dtoa_r+0x2f4>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	3303      	adds	r3, #3
 8006f26:	e7f3      	b.n	8006f10 <_dtoa_r+0xa0>
 8006f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	ec51 0b17 	vmov	r0, r1, d7
 8006f32:	eeb0 8a47 	vmov.f32	s16, s14
 8006f36:	eef0 8a67 	vmov.f32	s17, s15
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f7f9 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f40:	4681      	mov	r9, r0
 8006f42:	b160      	cbz	r0, 8006f5e <_dtoa_r+0xee>
 8006f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f46:	2301      	movs	r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8568 	beq.w	8007a22 <_dtoa_r+0xbb2>
 8006f52:	4b86      	ldr	r3, [pc, #536]	; (800716c <_dtoa_r+0x2fc>)
 8006f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	e7da      	b.n	8006f14 <_dtoa_r+0xa4>
 8006f5e:	aa10      	add	r2, sp, #64	; 0x40
 8006f60:	a911      	add	r1, sp, #68	; 0x44
 8006f62:	4620      	mov	r0, r4
 8006f64:	eeb0 0a48 	vmov.f32	s0, s16
 8006f68:	eef0 0a68 	vmov.f32	s1, s17
 8006f6c:	f001 fa4e 	bl	800840c <__d2b>
 8006f70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f74:	4682      	mov	sl, r0
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	d07f      	beq.n	800707a <_dtoa_r+0x20a>
 8006f7a:	ee18 3a90 	vmov	r3, s17
 8006f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f86:	ec51 0b18 	vmov	r0, r1, d8
 8006f8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006f96:	4619      	mov	r1, r3
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b75      	ldr	r3, [pc, #468]	; (8007170 <_dtoa_r+0x300>)
 8006f9c:	f7f9 f984 	bl	80002a8 <__aeabi_dsub>
 8006fa0:	a367      	add	r3, pc, #412	; (adr r3, 8007140 <_dtoa_r+0x2d0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fb37 	bl	8000618 <__aeabi_dmul>
 8006faa:	a367      	add	r3, pc, #412	; (adr r3, 8007148 <_dtoa_r+0x2d8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 f97c 	bl	80002ac <__adddf3>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f7f9 fac3 	bl	8000544 <__aeabi_i2d>
 8006fbe:	a364      	add	r3, pc, #400	; (adr r3, 8007150 <_dtoa_r+0x2e0>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 fb28 	bl	8000618 <__aeabi_dmul>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 f96c 	bl	80002ac <__adddf3>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	f7f9 fdce 	bl	8000b78 <__aeabi_d2iz>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4683      	mov	fp, r0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 fd89 	bl	8000afc <__aeabi_dcmplt>
 8006fea:	b148      	cbz	r0, 8007000 <_dtoa_r+0x190>
 8006fec:	4658      	mov	r0, fp
 8006fee:	f7f9 faa9 	bl	8000544 <__aeabi_i2d>
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	f7f9 fd77 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ffa:	b908      	cbnz	r0, 8007000 <_dtoa_r+0x190>
 8006ffc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007000:	f1bb 0f16 	cmp.w	fp, #22
 8007004:	d857      	bhi.n	80070b6 <_dtoa_r+0x246>
 8007006:	4b5b      	ldr	r3, [pc, #364]	; (8007174 <_dtoa_r+0x304>)
 8007008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	ec51 0b18 	vmov	r0, r1, d8
 8007014:	f7f9 fd72 	bl	8000afc <__aeabi_dcmplt>
 8007018:	2800      	cmp	r0, #0
 800701a:	d04e      	beq.n	80070ba <_dtoa_r+0x24a>
 800701c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007020:	2300      	movs	r3, #0
 8007022:	930c      	str	r3, [sp, #48]	; 0x30
 8007024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007026:	1b5b      	subs	r3, r3, r5
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	bf45      	ittet	mi
 800702c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007030:	9305      	strmi	r3, [sp, #20]
 8007032:	2300      	movpl	r3, #0
 8007034:	2300      	movmi	r3, #0
 8007036:	9206      	str	r2, [sp, #24]
 8007038:	bf54      	ite	pl
 800703a:	9305      	strpl	r3, [sp, #20]
 800703c:	9306      	strmi	r3, [sp, #24]
 800703e:	f1bb 0f00 	cmp.w	fp, #0
 8007042:	db3c      	blt.n	80070be <_dtoa_r+0x24e>
 8007044:	9b06      	ldr	r3, [sp, #24]
 8007046:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800704a:	445b      	add	r3, fp
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	2300      	movs	r3, #0
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	2b09      	cmp	r3, #9
 8007056:	d868      	bhi.n	800712a <_dtoa_r+0x2ba>
 8007058:	2b05      	cmp	r3, #5
 800705a:	bfc4      	itt	gt
 800705c:	3b04      	subgt	r3, #4
 800705e:	9307      	strgt	r3, [sp, #28]
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	f1a3 0302 	sub.w	r3, r3, #2
 8007066:	bfcc      	ite	gt
 8007068:	2500      	movgt	r5, #0
 800706a:	2501      	movle	r5, #1
 800706c:	2b03      	cmp	r3, #3
 800706e:	f200 8085 	bhi.w	800717c <_dtoa_r+0x30c>
 8007072:	e8df f003 	tbb	[pc, r3]
 8007076:	3b2e      	.short	0x3b2e
 8007078:	5839      	.short	0x5839
 800707a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800707e:	441d      	add	r5, r3
 8007080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007084:	2b20      	cmp	r3, #32
 8007086:	bfc1      	itttt	gt
 8007088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800708c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007090:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007094:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007098:	bfd6      	itet	le
 800709a:	f1c3 0320 	rsble	r3, r3, #32
 800709e:	ea48 0003 	orrgt.w	r0, r8, r3
 80070a2:	fa06 f003 	lslle.w	r0, r6, r3
 80070a6:	f7f9 fa3d 	bl	8000524 <__aeabi_ui2d>
 80070aa:	2201      	movs	r2, #1
 80070ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80070b0:	3d01      	subs	r5, #1
 80070b2:	920e      	str	r2, [sp, #56]	; 0x38
 80070b4:	e76f      	b.n	8006f96 <_dtoa_r+0x126>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7b3      	b.n	8007022 <_dtoa_r+0x1b2>
 80070ba:	900c      	str	r0, [sp, #48]	; 0x30
 80070bc:	e7b2      	b.n	8007024 <_dtoa_r+0x1b4>
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	eba3 030b 	sub.w	r3, r3, fp
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	f1cb 0300 	rsb	r3, fp, #0
 80070ca:	9308      	str	r3, [sp, #32]
 80070cc:	2300      	movs	r3, #0
 80070ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d0:	e7bf      	b.n	8007052 <_dtoa_r+0x1e2>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dc52      	bgt.n	8007182 <_dtoa_r+0x312>
 80070dc:	2301      	movs	r3, #1
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	461a      	mov	r2, r3
 80070e4:	920a      	str	r2, [sp, #40]	; 0x28
 80070e6:	e00b      	b.n	8007100 <_dtoa_r+0x290>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e7f3      	b.n	80070d4 <_dtoa_r+0x264>
 80070ec:	2300      	movs	r3, #0
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	445b      	add	r3, fp
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	3301      	adds	r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	bfb8      	it	lt
 80070fe:	2301      	movlt	r3, #1
 8007100:	69e0      	ldr	r0, [r4, #28]
 8007102:	2100      	movs	r1, #0
 8007104:	2204      	movs	r2, #4
 8007106:	f102 0614 	add.w	r6, r2, #20
 800710a:	429e      	cmp	r6, r3
 800710c:	d93d      	bls.n	800718a <_dtoa_r+0x31a>
 800710e:	6041      	str	r1, [r0, #4]
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fd9f 	bl	8007c54 <_Balloc>
 8007116:	9000      	str	r0, [sp, #0]
 8007118:	2800      	cmp	r0, #0
 800711a:	d139      	bne.n	8007190 <_dtoa_r+0x320>
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <_dtoa_r+0x308>)
 800711e:	4602      	mov	r2, r0
 8007120:	f240 11af 	movw	r1, #431	; 0x1af
 8007124:	e6bd      	b.n	8006ea2 <_dtoa_r+0x32>
 8007126:	2301      	movs	r3, #1
 8007128:	e7e1      	b.n	80070ee <_dtoa_r+0x27e>
 800712a:	2501      	movs	r5, #1
 800712c:	2300      	movs	r3, #0
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	9509      	str	r5, [sp, #36]	; 0x24
 8007132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	2200      	movs	r2, #0
 800713c:	2312      	movs	r3, #18
 800713e:	e7d1      	b.n	80070e4 <_dtoa_r+0x274>
 8007140:	636f4361 	.word	0x636f4361
 8007144:	3fd287a7 	.word	0x3fd287a7
 8007148:	8b60c8b3 	.word	0x8b60c8b3
 800714c:	3fc68a28 	.word	0x3fc68a28
 8007150:	509f79fb 	.word	0x509f79fb
 8007154:	3fd34413 	.word	0x3fd34413
 8007158:	0800a56e 	.word	0x0800a56e
 800715c:	0800a585 	.word	0x0800a585
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	0800a56a 	.word	0x0800a56a
 8007168:	0800a561 	.word	0x0800a561
 800716c:	0800a539 	.word	0x0800a539
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	0800a670 	.word	0x0800a670
 8007178:	0800a5dd 	.word	0x0800a5dd
 800717c:	2301      	movs	r3, #1
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e7d7      	b.n	8007132 <_dtoa_r+0x2c2>
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	e7ba      	b.n	8007100 <_dtoa_r+0x290>
 800718a:	3101      	adds	r1, #1
 800718c:	0052      	lsls	r2, r2, #1
 800718e:	e7ba      	b.n	8007106 <_dtoa_r+0x296>
 8007190:	69e3      	ldr	r3, [r4, #28]
 8007192:	9a00      	ldr	r2, [sp, #0]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	9b04      	ldr	r3, [sp, #16]
 8007198:	2b0e      	cmp	r3, #14
 800719a:	f200 80a8 	bhi.w	80072ee <_dtoa_r+0x47e>
 800719e:	2d00      	cmp	r5, #0
 80071a0:	f000 80a5 	beq.w	80072ee <_dtoa_r+0x47e>
 80071a4:	f1bb 0f00 	cmp.w	fp, #0
 80071a8:	dd38      	ble.n	800721c <_dtoa_r+0x3ac>
 80071aa:	4bc0      	ldr	r3, [pc, #768]	; (80074ac <_dtoa_r+0x63c>)
 80071ac:	f00b 020f 	and.w	r2, fp, #15
 80071b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80071bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80071c0:	d019      	beq.n	80071f6 <_dtoa_r+0x386>
 80071c2:	4bbb      	ldr	r3, [pc, #748]	; (80074b0 <_dtoa_r+0x640>)
 80071c4:	ec51 0b18 	vmov	r0, r1, d8
 80071c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071cc:	f7f9 fb4e 	bl	800086c <__aeabi_ddiv>
 80071d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d4:	f008 080f 	and.w	r8, r8, #15
 80071d8:	2503      	movs	r5, #3
 80071da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80074b0 <_dtoa_r+0x640>
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	d10a      	bne.n	80071fa <_dtoa_r+0x38a>
 80071e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	f7f9 fb3e 	bl	800086c <__aeabi_ddiv>
 80071f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f4:	e02b      	b.n	800724e <_dtoa_r+0x3de>
 80071f6:	2502      	movs	r5, #2
 80071f8:	e7ef      	b.n	80071da <_dtoa_r+0x36a>
 80071fa:	f018 0f01 	tst.w	r8, #1
 80071fe:	d008      	beq.n	8007212 <_dtoa_r+0x3a2>
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007208:	f7f9 fa06 	bl	8000618 <__aeabi_dmul>
 800720c:	3501      	adds	r5, #1
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007216:	f109 0908 	add.w	r9, r9, #8
 800721a:	e7e0      	b.n	80071de <_dtoa_r+0x36e>
 800721c:	f000 809f 	beq.w	800735e <_dtoa_r+0x4ee>
 8007220:	f1cb 0600 	rsb	r6, fp, #0
 8007224:	4ba1      	ldr	r3, [pc, #644]	; (80074ac <_dtoa_r+0x63c>)
 8007226:	4fa2      	ldr	r7, [pc, #648]	; (80074b0 <_dtoa_r+0x640>)
 8007228:	f006 020f 	and.w	r2, r6, #15
 800722c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	ec51 0b18 	vmov	r0, r1, d8
 8007238:	f7f9 f9ee 	bl	8000618 <__aeabi_dmul>
 800723c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007240:	1136      	asrs	r6, r6, #4
 8007242:	2300      	movs	r3, #0
 8007244:	2502      	movs	r5, #2
 8007246:	2e00      	cmp	r6, #0
 8007248:	d17e      	bne.n	8007348 <_dtoa_r+0x4d8>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d0      	bne.n	80071f0 <_dtoa_r+0x380>
 800724e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007250:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8084 	beq.w	8007362 <_dtoa_r+0x4f2>
 800725a:	4b96      	ldr	r3, [pc, #600]	; (80074b4 <_dtoa_r+0x644>)
 800725c:	2200      	movs	r2, #0
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f9 fc4b 	bl	8000afc <__aeabi_dcmplt>
 8007266:	2800      	cmp	r0, #0
 8007268:	d07b      	beq.n	8007362 <_dtoa_r+0x4f2>
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d078      	beq.n	8007362 <_dtoa_r+0x4f2>
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd39      	ble.n	80072ea <_dtoa_r+0x47a>
 8007276:	4b90      	ldr	r3, [pc, #576]	; (80074b8 <_dtoa_r+0x648>)
 8007278:	2200      	movs	r2, #0
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f9cb 	bl	8000618 <__aeabi_dmul>
 8007282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007286:	9e01      	ldr	r6, [sp, #4]
 8007288:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800728c:	3501      	adds	r5, #1
 800728e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007292:	4628      	mov	r0, r5
 8007294:	f7f9 f956 	bl	8000544 <__aeabi_i2d>
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	f7f9 f9bc 	bl	8000618 <__aeabi_dmul>
 80072a0:	4b86      	ldr	r3, [pc, #536]	; (80074bc <_dtoa_r+0x64c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f9 f802 	bl	80002ac <__adddf3>
 80072a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	d158      	bne.n	8007368 <_dtoa_r+0x4f8>
 80072b6:	4b82      	ldr	r3, [pc, #520]	; (80074c0 <_dtoa_r+0x650>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f8 fff3 	bl	80002a8 <__aeabi_dsub>
 80072c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c6:	4680      	mov	r8, r0
 80072c8:	4689      	mov	r9, r1
 80072ca:	f7f9 fc35 	bl	8000b38 <__aeabi_dcmpgt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 8296 	bne.w	8007800 <_dtoa_r+0x990>
 80072d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072d8:	4640      	mov	r0, r8
 80072da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f9 fc0c 	bl	8000afc <__aeabi_dcmplt>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f040 8289 	bne.w	80077fc <_dtoa_r+0x98c>
 80072ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f2c0 814e 	blt.w	8007592 <_dtoa_r+0x722>
 80072f6:	f1bb 0f0e 	cmp.w	fp, #14
 80072fa:	f300 814a 	bgt.w	8007592 <_dtoa_r+0x722>
 80072fe:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <_dtoa_r+0x63c>)
 8007300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730a:	2b00      	cmp	r3, #0
 800730c:	f280 80dc 	bge.w	80074c8 <_dtoa_r+0x658>
 8007310:	9b04      	ldr	r3, [sp, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f300 80d8 	bgt.w	80074c8 <_dtoa_r+0x658>
 8007318:	f040 826f 	bne.w	80077fa <_dtoa_r+0x98a>
 800731c:	4b68      	ldr	r3, [pc, #416]	; (80074c0 <_dtoa_r+0x650>)
 800731e:	2200      	movs	r2, #0
 8007320:	4640      	mov	r0, r8
 8007322:	4649      	mov	r1, r9
 8007324:	f7f9 f978 	bl	8000618 <__aeabi_dmul>
 8007328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800732c:	f7f9 fbfa 	bl	8000b24 <__aeabi_dcmpge>
 8007330:	9e04      	ldr	r6, [sp, #16]
 8007332:	4637      	mov	r7, r6
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 8245 	bne.w	80077c4 <_dtoa_r+0x954>
 800733a:	9d00      	ldr	r5, [sp, #0]
 800733c:	2331      	movs	r3, #49	; 0x31
 800733e:	f805 3b01 	strb.w	r3, [r5], #1
 8007342:	f10b 0b01 	add.w	fp, fp, #1
 8007346:	e241      	b.n	80077cc <_dtoa_r+0x95c>
 8007348:	07f2      	lsls	r2, r6, #31
 800734a:	d505      	bpl.n	8007358 <_dtoa_r+0x4e8>
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	f7f9 f962 	bl	8000618 <__aeabi_dmul>
 8007354:	3501      	adds	r5, #1
 8007356:	2301      	movs	r3, #1
 8007358:	1076      	asrs	r6, r6, #1
 800735a:	3708      	adds	r7, #8
 800735c:	e773      	b.n	8007246 <_dtoa_r+0x3d6>
 800735e:	2502      	movs	r5, #2
 8007360:	e775      	b.n	800724e <_dtoa_r+0x3de>
 8007362:	9e04      	ldr	r6, [sp, #16]
 8007364:	465f      	mov	r7, fp
 8007366:	e792      	b.n	800728e <_dtoa_r+0x41e>
 8007368:	9900      	ldr	r1, [sp, #0]
 800736a:	4b50      	ldr	r3, [pc, #320]	; (80074ac <_dtoa_r+0x63c>)
 800736c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007370:	4431      	add	r1, r6
 8007372:	9102      	str	r1, [sp, #8]
 8007374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007376:	eeb0 9a47 	vmov.f32	s18, s14
 800737a:	eef0 9a67 	vmov.f32	s19, s15
 800737e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007386:	2900      	cmp	r1, #0
 8007388:	d044      	beq.n	8007414 <_dtoa_r+0x5a4>
 800738a:	494e      	ldr	r1, [pc, #312]	; (80074c4 <_dtoa_r+0x654>)
 800738c:	2000      	movs	r0, #0
 800738e:	f7f9 fa6d 	bl	800086c <__aeabi_ddiv>
 8007392:	ec53 2b19 	vmov	r2, r3, d9
 8007396:	f7f8 ff87 	bl	80002a8 <__aeabi_dsub>
 800739a:	9d00      	ldr	r5, [sp, #0]
 800739c:	ec41 0b19 	vmov	d9, r0, r1
 80073a0:	4649      	mov	r1, r9
 80073a2:	4640      	mov	r0, r8
 80073a4:	f7f9 fbe8 	bl	8000b78 <__aeabi_d2iz>
 80073a8:	4606      	mov	r6, r0
 80073aa:	f7f9 f8cb 	bl	8000544 <__aeabi_i2d>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f8 ff77 	bl	80002a8 <__aeabi_dsub>
 80073ba:	3630      	adds	r6, #48	; 0x30
 80073bc:	f805 6b01 	strb.w	r6, [r5], #1
 80073c0:	ec53 2b19 	vmov	r2, r3, d9
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	f7f9 fb98 	bl	8000afc <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d164      	bne.n	800749a <_dtoa_r+0x62a>
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	4937      	ldr	r1, [pc, #220]	; (80074b4 <_dtoa_r+0x644>)
 80073d6:	2000      	movs	r0, #0
 80073d8:	f7f8 ff66 	bl	80002a8 <__aeabi_dsub>
 80073dc:	ec53 2b19 	vmov	r2, r3, d9
 80073e0:	f7f9 fb8c 	bl	8000afc <__aeabi_dcmplt>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	f040 80b6 	bne.w	8007556 <_dtoa_r+0x6e6>
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	429d      	cmp	r5, r3
 80073ee:	f43f af7c 	beq.w	80072ea <_dtoa_r+0x47a>
 80073f2:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <_dtoa_r+0x648>)
 80073f4:	ec51 0b19 	vmov	r0, r1, d9
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7f9 f90d 	bl	8000618 <__aeabi_dmul>
 80073fe:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <_dtoa_r+0x648>)
 8007400:	ec41 0b19 	vmov	d9, r0, r1
 8007404:	2200      	movs	r2, #0
 8007406:	4640      	mov	r0, r8
 8007408:	4649      	mov	r1, r9
 800740a:	f7f9 f905 	bl	8000618 <__aeabi_dmul>
 800740e:	4680      	mov	r8, r0
 8007410:	4689      	mov	r9, r1
 8007412:	e7c5      	b.n	80073a0 <_dtoa_r+0x530>
 8007414:	ec51 0b17 	vmov	r0, r1, d7
 8007418:	f7f9 f8fe 	bl	8000618 <__aeabi_dmul>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	9d00      	ldr	r5, [sp, #0]
 8007420:	930f      	str	r3, [sp, #60]	; 0x3c
 8007422:	ec41 0b19 	vmov	d9, r0, r1
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	f7f9 fba5 	bl	8000b78 <__aeabi_d2iz>
 800742e:	4606      	mov	r6, r0
 8007430:	f7f9 f888 	bl	8000544 <__aeabi_i2d>
 8007434:	3630      	adds	r6, #48	; 0x30
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f8 ff33 	bl	80002a8 <__aeabi_dsub>
 8007442:	f805 6b01 	strb.w	r6, [r5], #1
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	429d      	cmp	r5, r3
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	d124      	bne.n	800749e <_dtoa_r+0x62e>
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <_dtoa_r+0x654>)
 8007456:	ec51 0b19 	vmov	r0, r1, d9
 800745a:	f7f8 ff27 	bl	80002ac <__adddf3>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 fb67 	bl	8000b38 <__aeabi_dcmpgt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d173      	bne.n	8007556 <_dtoa_r+0x6e6>
 800746e:	ec53 2b19 	vmov	r2, r3, d9
 8007472:	4914      	ldr	r1, [pc, #80]	; (80074c4 <_dtoa_r+0x654>)
 8007474:	2000      	movs	r0, #0
 8007476:	f7f8 ff17 	bl	80002a8 <__aeabi_dsub>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fb3b 	bl	8000afc <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f af2f 	beq.w	80072ea <_dtoa_r+0x47a>
 800748c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800748e:	1e6b      	subs	r3, r5, #1
 8007490:	930f      	str	r3, [sp, #60]	; 0x3c
 8007492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d0f8      	beq.n	800748c <_dtoa_r+0x61c>
 800749a:	46bb      	mov	fp, r7
 800749c:	e04a      	b.n	8007534 <_dtoa_r+0x6c4>
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <_dtoa_r+0x648>)
 80074a0:	f7f9 f8ba 	bl	8000618 <__aeabi_dmul>
 80074a4:	4680      	mov	r8, r0
 80074a6:	4689      	mov	r9, r1
 80074a8:	e7bd      	b.n	8007426 <_dtoa_r+0x5b6>
 80074aa:	bf00      	nop
 80074ac:	0800a670 	.word	0x0800a670
 80074b0:	0800a648 	.word	0x0800a648
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	40240000 	.word	0x40240000
 80074bc:	401c0000 	.word	0x401c0000
 80074c0:	40140000 	.word	0x40140000
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074cc:	9d00      	ldr	r5, [sp, #0]
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f9 f9c9 	bl	800086c <__aeabi_ddiv>
 80074da:	f7f9 fb4d 	bl	8000b78 <__aeabi_d2iz>
 80074de:	9001      	str	r0, [sp, #4]
 80074e0:	f7f9 f830 	bl	8000544 <__aeabi_i2d>
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	f7f9 f896 	bl	8000618 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f8 fed8 	bl	80002a8 <__aeabi_dsub>
 80074f8:	9e01      	ldr	r6, [sp, #4]
 80074fa:	9f04      	ldr	r7, [sp, #16]
 80074fc:	3630      	adds	r6, #48	; 0x30
 80074fe:	f805 6b01 	strb.w	r6, [r5], #1
 8007502:	9e00      	ldr	r6, [sp, #0]
 8007504:	1bae      	subs	r6, r5, r6
 8007506:	42b7      	cmp	r7, r6
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	d134      	bne.n	8007578 <_dtoa_r+0x708>
 800750e:	f7f8 fecd 	bl	80002ac <__adddf3>
 8007512:	4642      	mov	r2, r8
 8007514:	464b      	mov	r3, r9
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	f7f9 fb0d 	bl	8000b38 <__aeabi_dcmpgt>
 800751e:	b9c8      	cbnz	r0, 8007554 <_dtoa_r+0x6e4>
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	4630      	mov	r0, r6
 8007526:	4639      	mov	r1, r7
 8007528:	f7f9 fade 	bl	8000ae8 <__aeabi_dcmpeq>
 800752c:	b110      	cbz	r0, 8007534 <_dtoa_r+0x6c4>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	07db      	lsls	r3, r3, #31
 8007532:	d40f      	bmi.n	8007554 <_dtoa_r+0x6e4>
 8007534:	4651      	mov	r1, sl
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fbcc 	bl	8007cd4 <_Bfree>
 800753c:	2300      	movs	r3, #0
 800753e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007540:	702b      	strb	r3, [r5, #0]
 8007542:	f10b 0301 	add.w	r3, fp, #1
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800754a:	2b00      	cmp	r3, #0
 800754c:	f43f ace2 	beq.w	8006f14 <_dtoa_r+0xa4>
 8007550:	601d      	str	r5, [r3, #0]
 8007552:	e4df      	b.n	8006f14 <_dtoa_r+0xa4>
 8007554:	465f      	mov	r7, fp
 8007556:	462b      	mov	r3, r5
 8007558:	461d      	mov	r5, r3
 800755a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800755e:	2a39      	cmp	r2, #57	; 0x39
 8007560:	d106      	bne.n	8007570 <_dtoa_r+0x700>
 8007562:	9a00      	ldr	r2, [sp, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d1f7      	bne.n	8007558 <_dtoa_r+0x6e8>
 8007568:	9900      	ldr	r1, [sp, #0]
 800756a:	2230      	movs	r2, #48	; 0x30
 800756c:	3701      	adds	r7, #1
 800756e:	700a      	strb	r2, [r1, #0]
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	3201      	adds	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e790      	b.n	800749a <_dtoa_r+0x62a>
 8007578:	4ba3      	ldr	r3, [pc, #652]	; (8007808 <_dtoa_r+0x998>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f9 f84c 	bl	8000618 <__aeabi_dmul>
 8007580:	2200      	movs	r2, #0
 8007582:	2300      	movs	r3, #0
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	f7f9 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800758c:	2800      	cmp	r0, #0
 800758e:	d09e      	beq.n	80074ce <_dtoa_r+0x65e>
 8007590:	e7d0      	b.n	8007534 <_dtoa_r+0x6c4>
 8007592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007594:	2a00      	cmp	r2, #0
 8007596:	f000 80ca 	beq.w	800772e <_dtoa_r+0x8be>
 800759a:	9a07      	ldr	r2, [sp, #28]
 800759c:	2a01      	cmp	r2, #1
 800759e:	f300 80ad 	bgt.w	80076fc <_dtoa_r+0x88c>
 80075a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	f000 80a5 	beq.w	80076f4 <_dtoa_r+0x884>
 80075aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ae:	9e08      	ldr	r6, [sp, #32]
 80075b0:	9d05      	ldr	r5, [sp, #20]
 80075b2:	9a05      	ldr	r2, [sp, #20]
 80075b4:	441a      	add	r2, r3
 80075b6:	9205      	str	r2, [sp, #20]
 80075b8:	9a06      	ldr	r2, [sp, #24]
 80075ba:	2101      	movs	r1, #1
 80075bc:	441a      	add	r2, r3
 80075be:	4620      	mov	r0, r4
 80075c0:	9206      	str	r2, [sp, #24]
 80075c2:	f000 fc87 	bl	8007ed4 <__i2b>
 80075c6:	4607      	mov	r7, r0
 80075c8:	b165      	cbz	r5, 80075e4 <_dtoa_r+0x774>
 80075ca:	9b06      	ldr	r3, [sp, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dd09      	ble.n	80075e4 <_dtoa_r+0x774>
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	9a05      	ldr	r2, [sp, #20]
 80075d4:	bfa8      	it	ge
 80075d6:	462b      	movge	r3, r5
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	9205      	str	r2, [sp, #20]
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	1aed      	subs	r5, r5, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	b1f3      	cbz	r3, 8007626 <_dtoa_r+0x7b6>
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80a3 	beq.w	8007736 <_dtoa_r+0x8c6>
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	dd10      	ble.n	8007616 <_dtoa_r+0x7a6>
 80075f4:	4639      	mov	r1, r7
 80075f6:	4632      	mov	r2, r6
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fd2b 	bl	8008054 <__pow5mult>
 80075fe:	4652      	mov	r2, sl
 8007600:	4601      	mov	r1, r0
 8007602:	4607      	mov	r7, r0
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fc7b 	bl	8007f00 <__multiply>
 800760a:	4651      	mov	r1, sl
 800760c:	4680      	mov	r8, r0
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fb60 	bl	8007cd4 <_Bfree>
 8007614:	46c2      	mov	sl, r8
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	1b9a      	subs	r2, r3, r6
 800761a:	d004      	beq.n	8007626 <_dtoa_r+0x7b6>
 800761c:	4651      	mov	r1, sl
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fd18 	bl	8008054 <__pow5mult>
 8007624:	4682      	mov	sl, r0
 8007626:	2101      	movs	r1, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fc53 	bl	8007ed4 <__i2b>
 800762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	4606      	mov	r6, r0
 8007634:	f340 8081 	ble.w	800773a <_dtoa_r+0x8ca>
 8007638:	461a      	mov	r2, r3
 800763a:	4601      	mov	r1, r0
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fd09 	bl	8008054 <__pow5mult>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b01      	cmp	r3, #1
 8007646:	4606      	mov	r6, r0
 8007648:	dd7a      	ble.n	8007740 <_dtoa_r+0x8d0>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	6933      	ldr	r3, [r6, #16]
 8007650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007654:	6918      	ldr	r0, [r3, #16]
 8007656:	f000 fbef 	bl	8007e38 <__hi0bits>
 800765a:	f1c0 0020 	rsb	r0, r0, #32
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	4418      	add	r0, r3
 8007662:	f010 001f 	ands.w	r0, r0, #31
 8007666:	f000 8094 	beq.w	8007792 <_dtoa_r+0x922>
 800766a:	f1c0 0320 	rsb	r3, r0, #32
 800766e:	2b04      	cmp	r3, #4
 8007670:	f340 8085 	ble.w	800777e <_dtoa_r+0x90e>
 8007674:	9b05      	ldr	r3, [sp, #20]
 8007676:	f1c0 001c 	rsb	r0, r0, #28
 800767a:	4403      	add	r3, r0
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	4403      	add	r3, r0
 8007682:	4405      	add	r5, r0
 8007684:	9306      	str	r3, [sp, #24]
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	dd05      	ble.n	8007698 <_dtoa_r+0x828>
 800768c:	4651      	mov	r1, sl
 800768e:	461a      	mov	r2, r3
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fd39 	bl	8008108 <__lshift>
 8007696:	4682      	mov	sl, r0
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	dd05      	ble.n	80076aa <_dtoa_r+0x83a>
 800769e:	4631      	mov	r1, r6
 80076a0:	461a      	mov	r2, r3
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fd30 	bl	8008108 <__lshift>
 80076a8:	4606      	mov	r6, r0
 80076aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d072      	beq.n	8007796 <_dtoa_r+0x926>
 80076b0:	4631      	mov	r1, r6
 80076b2:	4650      	mov	r0, sl
 80076b4:	f000 fd94 	bl	80081e0 <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	da6c      	bge.n	8007796 <_dtoa_r+0x926>
 80076bc:	2300      	movs	r3, #0
 80076be:	4651      	mov	r1, sl
 80076c0:	220a      	movs	r2, #10
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fb28 	bl	8007d18 <__multadd>
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80076ce:	4682      	mov	sl, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 81b0 	beq.w	8007a36 <_dtoa_r+0xbc6>
 80076d6:	2300      	movs	r3, #0
 80076d8:	4639      	mov	r1, r7
 80076da:	220a      	movs	r2, #10
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fb1b 	bl	8007d18 <__multadd>
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	4607      	mov	r7, r0
 80076e8:	f300 8096 	bgt.w	8007818 <_dtoa_r+0x9a8>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc59      	bgt.n	80077a6 <_dtoa_r+0x936>
 80076f2:	e091      	b.n	8007818 <_dtoa_r+0x9a8>
 80076f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076fa:	e758      	b.n	80075ae <_dtoa_r+0x73e>
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	1e5e      	subs	r6, r3, #1
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	42b3      	cmp	r3, r6
 8007704:	bfbf      	itttt	lt
 8007706:	9b08      	ldrlt	r3, [sp, #32]
 8007708:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800770a:	9608      	strlt	r6, [sp, #32]
 800770c:	1af3      	sublt	r3, r6, r3
 800770e:	bfb4      	ite	lt
 8007710:	18d2      	addlt	r2, r2, r3
 8007712:	1b9e      	subge	r6, r3, r6
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	bfbc      	itt	lt
 8007718:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800771a:	2600      	movlt	r6, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfb7      	itett	lt
 8007720:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007724:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007728:	1a9d      	sublt	r5, r3, r2
 800772a:	2300      	movlt	r3, #0
 800772c:	e741      	b.n	80075b2 <_dtoa_r+0x742>
 800772e:	9e08      	ldr	r6, [sp, #32]
 8007730:	9d05      	ldr	r5, [sp, #20]
 8007732:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007734:	e748      	b.n	80075c8 <_dtoa_r+0x758>
 8007736:	9a08      	ldr	r2, [sp, #32]
 8007738:	e770      	b.n	800761c <_dtoa_r+0x7ac>
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	2b01      	cmp	r3, #1
 800773e:	dc19      	bgt.n	8007774 <_dtoa_r+0x904>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	b9bb      	cbnz	r3, 8007774 <_dtoa_r+0x904>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800774a:	b99b      	cbnz	r3, 8007774 <_dtoa_r+0x904>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	b183      	cbz	r3, 800777a <_dtoa_r+0x90a>
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	3301      	adds	r3, #1
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	3301      	adds	r3, #1
 8007762:	9306      	str	r3, [sp, #24]
 8007764:	f04f 0801 	mov.w	r8, #1
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	f47f af6f 	bne.w	800764e <_dtoa_r+0x7de>
 8007770:	2001      	movs	r0, #1
 8007772:	e774      	b.n	800765e <_dtoa_r+0x7ee>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	e7f6      	b.n	8007768 <_dtoa_r+0x8f8>
 800777a:	4698      	mov	r8, r3
 800777c:	e7f4      	b.n	8007768 <_dtoa_r+0x8f8>
 800777e:	d082      	beq.n	8007686 <_dtoa_r+0x816>
 8007780:	9a05      	ldr	r2, [sp, #20]
 8007782:	331c      	adds	r3, #28
 8007784:	441a      	add	r2, r3
 8007786:	9205      	str	r2, [sp, #20]
 8007788:	9a06      	ldr	r2, [sp, #24]
 800778a:	441a      	add	r2, r3
 800778c:	441d      	add	r5, r3
 800778e:	9206      	str	r2, [sp, #24]
 8007790:	e779      	b.n	8007686 <_dtoa_r+0x816>
 8007792:	4603      	mov	r3, r0
 8007794:	e7f4      	b.n	8007780 <_dtoa_r+0x910>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc37      	bgt.n	800780c <_dtoa_r+0x99c>
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dd34      	ble.n	800780c <_dtoa_r+0x99c>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	b963      	cbnz	r3, 80077c4 <_dtoa_r+0x954>
 80077aa:	4631      	mov	r1, r6
 80077ac:	2205      	movs	r2, #5
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fab2 	bl	8007d18 <__multadd>
 80077b4:	4601      	mov	r1, r0
 80077b6:	4606      	mov	r6, r0
 80077b8:	4650      	mov	r0, sl
 80077ba:	f000 fd11 	bl	80081e0 <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f73f adbb 	bgt.w	800733a <_dtoa_r+0x4ca>
 80077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c6:	9d00      	ldr	r5, [sp, #0]
 80077c8:	ea6f 0b03 	mvn.w	fp, r3
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	4631      	mov	r1, r6
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fa7e 	bl	8007cd4 <_Bfree>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f43f aeab 	beq.w	8007534 <_dtoa_r+0x6c4>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d005      	beq.n	80077f0 <_dtoa_r+0x980>
 80077e4:	45b8      	cmp	r8, r7
 80077e6:	d003      	beq.n	80077f0 <_dtoa_r+0x980>
 80077e8:	4641      	mov	r1, r8
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fa72 	bl	8007cd4 <_Bfree>
 80077f0:	4639      	mov	r1, r7
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 fa6e 	bl	8007cd4 <_Bfree>
 80077f8:	e69c      	b.n	8007534 <_dtoa_r+0x6c4>
 80077fa:	2600      	movs	r6, #0
 80077fc:	4637      	mov	r7, r6
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x954>
 8007800:	46bb      	mov	fp, r7
 8007802:	4637      	mov	r7, r6
 8007804:	e599      	b.n	800733a <_dtoa_r+0x4ca>
 8007806:	bf00      	nop
 8007808:	40240000 	.word	0x40240000
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80c8 	beq.w	80079a4 <_dtoa_r+0xb34>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	2d00      	cmp	r5, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x9b8>
 800781c:	4639      	mov	r1, r7
 800781e:	462a      	mov	r2, r5
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fc71 	bl	8008108 <__lshift>
 8007826:	4607      	mov	r7, r0
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	d05b      	beq.n	80078e6 <_dtoa_r+0xa76>
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fa0f 	bl	8007c54 <_Balloc>
 8007836:	4605      	mov	r5, r0
 8007838:	b928      	cbnz	r0, 8007846 <_dtoa_r+0x9d6>
 800783a:	4b83      	ldr	r3, [pc, #524]	; (8007a48 <_dtoa_r+0xbd8>)
 800783c:	4602      	mov	r2, r0
 800783e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007842:	f7ff bb2e 	b.w	8006ea2 <_dtoa_r+0x32>
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	3202      	adds	r2, #2
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	f107 010c 	add.w	r1, r7, #12
 8007850:	300c      	adds	r0, #12
 8007852:	f002 f9e3 	bl	8009c1c <memcpy>
 8007856:	2201      	movs	r2, #1
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fc54 	bl	8008108 <__lshift>
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786a:	4413      	add	r3, r2
 800786c:	9308      	str	r3, [sp, #32]
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	46b8      	mov	r8, r7
 8007876:	9306      	str	r3, [sp, #24]
 8007878:	4607      	mov	r7, r0
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	4631      	mov	r1, r6
 800787e:	3b01      	subs	r3, #1
 8007880:	4650      	mov	r0, sl
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	f7ff fa6c 	bl	8006d60 <quorem>
 8007888:	4641      	mov	r1, r8
 800788a:	9002      	str	r0, [sp, #8]
 800788c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007890:	4650      	mov	r0, sl
 8007892:	f000 fca5 	bl	80081e0 <__mcmp>
 8007896:	463a      	mov	r2, r7
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	4631      	mov	r1, r6
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fcbb 	bl	8008218 <__mdiff>
 80078a2:	68c2      	ldr	r2, [r0, #12]
 80078a4:	4605      	mov	r5, r0
 80078a6:	bb02      	cbnz	r2, 80078ea <_dtoa_r+0xa7a>
 80078a8:	4601      	mov	r1, r0
 80078aa:	4650      	mov	r0, sl
 80078ac:	f000 fc98 	bl	80081e0 <__mcmp>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4629      	mov	r1, r5
 80078b4:	4620      	mov	r0, r4
 80078b6:	9209      	str	r2, [sp, #36]	; 0x24
 80078b8:	f000 fa0c 	bl	8007cd4 <_Bfree>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	ea43 0102 	orr.w	r1, r3, r2
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	4319      	orrs	r1, r3
 80078ca:	d110      	bne.n	80078ee <_dtoa_r+0xa7e>
 80078cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078d0:	d029      	beq.n	8007926 <_dtoa_r+0xab6>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dd02      	ble.n	80078de <_dtoa_r+0xa6e>
 80078d8:	9b02      	ldr	r3, [sp, #8]
 80078da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80078de:	9b01      	ldr	r3, [sp, #4]
 80078e0:	f883 9000 	strb.w	r9, [r3]
 80078e4:	e774      	b.n	80077d0 <_dtoa_r+0x960>
 80078e6:	4638      	mov	r0, r7
 80078e8:	e7ba      	b.n	8007860 <_dtoa_r+0x9f0>
 80078ea:	2201      	movs	r2, #1
 80078ec:	e7e1      	b.n	80078b2 <_dtoa_r+0xa42>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	db04      	blt.n	80078fe <_dtoa_r+0xa8e>
 80078f4:	9907      	ldr	r1, [sp, #28]
 80078f6:	430b      	orrs	r3, r1
 80078f8:	9906      	ldr	r1, [sp, #24]
 80078fa:	430b      	orrs	r3, r1
 80078fc:	d120      	bne.n	8007940 <_dtoa_r+0xad0>
 80078fe:	2a00      	cmp	r2, #0
 8007900:	dded      	ble.n	80078de <_dtoa_r+0xa6e>
 8007902:	4651      	mov	r1, sl
 8007904:	2201      	movs	r2, #1
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fbfe 	bl	8008108 <__lshift>
 800790c:	4631      	mov	r1, r6
 800790e:	4682      	mov	sl, r0
 8007910:	f000 fc66 	bl	80081e0 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	dc03      	bgt.n	8007920 <_dtoa_r+0xab0>
 8007918:	d1e1      	bne.n	80078de <_dtoa_r+0xa6e>
 800791a:	f019 0f01 	tst.w	r9, #1
 800791e:	d0de      	beq.n	80078de <_dtoa_r+0xa6e>
 8007920:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007924:	d1d8      	bne.n	80078d8 <_dtoa_r+0xa68>
 8007926:	9a01      	ldr	r2, [sp, #4]
 8007928:	2339      	movs	r3, #57	; 0x39
 800792a:	7013      	strb	r3, [r2, #0]
 800792c:	462b      	mov	r3, r5
 800792e:	461d      	mov	r5, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007936:	2a39      	cmp	r2, #57	; 0x39
 8007938:	d06c      	beq.n	8007a14 <_dtoa_r+0xba4>
 800793a:	3201      	adds	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e747      	b.n	80077d0 <_dtoa_r+0x960>
 8007940:	2a00      	cmp	r2, #0
 8007942:	dd07      	ble.n	8007954 <_dtoa_r+0xae4>
 8007944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007948:	d0ed      	beq.n	8007926 <_dtoa_r+0xab6>
 800794a:	9a01      	ldr	r2, [sp, #4]
 800794c:	f109 0301 	add.w	r3, r9, #1
 8007950:	7013      	strb	r3, [r2, #0]
 8007952:	e73d      	b.n	80077d0 <_dtoa_r+0x960>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	9a08      	ldr	r2, [sp, #32]
 8007958:	f803 9c01 	strb.w	r9, [r3, #-1]
 800795c:	4293      	cmp	r3, r2
 800795e:	d043      	beq.n	80079e8 <_dtoa_r+0xb78>
 8007960:	4651      	mov	r1, sl
 8007962:	2300      	movs	r3, #0
 8007964:	220a      	movs	r2, #10
 8007966:	4620      	mov	r0, r4
 8007968:	f000 f9d6 	bl	8007d18 <__multadd>
 800796c:	45b8      	cmp	r8, r7
 800796e:	4682      	mov	sl, r0
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	f04f 020a 	mov.w	r2, #10
 8007978:	4641      	mov	r1, r8
 800797a:	4620      	mov	r0, r4
 800797c:	d107      	bne.n	800798e <_dtoa_r+0xb1e>
 800797e:	f000 f9cb 	bl	8007d18 <__multadd>
 8007982:	4680      	mov	r8, r0
 8007984:	4607      	mov	r7, r0
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	e775      	b.n	800787a <_dtoa_r+0xa0a>
 800798e:	f000 f9c3 	bl	8007d18 <__multadd>
 8007992:	4639      	mov	r1, r7
 8007994:	4680      	mov	r8, r0
 8007996:	2300      	movs	r3, #0
 8007998:	220a      	movs	r2, #10
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f9bc 	bl	8007d18 <__multadd>
 80079a0:	4607      	mov	r7, r0
 80079a2:	e7f0      	b.n	8007986 <_dtoa_r+0xb16>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	9d00      	ldr	r5, [sp, #0]
 80079aa:	4631      	mov	r1, r6
 80079ac:	4650      	mov	r0, sl
 80079ae:	f7ff f9d7 	bl	8006d60 <quorem>
 80079b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	f805 9b01 	strb.w	r9, [r5], #1
 80079bc:	1aea      	subs	r2, r5, r3
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	dd07      	ble.n	80079d4 <_dtoa_r+0xb64>
 80079c4:	4651      	mov	r1, sl
 80079c6:	2300      	movs	r3, #0
 80079c8:	220a      	movs	r2, #10
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f9a4 	bl	8007d18 <__multadd>
 80079d0:	4682      	mov	sl, r0
 80079d2:	e7ea      	b.n	80079aa <_dtoa_r+0xb3a>
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfc8      	it	gt
 80079da:	461d      	movgt	r5, r3
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	bfd8      	it	le
 80079e0:	2501      	movle	r5, #1
 80079e2:	441d      	add	r5, r3
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	4651      	mov	r1, sl
 80079ea:	2201      	movs	r2, #1
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fb8b 	bl	8008108 <__lshift>
 80079f2:	4631      	mov	r1, r6
 80079f4:	4682      	mov	sl, r0
 80079f6:	f000 fbf3 	bl	80081e0 <__mcmp>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	dc96      	bgt.n	800792c <_dtoa_r+0xabc>
 80079fe:	d102      	bne.n	8007a06 <_dtoa_r+0xb96>
 8007a00:	f019 0f01 	tst.w	r9, #1
 8007a04:	d192      	bne.n	800792c <_dtoa_r+0xabc>
 8007a06:	462b      	mov	r3, r5
 8007a08:	461d      	mov	r5, r3
 8007a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a0e:	2a30      	cmp	r2, #48	; 0x30
 8007a10:	d0fa      	beq.n	8007a08 <_dtoa_r+0xb98>
 8007a12:	e6dd      	b.n	80077d0 <_dtoa_r+0x960>
 8007a14:	9a00      	ldr	r2, [sp, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d189      	bne.n	800792e <_dtoa_r+0xabe>
 8007a1a:	f10b 0b01 	add.w	fp, fp, #1
 8007a1e:	2331      	movs	r3, #49	; 0x31
 8007a20:	e796      	b.n	8007950 <_dtoa_r+0xae0>
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <_dtoa_r+0xbdc>)
 8007a24:	f7ff ba99 	b.w	8006f5a <_dtoa_r+0xea>
 8007a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f47f aa6d 	bne.w	8006f0a <_dtoa_r+0x9a>
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <_dtoa_r+0xbe0>)
 8007a32:	f7ff ba92 	b.w	8006f5a <_dtoa_r+0xea>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dcb5      	bgt.n	80079a8 <_dtoa_r+0xb38>
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	f73f aeb1 	bgt.w	80077a6 <_dtoa_r+0x936>
 8007a44:	e7b0      	b.n	80079a8 <_dtoa_r+0xb38>
 8007a46:	bf00      	nop
 8007a48:	0800a5dd 	.word	0x0800a5dd
 8007a4c:	0800a538 	.word	0x0800a538
 8007a50:	0800a561 	.word	0x0800a561

08007a54 <_free_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d044      	beq.n	8007ae4 <_free_r+0x90>
 8007a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5e:	9001      	str	r0, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f1a1 0404 	sub.w	r4, r1, #4
 8007a66:	bfb8      	it	lt
 8007a68:	18e4      	addlt	r4, r4, r3
 8007a6a:	f000 f8e7 	bl	8007c3c <__malloc_lock>
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <_free_r+0x94>)
 8007a70:	9801      	ldr	r0, [sp, #4]
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x30>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	b003      	add	sp, #12
 8007a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a80:	f000 b8e2 	b.w	8007c48 <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x46>
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	1961      	adds	r1, r4, r5
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1949      	addeq	r1, r1, r5
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x22>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x50>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x46>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1855      	adds	r5, r2, r1
 8007aa8:	42a5      	cmp	r5, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x70>
 8007aac:	6824      	ldr	r4, [r4, #0]
 8007aae:	4421      	add	r1, r4
 8007ab0:	1854      	adds	r4, r2, r1
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x26>
 8007ab8:	681c      	ldr	r4, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	440c      	add	r4, r1
 8007ac0:	6014      	str	r4, [r2, #0]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x26>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x78>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x26>
 8007acc:	6825      	ldr	r5, [r4, #0]
 8007ace:	1961      	adds	r1, r4, r5
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf04      	itt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	bf04      	itt	eq
 8007adc:	1949      	addeq	r1, r1, r5
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	6054      	str	r4, [r2, #4]
 8007ae2:	e7ca      	b.n	8007a7a <_free_r+0x26>
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	20000718 	.word	0x20000718

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b823 	b.w	8007b3c <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	20000064 	.word	0x20000064

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0e      	ldr	r6, [pc, #56]	; (8007b38 <sbrk_aligned+0x3c>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f002 f878 	bl	8009bfc <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f002 f873 	bl	8009bfc <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d00a      	beq.n	8007b30 <sbrk_aligned+0x34>
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d007      	beq.n	8007b34 <sbrk_aligned+0x38>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f002 f868 	bl	8009bfc <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d101      	bne.n	8007b34 <sbrk_aligned+0x38>
 8007b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	2000071c 	.word	0x2000071c

08007b3c <_malloc_r>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	1ccd      	adds	r5, r1, #3
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	db01      	blt.n	8007b58 <_malloc_r+0x1c>
 8007b54:	42a9      	cmp	r1, r5
 8007b56:	d905      	bls.n	8007b64 <_malloc_r+0x28>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c38 <_malloc_r+0xfc>
 8007b68:	f000 f868 	bl	8007c3c <__malloc_lock>
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	461c      	mov	r4, r3
 8007b72:	bb5c      	cbnz	r4, 8007bcc <_malloc_r+0x90>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ffc0 	bl	8007afc <sbrk_aligned>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d155      	bne.n	8007c2e <_malloc_r+0xf2>
 8007b82:	f8d8 4000 	ldr.w	r4, [r8]
 8007b86:	4626      	mov	r6, r4
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d145      	bne.n	8007c18 <_malloc_r+0xdc>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d048      	beq.n	8007c22 <_malloc_r+0xe6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4638      	mov	r0, r7
 8007b96:	eb04 0903 	add.w	r9, r4, r3
 8007b9a:	f002 f82f 	bl	8009bfc <_sbrk_r>
 8007b9e:	4581      	cmp	r9, r0
 8007ba0:	d13f      	bne.n	8007c22 <_malloc_r+0xe6>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa7 	bl	8007afc <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d037      	beq.n	8007c22 <_malloc_r+0xe6>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d038      	beq.n	8007c32 <_malloc_r+0xf6>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d12b      	bne.n	8007c1e <_malloc_r+0xe2>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e00f      	b.n	8007bec <_malloc_r+0xb0>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	1b52      	subs	r2, r2, r5
 8007bd0:	d41f      	bmi.n	8007c12 <_malloc_r+0xd6>
 8007bd2:	2a0b      	cmp	r2, #11
 8007bd4:	d917      	bls.n	8007c06 <_malloc_r+0xca>
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	6025      	str	r5, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	6059      	strne	r1, [r3, #4]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	bf08      	it	eq
 8007be4:	f8c8 1000 	streq.w	r1, [r8]
 8007be8:	5162      	str	r2, [r4, r5]
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	4638      	mov	r0, r7
 8007bee:	f104 060b 	add.w	r6, r4, #11
 8007bf2:	f000 f829 	bl	8007c48 <__malloc_unlock>
 8007bf6:	f026 0607 	bic.w	r6, r6, #7
 8007bfa:	1d23      	adds	r3, r4, #4
 8007bfc:	1af2      	subs	r2, r6, r3
 8007bfe:	d0ae      	beq.n	8007b5e <_malloc_r+0x22>
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	50a3      	str	r3, [r4, r2]
 8007c04:	e7ab      	b.n	8007b5e <_malloc_r+0x22>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x8c>
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e7ec      	b.n	8007bec <_malloc_r+0xb0>
 8007c12:	4623      	mov	r3, r4
 8007c14:	6864      	ldr	r4, [r4, #4]
 8007c16:	e7ac      	b.n	8007b72 <_malloc_r+0x36>
 8007c18:	4634      	mov	r4, r6
 8007c1a:	6876      	ldr	r6, [r6, #4]
 8007c1c:	e7b4      	b.n	8007b88 <_malloc_r+0x4c>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7cc      	b.n	8007bbc <_malloc_r+0x80>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 f80e 	bl	8007c48 <__malloc_unlock>
 8007c2c:	e797      	b.n	8007b5e <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7dc      	b.n	8007bec <_malloc_r+0xb0>
 8007c32:	605b      	str	r3, [r3, #4]
 8007c34:	deff      	udf	#255	; 0xff
 8007c36:	bf00      	nop
 8007c38:	20000718 	.word	0x20000718

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f7ff b887 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000714 	.word	0x20000714

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f7ff b882 	b.w	8006d52 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20000714 	.word	0x20000714

08007c54 <_Balloc>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	69c6      	ldr	r6, [r0, #28]
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Balloc+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ff44 	bl	8007aec <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	61e0      	str	r0, [r4, #28]
 8007c68:	b920      	cbnz	r0, 8007c74 <_Balloc+0x20>
 8007c6a:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <_Balloc+0x78>)
 8007c6c:	4818      	ldr	r0, [pc, #96]	; (8007cd0 <_Balloc+0x7c>)
 8007c6e:	216b      	movs	r1, #107	; 0x6b
 8007c70:	f001 ffea 	bl	8009c48 <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	69e6      	ldr	r6, [r4, #28]
 8007c7e:	68f3      	ldr	r3, [r6, #12]
 8007c80:	b183      	cbz	r3, 8007ca4 <_Balloc+0x50>
 8007c82:	69e3      	ldr	r3, [r4, #28]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c8a:	b9b8      	cbnz	r0, 8007cbc <_Balloc+0x68>
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c92:	1d72      	adds	r2, r6, #5
 8007c94:	0092      	lsls	r2, r2, #2
 8007c96:	4620      	mov	r0, r4
 8007c98:	f001 fff4 	bl	8009c84 <_calloc_r>
 8007c9c:	b160      	cbz	r0, 8007cb8 <_Balloc+0x64>
 8007c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ca2:	e00e      	b.n	8007cc2 <_Balloc+0x6e>
 8007ca4:	2221      	movs	r2, #33	; 0x21
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f001 ffeb 	bl	8009c84 <_calloc_r>
 8007cae:	69e3      	ldr	r3, [r4, #28]
 8007cb0:	60f0      	str	r0, [r6, #12]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e4      	bne.n	8007c82 <_Balloc+0x2e>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc8:	e7f7      	b.n	8007cba <_Balloc+0x66>
 8007cca:	bf00      	nop
 8007ccc:	0800a56e 	.word	0x0800a56e
 8007cd0:	0800a5ee 	.word	0x0800a5ee

08007cd4 <_Bfree>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	69c6      	ldr	r6, [r0, #28]
 8007cd8:	4605      	mov	r5, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b976      	cbnz	r6, 8007cfc <_Bfree+0x28>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f7ff ff04 	bl	8007aec <malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	61e8      	str	r0, [r5, #28]
 8007ce8:	b920      	cbnz	r0, 8007cf4 <_Bfree+0x20>
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <_Bfree+0x3c>)
 8007cec:	4809      	ldr	r0, [pc, #36]	; (8007d14 <_Bfree+0x40>)
 8007cee:	218f      	movs	r1, #143	; 0x8f
 8007cf0:	f001 ffaa 	bl	8009c48 <__assert_func>
 8007cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf8:	6006      	str	r6, [r0, #0]
 8007cfa:	60c6      	str	r6, [r0, #12]
 8007cfc:	b13c      	cbz	r4, 8007d0e <_Bfree+0x3a>
 8007cfe:	69eb      	ldr	r3, [r5, #28]
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d08:	6021      	str	r1, [r4, #0]
 8007d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	0800a56e 	.word	0x0800a56e
 8007d14:	0800a5ee 	.word	0x0800a5ee

08007d18 <__multadd>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	690d      	ldr	r5, [r1, #16]
 8007d1e:	4607      	mov	r7, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	461e      	mov	r6, r3
 8007d24:	f101 0c14 	add.w	ip, r1, #20
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	fb02 6101 	mla	r1, r2, r1, r6
 8007d34:	0c1e      	lsrs	r6, r3, #16
 8007d36:	0c0b      	lsrs	r3, r1, #16
 8007d38:	fb02 3306 	mla	r3, r2, r6, r3
 8007d3c:	b289      	uxth	r1, r1
 8007d3e:	3001      	adds	r0, #1
 8007d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d44:	4285      	cmp	r5, r0
 8007d46:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d4e:	dcec      	bgt.n	8007d2a <__multadd+0x12>
 8007d50:	b30e      	cbz	r6, 8007d96 <__multadd+0x7e>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc19      	bgt.n	8007d8c <__multadd+0x74>
 8007d58:	6861      	ldr	r1, [r4, #4]
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	3101      	adds	r1, #1
 8007d5e:	f7ff ff79 	bl	8007c54 <_Balloc>
 8007d62:	4680      	mov	r8, r0
 8007d64:	b928      	cbnz	r0, 8007d72 <__multadd+0x5a>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <__multadd+0x84>)
 8007d6a:	480d      	ldr	r0, [pc, #52]	; (8007da0 <__multadd+0x88>)
 8007d6c:	21ba      	movs	r1, #186	; 0xba
 8007d6e:	f001 ff6b 	bl	8009c48 <__assert_func>
 8007d72:	6922      	ldr	r2, [r4, #16]
 8007d74:	3202      	adds	r2, #2
 8007d76:	f104 010c 	add.w	r1, r4, #12
 8007d7a:	0092      	lsls	r2, r2, #2
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	f001 ff4d 	bl	8009c1c <memcpy>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ffa5 	bl	8007cd4 <_Bfree>
 8007d8a:	4644      	mov	r4, r8
 8007d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d90:	3501      	adds	r5, #1
 8007d92:	615e      	str	r6, [r3, #20]
 8007d94:	6125      	str	r5, [r4, #16]
 8007d96:	4620      	mov	r0, r4
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	0800a5dd 	.word	0x0800a5dd
 8007da0:	0800a5ee 	.word	0x0800a5ee

08007da4 <__s2b>:
 8007da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da8:	460c      	mov	r4, r1
 8007daa:	4615      	mov	r5, r2
 8007dac:	461f      	mov	r7, r3
 8007dae:	2209      	movs	r2, #9
 8007db0:	3308      	adds	r3, #8
 8007db2:	4606      	mov	r6, r0
 8007db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db8:	2100      	movs	r1, #0
 8007dba:	2201      	movs	r2, #1
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	db09      	blt.n	8007dd4 <__s2b+0x30>
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff ff47 	bl	8007c54 <_Balloc>
 8007dc6:	b940      	cbnz	r0, 8007dda <__s2b+0x36>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <__s2b+0x8c>)
 8007dcc:	4819      	ldr	r0, [pc, #100]	; (8007e34 <__s2b+0x90>)
 8007dce:	21d3      	movs	r1, #211	; 0xd3
 8007dd0:	f001 ff3a 	bl	8009c48 <__assert_func>
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	3101      	adds	r1, #1
 8007dd8:	e7f0      	b.n	8007dbc <__s2b+0x18>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	6143      	str	r3, [r0, #20]
 8007dde:	2d09      	cmp	r5, #9
 8007de0:	f04f 0301 	mov.w	r3, #1
 8007de4:	6103      	str	r3, [r0, #16]
 8007de6:	dd16      	ble.n	8007e16 <__s2b+0x72>
 8007de8:	f104 0909 	add.w	r9, r4, #9
 8007dec:	46c8      	mov	r8, r9
 8007dee:	442c      	add	r4, r5
 8007df0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007df4:	4601      	mov	r1, r0
 8007df6:	3b30      	subs	r3, #48	; 0x30
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff8c 	bl	8007d18 <__multadd>
 8007e00:	45a0      	cmp	r8, r4
 8007e02:	d1f5      	bne.n	8007df0 <__s2b+0x4c>
 8007e04:	f1a5 0408 	sub.w	r4, r5, #8
 8007e08:	444c      	add	r4, r9
 8007e0a:	1b2d      	subs	r5, r5, r4
 8007e0c:	1963      	adds	r3, r4, r5
 8007e0e:	42bb      	cmp	r3, r7
 8007e10:	db04      	blt.n	8007e1c <__s2b+0x78>
 8007e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e16:	340a      	adds	r4, #10
 8007e18:	2509      	movs	r5, #9
 8007e1a:	e7f6      	b.n	8007e0a <__s2b+0x66>
 8007e1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e20:	4601      	mov	r1, r0
 8007e22:	3b30      	subs	r3, #48	; 0x30
 8007e24:	220a      	movs	r2, #10
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ff76 	bl	8007d18 <__multadd>
 8007e2c:	e7ee      	b.n	8007e0c <__s2b+0x68>
 8007e2e:	bf00      	nop
 8007e30:	0800a5dd 	.word	0x0800a5dd
 8007e34:	0800a5ee 	.word	0x0800a5ee

08007e38 <__hi0bits>:
 8007e38:	0c03      	lsrs	r3, r0, #16
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	b9d3      	cbnz	r3, 8007e74 <__hi0bits+0x3c>
 8007e3e:	0400      	lsls	r0, r0, #16
 8007e40:	2310      	movs	r3, #16
 8007e42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e46:	bf04      	itt	eq
 8007e48:	0200      	lsleq	r0, r0, #8
 8007e4a:	3308      	addeq	r3, #8
 8007e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e50:	bf04      	itt	eq
 8007e52:	0100      	lsleq	r0, r0, #4
 8007e54:	3304      	addeq	r3, #4
 8007e56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e5a:	bf04      	itt	eq
 8007e5c:	0080      	lsleq	r0, r0, #2
 8007e5e:	3302      	addeq	r3, #2
 8007e60:	2800      	cmp	r0, #0
 8007e62:	db05      	blt.n	8007e70 <__hi0bits+0x38>
 8007e64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e68:	f103 0301 	add.w	r3, r3, #1
 8007e6c:	bf08      	it	eq
 8007e6e:	2320      	moveq	r3, #32
 8007e70:	4618      	mov	r0, r3
 8007e72:	4770      	bx	lr
 8007e74:	2300      	movs	r3, #0
 8007e76:	e7e4      	b.n	8007e42 <__hi0bits+0xa>

08007e78 <__lo0bits>:
 8007e78:	6803      	ldr	r3, [r0, #0]
 8007e7a:	f013 0207 	ands.w	r2, r3, #7
 8007e7e:	d00c      	beq.n	8007e9a <__lo0bits+0x22>
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	d422      	bmi.n	8007eca <__lo0bits+0x52>
 8007e84:	079a      	lsls	r2, r3, #30
 8007e86:	bf49      	itett	mi
 8007e88:	085b      	lsrmi	r3, r3, #1
 8007e8a:	089b      	lsrpl	r3, r3, #2
 8007e8c:	6003      	strmi	r3, [r0, #0]
 8007e8e:	2201      	movmi	r2, #1
 8007e90:	bf5c      	itt	pl
 8007e92:	6003      	strpl	r3, [r0, #0]
 8007e94:	2202      	movpl	r2, #2
 8007e96:	4610      	mov	r0, r2
 8007e98:	4770      	bx	lr
 8007e9a:	b299      	uxth	r1, r3
 8007e9c:	b909      	cbnz	r1, 8007ea2 <__lo0bits+0x2a>
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	b2d9      	uxtb	r1, r3
 8007ea4:	b909      	cbnz	r1, 8007eaa <__lo0bits+0x32>
 8007ea6:	3208      	adds	r2, #8
 8007ea8:	0a1b      	lsrs	r3, r3, #8
 8007eaa:	0719      	lsls	r1, r3, #28
 8007eac:	bf04      	itt	eq
 8007eae:	091b      	lsreq	r3, r3, #4
 8007eb0:	3204      	addeq	r2, #4
 8007eb2:	0799      	lsls	r1, r3, #30
 8007eb4:	bf04      	itt	eq
 8007eb6:	089b      	lsreq	r3, r3, #2
 8007eb8:	3202      	addeq	r2, #2
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	d403      	bmi.n	8007ec6 <__lo0bits+0x4e>
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	f102 0201 	add.w	r2, r2, #1
 8007ec4:	d003      	beq.n	8007ece <__lo0bits+0x56>
 8007ec6:	6003      	str	r3, [r0, #0]
 8007ec8:	e7e5      	b.n	8007e96 <__lo0bits+0x1e>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	e7e3      	b.n	8007e96 <__lo0bits+0x1e>
 8007ece:	2220      	movs	r2, #32
 8007ed0:	e7e1      	b.n	8007e96 <__lo0bits+0x1e>
	...

08007ed4 <__i2b>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	2101      	movs	r1, #1
 8007eda:	f7ff febb 	bl	8007c54 <_Balloc>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	b928      	cbnz	r0, 8007eee <__i2b+0x1a>
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <__i2b+0x24>)
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <__i2b+0x28>)
 8007ee6:	f240 1145 	movw	r1, #325	; 0x145
 8007eea:	f001 fead 	bl	8009c48 <__assert_func>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	6144      	str	r4, [r0, #20]
 8007ef2:	6103      	str	r3, [r0, #16]
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	bf00      	nop
 8007ef8:	0800a5dd 	.word	0x0800a5dd
 8007efc:	0800a5ee 	.word	0x0800a5ee

08007f00 <__multiply>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4691      	mov	r9, r2
 8007f06:	690a      	ldr	r2, [r1, #16]
 8007f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	bfb8      	it	lt
 8007f10:	460b      	movlt	r3, r1
 8007f12:	460c      	mov	r4, r1
 8007f14:	bfbc      	itt	lt
 8007f16:	464c      	movlt	r4, r9
 8007f18:	4699      	movlt	r9, r3
 8007f1a:	6927      	ldr	r7, [r4, #16]
 8007f1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f20:	68a3      	ldr	r3, [r4, #8]
 8007f22:	6861      	ldr	r1, [r4, #4]
 8007f24:	eb07 060a 	add.w	r6, r7, sl
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	bfb8      	it	lt
 8007f2e:	3101      	addlt	r1, #1
 8007f30:	f7ff fe90 	bl	8007c54 <_Balloc>
 8007f34:	b930      	cbnz	r0, 8007f44 <__multiply+0x44>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b44      	ldr	r3, [pc, #272]	; (800804c <__multiply+0x14c>)
 8007f3a:	4845      	ldr	r0, [pc, #276]	; (8008050 <__multiply+0x150>)
 8007f3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f40:	f001 fe82 	bl	8009c48 <__assert_func>
 8007f44:	f100 0514 	add.w	r5, r0, #20
 8007f48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4543      	cmp	r3, r8
 8007f52:	d321      	bcc.n	8007f98 <__multiply+0x98>
 8007f54:	f104 0314 	add.w	r3, r4, #20
 8007f58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f5c:	f109 0314 	add.w	r3, r9, #20
 8007f60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f64:	9202      	str	r2, [sp, #8]
 8007f66:	1b3a      	subs	r2, r7, r4
 8007f68:	3a15      	subs	r2, #21
 8007f6a:	f022 0203 	bic.w	r2, r2, #3
 8007f6e:	3204      	adds	r2, #4
 8007f70:	f104 0115 	add.w	r1, r4, #21
 8007f74:	428f      	cmp	r7, r1
 8007f76:	bf38      	it	cc
 8007f78:	2204      	movcc	r2, #4
 8007f7a:	9201      	str	r2, [sp, #4]
 8007f7c:	9a02      	ldr	r2, [sp, #8]
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d80c      	bhi.n	8007f9e <__multiply+0x9e>
 8007f84:	2e00      	cmp	r6, #0
 8007f86:	dd03      	ble.n	8007f90 <__multiply+0x90>
 8007f88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d05b      	beq.n	8008048 <__multiply+0x148>
 8007f90:	6106      	str	r6, [r0, #16]
 8007f92:	b005      	add	sp, #20
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	f843 2b04 	str.w	r2, [r3], #4
 8007f9c:	e7d8      	b.n	8007f50 <__multiply+0x50>
 8007f9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fa2:	f1ba 0f00 	cmp.w	sl, #0
 8007fa6:	d024      	beq.n	8007ff2 <__multiply+0xf2>
 8007fa8:	f104 0e14 	add.w	lr, r4, #20
 8007fac:	46a9      	mov	r9, r5
 8007fae:	f04f 0c00 	mov.w	ip, #0
 8007fb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fb6:	f8d9 1000 	ldr.w	r1, [r9]
 8007fba:	fa1f fb82 	uxth.w	fp, r2
 8007fbe:	b289      	uxth	r1, r1
 8007fc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fcc:	4461      	add	r1, ip
 8007fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fda:	b289      	uxth	r1, r1
 8007fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fe0:	4577      	cmp	r7, lr
 8007fe2:	f849 1b04 	str.w	r1, [r9], #4
 8007fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fea:	d8e2      	bhi.n	8007fb2 <__multiply+0xb2>
 8007fec:	9a01      	ldr	r2, [sp, #4]
 8007fee:	f845 c002 	str.w	ip, [r5, r2]
 8007ff2:	9a03      	ldr	r2, [sp, #12]
 8007ff4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	d021      	beq.n	8008044 <__multiply+0x144>
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	f104 0c14 	add.w	ip, r4, #20
 8008006:	46ae      	mov	lr, r5
 8008008:	f04f 0a00 	mov.w	sl, #0
 800800c:	f8bc b000 	ldrh.w	fp, [ip]
 8008010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008014:	fb09 220b 	mla	r2, r9, fp, r2
 8008018:	4452      	add	r2, sl
 800801a:	b289      	uxth	r1, r1
 800801c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008020:	f84e 1b04 	str.w	r1, [lr], #4
 8008024:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800802c:	f8be 1000 	ldrh.w	r1, [lr]
 8008030:	fb09 110a 	mla	r1, r9, sl, r1
 8008034:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008038:	4567      	cmp	r7, ip
 800803a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800803e:	d8e5      	bhi.n	800800c <__multiply+0x10c>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	50a9      	str	r1, [r5, r2]
 8008044:	3504      	adds	r5, #4
 8008046:	e799      	b.n	8007f7c <__multiply+0x7c>
 8008048:	3e01      	subs	r6, #1
 800804a:	e79b      	b.n	8007f84 <__multiply+0x84>
 800804c:	0800a5dd 	.word	0x0800a5dd
 8008050:	0800a5ee 	.word	0x0800a5ee

08008054 <__pow5mult>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4615      	mov	r5, r2
 800805a:	f012 0203 	ands.w	r2, r2, #3
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	d007      	beq.n	8008074 <__pow5mult+0x20>
 8008064:	4c25      	ldr	r4, [pc, #148]	; (80080fc <__pow5mult+0xa8>)
 8008066:	3a01      	subs	r2, #1
 8008068:	2300      	movs	r3, #0
 800806a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800806e:	f7ff fe53 	bl	8007d18 <__multadd>
 8008072:	4607      	mov	r7, r0
 8008074:	10ad      	asrs	r5, r5, #2
 8008076:	d03d      	beq.n	80080f4 <__pow5mult+0xa0>
 8008078:	69f4      	ldr	r4, [r6, #28]
 800807a:	b97c      	cbnz	r4, 800809c <__pow5mult+0x48>
 800807c:	2010      	movs	r0, #16
 800807e:	f7ff fd35 	bl	8007aec <malloc>
 8008082:	4602      	mov	r2, r0
 8008084:	61f0      	str	r0, [r6, #28]
 8008086:	b928      	cbnz	r0, 8008094 <__pow5mult+0x40>
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <__pow5mult+0xac>)
 800808a:	481e      	ldr	r0, [pc, #120]	; (8008104 <__pow5mult+0xb0>)
 800808c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008090:	f001 fdda 	bl	8009c48 <__assert_func>
 8008094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008098:	6004      	str	r4, [r0, #0]
 800809a:	60c4      	str	r4, [r0, #12]
 800809c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80080a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080a4:	b94c      	cbnz	r4, 80080ba <__pow5mult+0x66>
 80080a6:	f240 2171 	movw	r1, #625	; 0x271
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff12 	bl	8007ed4 <__i2b>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080b6:	4604      	mov	r4, r0
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	07eb      	lsls	r3, r5, #31
 80080c0:	d50a      	bpl.n	80080d8 <__pow5mult+0x84>
 80080c2:	4639      	mov	r1, r7
 80080c4:	4622      	mov	r2, r4
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7ff ff1a 	bl	8007f00 <__multiply>
 80080cc:	4639      	mov	r1, r7
 80080ce:	4680      	mov	r8, r0
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff fdff 	bl	8007cd4 <_Bfree>
 80080d6:	4647      	mov	r7, r8
 80080d8:	106d      	asrs	r5, r5, #1
 80080da:	d00b      	beq.n	80080f4 <__pow5mult+0xa0>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	b938      	cbnz	r0, 80080f0 <__pow5mult+0x9c>
 80080e0:	4622      	mov	r2, r4
 80080e2:	4621      	mov	r1, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ff0b 	bl	8007f00 <__multiply>
 80080ea:	6020      	str	r0, [r4, #0]
 80080ec:	f8c0 9000 	str.w	r9, [r0]
 80080f0:	4604      	mov	r4, r0
 80080f2:	e7e4      	b.n	80080be <__pow5mult+0x6a>
 80080f4:	4638      	mov	r0, r7
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	bf00      	nop
 80080fc:	0800a738 	.word	0x0800a738
 8008100:	0800a56e 	.word	0x0800a56e
 8008104:	0800a5ee 	.word	0x0800a5ee

08008108 <__lshift>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	6849      	ldr	r1, [r1, #4]
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	4607      	mov	r7, r0
 800811a:	4691      	mov	r9, r2
 800811c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008120:	f108 0601 	add.w	r6, r8, #1
 8008124:	42b3      	cmp	r3, r6
 8008126:	db0b      	blt.n	8008140 <__lshift+0x38>
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff fd93 	bl	8007c54 <_Balloc>
 800812e:	4605      	mov	r5, r0
 8008130:	b948      	cbnz	r0, 8008146 <__lshift+0x3e>
 8008132:	4602      	mov	r2, r0
 8008134:	4b28      	ldr	r3, [pc, #160]	; (80081d8 <__lshift+0xd0>)
 8008136:	4829      	ldr	r0, [pc, #164]	; (80081dc <__lshift+0xd4>)
 8008138:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800813c:	f001 fd84 	bl	8009c48 <__assert_func>
 8008140:	3101      	adds	r1, #1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	e7ee      	b.n	8008124 <__lshift+0x1c>
 8008146:	2300      	movs	r3, #0
 8008148:	f100 0114 	add.w	r1, r0, #20
 800814c:	f100 0210 	add.w	r2, r0, #16
 8008150:	4618      	mov	r0, r3
 8008152:	4553      	cmp	r3, sl
 8008154:	db33      	blt.n	80081be <__lshift+0xb6>
 8008156:	6920      	ldr	r0, [r4, #16]
 8008158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800815c:	f104 0314 	add.w	r3, r4, #20
 8008160:	f019 091f 	ands.w	r9, r9, #31
 8008164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800816c:	d02b      	beq.n	80081c6 <__lshift+0xbe>
 800816e:	f1c9 0e20 	rsb	lr, r9, #32
 8008172:	468a      	mov	sl, r1
 8008174:	2200      	movs	r2, #0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	fa00 f009 	lsl.w	r0, r0, r9
 800817c:	4310      	orrs	r0, r2
 800817e:	f84a 0b04 	str.w	r0, [sl], #4
 8008182:	f853 2b04 	ldr.w	r2, [r3], #4
 8008186:	459c      	cmp	ip, r3
 8008188:	fa22 f20e 	lsr.w	r2, r2, lr
 800818c:	d8f3      	bhi.n	8008176 <__lshift+0x6e>
 800818e:	ebac 0304 	sub.w	r3, ip, r4
 8008192:	3b15      	subs	r3, #21
 8008194:	f023 0303 	bic.w	r3, r3, #3
 8008198:	3304      	adds	r3, #4
 800819a:	f104 0015 	add.w	r0, r4, #21
 800819e:	4584      	cmp	ip, r0
 80081a0:	bf38      	it	cc
 80081a2:	2304      	movcc	r3, #4
 80081a4:	50ca      	str	r2, [r1, r3]
 80081a6:	b10a      	cbz	r2, 80081ac <__lshift+0xa4>
 80081a8:	f108 0602 	add.w	r6, r8, #2
 80081ac:	3e01      	subs	r6, #1
 80081ae:	4638      	mov	r0, r7
 80081b0:	612e      	str	r6, [r5, #16]
 80081b2:	4621      	mov	r1, r4
 80081b4:	f7ff fd8e 	bl	8007cd4 <_Bfree>
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	f842 0f04 	str.w	r0, [r2, #4]!
 80081c2:	3301      	adds	r3, #1
 80081c4:	e7c5      	b.n	8008152 <__lshift+0x4a>
 80081c6:	3904      	subs	r1, #4
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80081d0:	459c      	cmp	ip, r3
 80081d2:	d8f9      	bhi.n	80081c8 <__lshift+0xc0>
 80081d4:	e7ea      	b.n	80081ac <__lshift+0xa4>
 80081d6:	bf00      	nop
 80081d8:	0800a5dd 	.word	0x0800a5dd
 80081dc:	0800a5ee 	.word	0x0800a5ee

080081e0 <__mcmp>:
 80081e0:	b530      	push	{r4, r5, lr}
 80081e2:	6902      	ldr	r2, [r0, #16]
 80081e4:	690c      	ldr	r4, [r1, #16]
 80081e6:	1b12      	subs	r2, r2, r4
 80081e8:	d10e      	bne.n	8008208 <__mcmp+0x28>
 80081ea:	f100 0314 	add.w	r3, r0, #20
 80081ee:	3114      	adds	r1, #20
 80081f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008200:	42a5      	cmp	r5, r4
 8008202:	d003      	beq.n	800820c <__mcmp+0x2c>
 8008204:	d305      	bcc.n	8008212 <__mcmp+0x32>
 8008206:	2201      	movs	r2, #1
 8008208:	4610      	mov	r0, r2
 800820a:	bd30      	pop	{r4, r5, pc}
 800820c:	4283      	cmp	r3, r0
 800820e:	d3f3      	bcc.n	80081f8 <__mcmp+0x18>
 8008210:	e7fa      	b.n	8008208 <__mcmp+0x28>
 8008212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008216:	e7f7      	b.n	8008208 <__mcmp+0x28>

08008218 <__mdiff>:
 8008218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460c      	mov	r4, r1
 800821e:	4606      	mov	r6, r0
 8008220:	4611      	mov	r1, r2
 8008222:	4620      	mov	r0, r4
 8008224:	4690      	mov	r8, r2
 8008226:	f7ff ffdb 	bl	80081e0 <__mcmp>
 800822a:	1e05      	subs	r5, r0, #0
 800822c:	d110      	bne.n	8008250 <__mdiff+0x38>
 800822e:	4629      	mov	r1, r5
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fd0f 	bl	8007c54 <_Balloc>
 8008236:	b930      	cbnz	r0, 8008246 <__mdiff+0x2e>
 8008238:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <__mdiff+0x10c>)
 800823a:	4602      	mov	r2, r0
 800823c:	f240 2137 	movw	r1, #567	; 0x237
 8008240:	4839      	ldr	r0, [pc, #228]	; (8008328 <__mdiff+0x110>)
 8008242:	f001 fd01 	bl	8009c48 <__assert_func>
 8008246:	2301      	movs	r3, #1
 8008248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800824c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	bfa4      	itt	ge
 8008252:	4643      	movge	r3, r8
 8008254:	46a0      	movge	r8, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800825c:	bfa6      	itte	ge
 800825e:	461c      	movge	r4, r3
 8008260:	2500      	movge	r5, #0
 8008262:	2501      	movlt	r5, #1
 8008264:	f7ff fcf6 	bl	8007c54 <_Balloc>
 8008268:	b920      	cbnz	r0, 8008274 <__mdiff+0x5c>
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <__mdiff+0x10c>)
 800826c:	4602      	mov	r2, r0
 800826e:	f240 2145 	movw	r1, #581	; 0x245
 8008272:	e7e5      	b.n	8008240 <__mdiff+0x28>
 8008274:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008278:	6926      	ldr	r6, [r4, #16]
 800827a:	60c5      	str	r5, [r0, #12]
 800827c:	f104 0914 	add.w	r9, r4, #20
 8008280:	f108 0514 	add.w	r5, r8, #20
 8008284:	f100 0e14 	add.w	lr, r0, #20
 8008288:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800828c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008290:	f108 0210 	add.w	r2, r8, #16
 8008294:	46f2      	mov	sl, lr
 8008296:	2100      	movs	r1, #0
 8008298:	f859 3b04 	ldr.w	r3, [r9], #4
 800829c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80082a0:	fa11 f88b 	uxtah	r8, r1, fp
 80082a4:	b299      	uxth	r1, r3
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	eba8 0801 	sub.w	r8, r8, r1
 80082ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082b4:	fa1f f888 	uxth.w	r8, r8
 80082b8:	1419      	asrs	r1, r3, #16
 80082ba:	454e      	cmp	r6, r9
 80082bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082c0:	f84a 3b04 	str.w	r3, [sl], #4
 80082c4:	d8e8      	bhi.n	8008298 <__mdiff+0x80>
 80082c6:	1b33      	subs	r3, r6, r4
 80082c8:	3b15      	subs	r3, #21
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	3304      	adds	r3, #4
 80082d0:	3415      	adds	r4, #21
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	bf38      	it	cc
 80082d6:	2304      	movcc	r3, #4
 80082d8:	441d      	add	r5, r3
 80082da:	4473      	add	r3, lr
 80082dc:	469e      	mov	lr, r3
 80082de:	462e      	mov	r6, r5
 80082e0:	4566      	cmp	r6, ip
 80082e2:	d30e      	bcc.n	8008302 <__mdiff+0xea>
 80082e4:	f10c 0203 	add.w	r2, ip, #3
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	f022 0203 	bic.w	r2, r2, #3
 80082ee:	3d03      	subs	r5, #3
 80082f0:	45ac      	cmp	ip, r5
 80082f2:	bf38      	it	cc
 80082f4:	2200      	movcc	r2, #0
 80082f6:	4413      	add	r3, r2
 80082f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80082fc:	b17a      	cbz	r2, 800831e <__mdiff+0x106>
 80082fe:	6107      	str	r7, [r0, #16]
 8008300:	e7a4      	b.n	800824c <__mdiff+0x34>
 8008302:	f856 8b04 	ldr.w	r8, [r6], #4
 8008306:	fa11 f288 	uxtah	r2, r1, r8
 800830a:	1414      	asrs	r4, r2, #16
 800830c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008310:	b292      	uxth	r2, r2
 8008312:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008316:	f84e 2b04 	str.w	r2, [lr], #4
 800831a:	1421      	asrs	r1, r4, #16
 800831c:	e7e0      	b.n	80082e0 <__mdiff+0xc8>
 800831e:	3f01      	subs	r7, #1
 8008320:	e7ea      	b.n	80082f8 <__mdiff+0xe0>
 8008322:	bf00      	nop
 8008324:	0800a5dd 	.word	0x0800a5dd
 8008328:	0800a5ee 	.word	0x0800a5ee

0800832c <__ulp>:
 800832c:	b082      	sub	sp, #8
 800832e:	ed8d 0b00 	vstr	d0, [sp]
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <__ulp+0x48>)
 8008336:	4013      	ands	r3, r2
 8008338:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc08      	bgt.n	8008352 <__ulp+0x26>
 8008340:	425b      	negs	r3, r3
 8008342:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008346:	ea4f 5223 	mov.w	r2, r3, asr #20
 800834a:	da04      	bge.n	8008356 <__ulp+0x2a>
 800834c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008350:	4113      	asrs	r3, r2
 8008352:	2200      	movs	r2, #0
 8008354:	e008      	b.n	8008368 <__ulp+0x3c>
 8008356:	f1a2 0314 	sub.w	r3, r2, #20
 800835a:	2b1e      	cmp	r3, #30
 800835c:	bfda      	itte	le
 800835e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008362:	40da      	lsrle	r2, r3
 8008364:	2201      	movgt	r2, #1
 8008366:	2300      	movs	r3, #0
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	ec41 0b10 	vmov	d0, r0, r1
 8008370:	b002      	add	sp, #8
 8008372:	4770      	bx	lr
 8008374:	7ff00000 	.word	0x7ff00000

08008378 <__b2d>:
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	6906      	ldr	r6, [r0, #16]
 800837e:	f100 0814 	add.w	r8, r0, #20
 8008382:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008386:	1f37      	subs	r7, r6, #4
 8008388:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800838c:	4610      	mov	r0, r2
 800838e:	f7ff fd53 	bl	8007e38 <__hi0bits>
 8008392:	f1c0 0320 	rsb	r3, r0, #32
 8008396:	280a      	cmp	r0, #10
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	491b      	ldr	r1, [pc, #108]	; (8008408 <__b2d+0x90>)
 800839c:	dc15      	bgt.n	80083ca <__b2d+0x52>
 800839e:	f1c0 0c0b 	rsb	ip, r0, #11
 80083a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80083a6:	45b8      	cmp	r8, r7
 80083a8:	ea43 0501 	orr.w	r5, r3, r1
 80083ac:	bf34      	ite	cc
 80083ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083b2:	2300      	movcs	r3, #0
 80083b4:	3015      	adds	r0, #21
 80083b6:	fa02 f000 	lsl.w	r0, r2, r0
 80083ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80083be:	4303      	orrs	r3, r0
 80083c0:	461c      	mov	r4, r3
 80083c2:	ec45 4b10 	vmov	d0, r4, r5
 80083c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ca:	45b8      	cmp	r8, r7
 80083cc:	bf3a      	itte	cc
 80083ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80083d6:	2300      	movcs	r3, #0
 80083d8:	380b      	subs	r0, #11
 80083da:	d012      	beq.n	8008402 <__b2d+0x8a>
 80083dc:	f1c0 0120 	rsb	r1, r0, #32
 80083e0:	fa23 f401 	lsr.w	r4, r3, r1
 80083e4:	4082      	lsls	r2, r0
 80083e6:	4322      	orrs	r2, r4
 80083e8:	4547      	cmp	r7, r8
 80083ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80083ee:	bf8c      	ite	hi
 80083f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80083f4:	2200      	movls	r2, #0
 80083f6:	4083      	lsls	r3, r0
 80083f8:	40ca      	lsrs	r2, r1
 80083fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80083fe:	4313      	orrs	r3, r2
 8008400:	e7de      	b.n	80083c0 <__b2d+0x48>
 8008402:	ea42 0501 	orr.w	r5, r2, r1
 8008406:	e7db      	b.n	80083c0 <__b2d+0x48>
 8008408:	3ff00000 	.word	0x3ff00000

0800840c <__d2b>:
 800840c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008410:	460f      	mov	r7, r1
 8008412:	2101      	movs	r1, #1
 8008414:	ec59 8b10 	vmov	r8, r9, d0
 8008418:	4616      	mov	r6, r2
 800841a:	f7ff fc1b 	bl	8007c54 <_Balloc>
 800841e:	4604      	mov	r4, r0
 8008420:	b930      	cbnz	r0, 8008430 <__d2b+0x24>
 8008422:	4602      	mov	r2, r0
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__d2b+0xac>)
 8008426:	4825      	ldr	r0, [pc, #148]	; (80084bc <__d2b+0xb0>)
 8008428:	f240 310f 	movw	r1, #783	; 0x30f
 800842c:	f001 fc0c 	bl	8009c48 <__assert_func>
 8008430:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008438:	bb2d      	cbnz	r5, 8008486 <__d2b+0x7a>
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	f1b8 0300 	subs.w	r3, r8, #0
 8008440:	d026      	beq.n	8008490 <__d2b+0x84>
 8008442:	4668      	mov	r0, sp
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f7ff fd17 	bl	8007e78 <__lo0bits>
 800844a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800844e:	b1e8      	cbz	r0, 800848c <__d2b+0x80>
 8008450:	f1c0 0320 	rsb	r3, r0, #32
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	430b      	orrs	r3, r1
 800845a:	40c2      	lsrs	r2, r0
 800845c:	6163      	str	r3, [r4, #20]
 800845e:	9201      	str	r2, [sp, #4]
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	61a3      	str	r3, [r4, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	bf14      	ite	ne
 8008468:	2202      	movne	r2, #2
 800846a:	2201      	moveq	r2, #1
 800846c:	6122      	str	r2, [r4, #16]
 800846e:	b1bd      	cbz	r5, 80084a0 <__d2b+0x94>
 8008470:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008474:	4405      	add	r5, r0
 8008476:	603d      	str	r5, [r7, #0]
 8008478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800847c:	6030      	str	r0, [r6, #0]
 800847e:	4620      	mov	r0, r4
 8008480:	b003      	add	sp, #12
 8008482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800848a:	e7d6      	b.n	800843a <__d2b+0x2e>
 800848c:	6161      	str	r1, [r4, #20]
 800848e:	e7e7      	b.n	8008460 <__d2b+0x54>
 8008490:	a801      	add	r0, sp, #4
 8008492:	f7ff fcf1 	bl	8007e78 <__lo0bits>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	6163      	str	r3, [r4, #20]
 800849a:	3020      	adds	r0, #32
 800849c:	2201      	movs	r2, #1
 800849e:	e7e5      	b.n	800846c <__d2b+0x60>
 80084a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a8:	6038      	str	r0, [r7, #0]
 80084aa:	6918      	ldr	r0, [r3, #16]
 80084ac:	f7ff fcc4 	bl	8007e38 <__hi0bits>
 80084b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084b4:	e7e2      	b.n	800847c <__d2b+0x70>
 80084b6:	bf00      	nop
 80084b8:	0800a5dd 	.word	0x0800a5dd
 80084bc:	0800a5ee 	.word	0x0800a5ee

080084c0 <__ratio>:
 80084c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	4688      	mov	r8, r1
 80084c6:	4669      	mov	r1, sp
 80084c8:	4681      	mov	r9, r0
 80084ca:	f7ff ff55 	bl	8008378 <__b2d>
 80084ce:	a901      	add	r1, sp, #4
 80084d0:	4640      	mov	r0, r8
 80084d2:	ec55 4b10 	vmov	r4, r5, d0
 80084d6:	f7ff ff4f 	bl	8008378 <__b2d>
 80084da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084e2:	eba3 0c02 	sub.w	ip, r3, r2
 80084e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084f0:	ec51 0b10 	vmov	r0, r1, d0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfd6      	itet	le
 80084f8:	460a      	movle	r2, r1
 80084fa:	462a      	movgt	r2, r5
 80084fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008500:	468b      	mov	fp, r1
 8008502:	462f      	mov	r7, r5
 8008504:	bfd4      	ite	le
 8008506:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800850a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800850e:	4620      	mov	r0, r4
 8008510:	ee10 2a10 	vmov	r2, s0
 8008514:	465b      	mov	r3, fp
 8008516:	4639      	mov	r1, r7
 8008518:	f7f8 f9a8 	bl	800086c <__aeabi_ddiv>
 800851c:	ec41 0b10 	vmov	d0, r0, r1
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008526 <__copybits>:
 8008526:	3901      	subs	r1, #1
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	1149      	asrs	r1, r1, #5
 800852c:	6914      	ldr	r4, [r2, #16]
 800852e:	3101      	adds	r1, #1
 8008530:	f102 0314 	add.w	r3, r2, #20
 8008534:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008538:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800853c:	1f05      	subs	r5, r0, #4
 800853e:	42a3      	cmp	r3, r4
 8008540:	d30c      	bcc.n	800855c <__copybits+0x36>
 8008542:	1aa3      	subs	r3, r4, r2
 8008544:	3b11      	subs	r3, #17
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	3211      	adds	r2, #17
 800854c:	42a2      	cmp	r2, r4
 800854e:	bf88      	it	hi
 8008550:	2300      	movhi	r3, #0
 8008552:	4418      	add	r0, r3
 8008554:	2300      	movs	r3, #0
 8008556:	4288      	cmp	r0, r1
 8008558:	d305      	bcc.n	8008566 <__copybits+0x40>
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008560:	f845 6f04 	str.w	r6, [r5, #4]!
 8008564:	e7eb      	b.n	800853e <__copybits+0x18>
 8008566:	f840 3b04 	str.w	r3, [r0], #4
 800856a:	e7f4      	b.n	8008556 <__copybits+0x30>

0800856c <__any_on>:
 800856c:	f100 0214 	add.w	r2, r0, #20
 8008570:	6900      	ldr	r0, [r0, #16]
 8008572:	114b      	asrs	r3, r1, #5
 8008574:	4298      	cmp	r0, r3
 8008576:	b510      	push	{r4, lr}
 8008578:	db11      	blt.n	800859e <__any_on+0x32>
 800857a:	dd0a      	ble.n	8008592 <__any_on+0x26>
 800857c:	f011 011f 	ands.w	r1, r1, #31
 8008580:	d007      	beq.n	8008592 <__any_on+0x26>
 8008582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008586:	fa24 f001 	lsr.w	r0, r4, r1
 800858a:	fa00 f101 	lsl.w	r1, r0, r1
 800858e:	428c      	cmp	r4, r1
 8008590:	d10b      	bne.n	80085aa <__any_on+0x3e>
 8008592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008596:	4293      	cmp	r3, r2
 8008598:	d803      	bhi.n	80085a2 <__any_on+0x36>
 800859a:	2000      	movs	r0, #0
 800859c:	bd10      	pop	{r4, pc}
 800859e:	4603      	mov	r3, r0
 80085a0:	e7f7      	b.n	8008592 <__any_on+0x26>
 80085a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d0f5      	beq.n	8008596 <__any_on+0x2a>
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7f6      	b.n	800859c <__any_on+0x30>

080085ae <sulp>:
 80085ae:	b570      	push	{r4, r5, r6, lr}
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	ec45 4b10 	vmov	d0, r4, r5
 80085b8:	4616      	mov	r6, r2
 80085ba:	f7ff feb7 	bl	800832c <__ulp>
 80085be:	ec51 0b10 	vmov	r0, r1, d0
 80085c2:	b17e      	cbz	r6, 80085e4 <sulp+0x36>
 80085c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dd09      	ble.n	80085e4 <sulp+0x36>
 80085d0:	051b      	lsls	r3, r3, #20
 80085d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085d6:	2400      	movs	r4, #0
 80085d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085dc:	4622      	mov	r2, r4
 80085de:	462b      	mov	r3, r5
 80085e0:	f7f8 f81a 	bl	8000618 <__aeabi_dmul>
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085e8 <_strtod_l>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ed2d 8b02 	vpush	{d8}
 80085f0:	b09b      	sub	sp, #108	; 0x6c
 80085f2:	4604      	mov	r4, r0
 80085f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80085f6:	2200      	movs	r2, #0
 80085f8:	9216      	str	r2, [sp, #88]	; 0x58
 80085fa:	460d      	mov	r5, r1
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	f04f 0900 	mov.w	r9, #0
 8008604:	460a      	mov	r2, r1
 8008606:	9215      	str	r2, [sp, #84]	; 0x54
 8008608:	7811      	ldrb	r1, [r2, #0]
 800860a:	292b      	cmp	r1, #43	; 0x2b
 800860c:	d04c      	beq.n	80086a8 <_strtod_l+0xc0>
 800860e:	d83a      	bhi.n	8008686 <_strtod_l+0x9e>
 8008610:	290d      	cmp	r1, #13
 8008612:	d834      	bhi.n	800867e <_strtod_l+0x96>
 8008614:	2908      	cmp	r1, #8
 8008616:	d834      	bhi.n	8008682 <_strtod_l+0x9a>
 8008618:	2900      	cmp	r1, #0
 800861a:	d03d      	beq.n	8008698 <_strtod_l+0xb0>
 800861c:	2200      	movs	r2, #0
 800861e:	920a      	str	r2, [sp, #40]	; 0x28
 8008620:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008622:	7832      	ldrb	r2, [r6, #0]
 8008624:	2a30      	cmp	r2, #48	; 0x30
 8008626:	f040 80b4 	bne.w	8008792 <_strtod_l+0x1aa>
 800862a:	7872      	ldrb	r2, [r6, #1]
 800862c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008630:	2a58      	cmp	r2, #88	; 0x58
 8008632:	d170      	bne.n	8008716 <_strtod_l+0x12e>
 8008634:	9302      	str	r3, [sp, #8]
 8008636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	ab16      	add	r3, sp, #88	; 0x58
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	4a8e      	ldr	r2, [pc, #568]	; (8008878 <_strtod_l+0x290>)
 8008640:	ab17      	add	r3, sp, #92	; 0x5c
 8008642:	a915      	add	r1, sp, #84	; 0x54
 8008644:	4620      	mov	r0, r4
 8008646:	f001 fb9b 	bl	8009d80 <__gethex>
 800864a:	f010 070f 	ands.w	r7, r0, #15
 800864e:	4605      	mov	r5, r0
 8008650:	d005      	beq.n	800865e <_strtod_l+0x76>
 8008652:	2f06      	cmp	r7, #6
 8008654:	d12a      	bne.n	80086ac <_strtod_l+0xc4>
 8008656:	3601      	adds	r6, #1
 8008658:	2300      	movs	r3, #0
 800865a:	9615      	str	r6, [sp, #84]	; 0x54
 800865c:	930a      	str	r3, [sp, #40]	; 0x28
 800865e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 857f 	bne.w	8009164 <_strtod_l+0xb7c>
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	b1db      	cbz	r3, 80086a2 <_strtod_l+0xba>
 800866a:	4642      	mov	r2, r8
 800866c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008670:	ec43 2b10 	vmov	d0, r2, r3
 8008674:	b01b      	add	sp, #108	; 0x6c
 8008676:	ecbd 8b02 	vpop	{d8}
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	2920      	cmp	r1, #32
 8008680:	d1cc      	bne.n	800861c <_strtod_l+0x34>
 8008682:	3201      	adds	r2, #1
 8008684:	e7bf      	b.n	8008606 <_strtod_l+0x1e>
 8008686:	292d      	cmp	r1, #45	; 0x2d
 8008688:	d1c8      	bne.n	800861c <_strtod_l+0x34>
 800868a:	2101      	movs	r1, #1
 800868c:	910a      	str	r1, [sp, #40]	; 0x28
 800868e:	1c51      	adds	r1, r2, #1
 8008690:	9115      	str	r1, [sp, #84]	; 0x54
 8008692:	7852      	ldrb	r2, [r2, #1]
 8008694:	2a00      	cmp	r2, #0
 8008696:	d1c3      	bne.n	8008620 <_strtod_l+0x38>
 8008698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800869a:	9515      	str	r5, [sp, #84]	; 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 855f 	bne.w	8009160 <_strtod_l+0xb78>
 80086a2:	4642      	mov	r2, r8
 80086a4:	464b      	mov	r3, r9
 80086a6:	e7e3      	b.n	8008670 <_strtod_l+0x88>
 80086a8:	2100      	movs	r1, #0
 80086aa:	e7ef      	b.n	800868c <_strtod_l+0xa4>
 80086ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80086ae:	b13a      	cbz	r2, 80086c0 <_strtod_l+0xd8>
 80086b0:	2135      	movs	r1, #53	; 0x35
 80086b2:	a818      	add	r0, sp, #96	; 0x60
 80086b4:	f7ff ff37 	bl	8008526 <__copybits>
 80086b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff fb0a 	bl	8007cd4 <_Bfree>
 80086c0:	3f01      	subs	r7, #1
 80086c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086c4:	2f04      	cmp	r7, #4
 80086c6:	d806      	bhi.n	80086d6 <_strtod_l+0xee>
 80086c8:	e8df f007 	tbb	[pc, r7]
 80086cc:	201d0314 	.word	0x201d0314
 80086d0:	14          	.byte	0x14
 80086d1:	00          	.byte	0x00
 80086d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80086d6:	05e9      	lsls	r1, r5, #23
 80086d8:	bf48      	it	mi
 80086da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80086de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086e2:	0d1b      	lsrs	r3, r3, #20
 80086e4:	051b      	lsls	r3, r3, #20
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1b9      	bne.n	800865e <_strtod_l+0x76>
 80086ea:	f7fe fb07 	bl	8006cfc <__errno>
 80086ee:	2322      	movs	r3, #34	; 0x22
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	e7b4      	b.n	800865e <_strtod_l+0x76>
 80086f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80086f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008700:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008704:	e7e7      	b.n	80086d6 <_strtod_l+0xee>
 8008706:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008880 <_strtod_l+0x298>
 800870a:	e7e4      	b.n	80086d6 <_strtod_l+0xee>
 800870c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008710:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008714:	e7df      	b.n	80086d6 <_strtod_l+0xee>
 8008716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	9215      	str	r2, [sp, #84]	; 0x54
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b30      	cmp	r3, #48	; 0x30
 8008720:	d0f9      	beq.n	8008716 <_strtod_l+0x12e>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d09b      	beq.n	800865e <_strtod_l+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008730:	930b      	str	r3, [sp, #44]	; 0x2c
 8008732:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008736:	46d3      	mov	fp, sl
 8008738:	220a      	movs	r2, #10
 800873a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800873c:	7806      	ldrb	r6, [r0, #0]
 800873e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008742:	b2d9      	uxtb	r1, r3
 8008744:	2909      	cmp	r1, #9
 8008746:	d926      	bls.n	8008796 <_strtod_l+0x1ae>
 8008748:	494c      	ldr	r1, [pc, #304]	; (800887c <_strtod_l+0x294>)
 800874a:	2201      	movs	r2, #1
 800874c:	f001 fa22 	bl	8009b94 <strncmp>
 8008750:	2800      	cmp	r0, #0
 8008752:	d030      	beq.n	80087b6 <_strtod_l+0x1ce>
 8008754:	2000      	movs	r0, #0
 8008756:	4632      	mov	r2, r6
 8008758:	9005      	str	r0, [sp, #20]
 800875a:	465e      	mov	r6, fp
 800875c:	4603      	mov	r3, r0
 800875e:	2a65      	cmp	r2, #101	; 0x65
 8008760:	d001      	beq.n	8008766 <_strtod_l+0x17e>
 8008762:	2a45      	cmp	r2, #69	; 0x45
 8008764:	d113      	bne.n	800878e <_strtod_l+0x1a6>
 8008766:	b91e      	cbnz	r6, 8008770 <_strtod_l+0x188>
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	4302      	orrs	r2, r0
 800876c:	d094      	beq.n	8008698 <_strtod_l+0xb0>
 800876e:	2600      	movs	r6, #0
 8008770:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008772:	1c6a      	adds	r2, r5, #1
 8008774:	9215      	str	r2, [sp, #84]	; 0x54
 8008776:	786a      	ldrb	r2, [r5, #1]
 8008778:	2a2b      	cmp	r2, #43	; 0x2b
 800877a:	d074      	beq.n	8008866 <_strtod_l+0x27e>
 800877c:	2a2d      	cmp	r2, #45	; 0x2d
 800877e:	d078      	beq.n	8008872 <_strtod_l+0x28a>
 8008780:	f04f 0c00 	mov.w	ip, #0
 8008784:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008788:	2909      	cmp	r1, #9
 800878a:	d97f      	bls.n	800888c <_strtod_l+0x2a4>
 800878c:	9515      	str	r5, [sp, #84]	; 0x54
 800878e:	2700      	movs	r7, #0
 8008790:	e09e      	b.n	80088d0 <_strtod_l+0x2e8>
 8008792:	2300      	movs	r3, #0
 8008794:	e7c8      	b.n	8008728 <_strtod_l+0x140>
 8008796:	f1bb 0f08 	cmp.w	fp, #8
 800879a:	bfd8      	it	le
 800879c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800879e:	f100 0001 	add.w	r0, r0, #1
 80087a2:	bfda      	itte	le
 80087a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80087aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087ae:	f10b 0b01 	add.w	fp, fp, #1
 80087b2:	9015      	str	r0, [sp, #84]	; 0x54
 80087b4:	e7c1      	b.n	800873a <_strtod_l+0x152>
 80087b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	9215      	str	r2, [sp, #84]	; 0x54
 80087bc:	785a      	ldrb	r2, [r3, #1]
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	d037      	beq.n	8008834 <_strtod_l+0x24c>
 80087c4:	9005      	str	r0, [sp, #20]
 80087c6:	465e      	mov	r6, fp
 80087c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d912      	bls.n	80087f6 <_strtod_l+0x20e>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e7c4      	b.n	800875e <_strtod_l+0x176>
 80087d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	9215      	str	r2, [sp, #84]	; 0x54
 80087da:	785a      	ldrb	r2, [r3, #1]
 80087dc:	3001      	adds	r0, #1
 80087de:	2a30      	cmp	r2, #48	; 0x30
 80087e0:	d0f8      	beq.n	80087d4 <_strtod_l+0x1ec>
 80087e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	f200 84c1 	bhi.w	800916e <_strtod_l+0xb86>
 80087ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087ee:	9005      	str	r0, [sp, #20]
 80087f0:	2000      	movs	r0, #0
 80087f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f4:	4606      	mov	r6, r0
 80087f6:	3a30      	subs	r2, #48	; 0x30
 80087f8:	f100 0301 	add.w	r3, r0, #1
 80087fc:	d014      	beq.n	8008828 <_strtod_l+0x240>
 80087fe:	9905      	ldr	r1, [sp, #20]
 8008800:	4419      	add	r1, r3
 8008802:	9105      	str	r1, [sp, #20]
 8008804:	4633      	mov	r3, r6
 8008806:	eb00 0c06 	add.w	ip, r0, r6
 800880a:	210a      	movs	r1, #10
 800880c:	4563      	cmp	r3, ip
 800880e:	d113      	bne.n	8008838 <_strtod_l+0x250>
 8008810:	1833      	adds	r3, r6, r0
 8008812:	2b08      	cmp	r3, #8
 8008814:	f106 0601 	add.w	r6, r6, #1
 8008818:	4406      	add	r6, r0
 800881a:	dc1a      	bgt.n	8008852 <_strtod_l+0x26a>
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	230a      	movs	r3, #10
 8008820:	fb03 2301 	mla	r3, r3, r1, r2
 8008824:	9309      	str	r3, [sp, #36]	; 0x24
 8008826:	2300      	movs	r3, #0
 8008828:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800882a:	1c51      	adds	r1, r2, #1
 800882c:	9115      	str	r1, [sp, #84]	; 0x54
 800882e:	7852      	ldrb	r2, [r2, #1]
 8008830:	4618      	mov	r0, r3
 8008832:	e7c9      	b.n	80087c8 <_strtod_l+0x1e0>
 8008834:	4658      	mov	r0, fp
 8008836:	e7d2      	b.n	80087de <_strtod_l+0x1f6>
 8008838:	2b08      	cmp	r3, #8
 800883a:	f103 0301 	add.w	r3, r3, #1
 800883e:	dc03      	bgt.n	8008848 <_strtod_l+0x260>
 8008840:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008842:	434f      	muls	r7, r1
 8008844:	9709      	str	r7, [sp, #36]	; 0x24
 8008846:	e7e1      	b.n	800880c <_strtod_l+0x224>
 8008848:	2b10      	cmp	r3, #16
 800884a:	bfd8      	it	le
 800884c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008850:	e7dc      	b.n	800880c <_strtod_l+0x224>
 8008852:	2e10      	cmp	r6, #16
 8008854:	bfdc      	itt	le
 8008856:	230a      	movle	r3, #10
 8008858:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800885c:	e7e3      	b.n	8008826 <_strtod_l+0x23e>
 800885e:	2300      	movs	r3, #0
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	2301      	movs	r3, #1
 8008864:	e780      	b.n	8008768 <_strtod_l+0x180>
 8008866:	f04f 0c00 	mov.w	ip, #0
 800886a:	1caa      	adds	r2, r5, #2
 800886c:	9215      	str	r2, [sp, #84]	; 0x54
 800886e:	78aa      	ldrb	r2, [r5, #2]
 8008870:	e788      	b.n	8008784 <_strtod_l+0x19c>
 8008872:	f04f 0c01 	mov.w	ip, #1
 8008876:	e7f8      	b.n	800886a <_strtod_l+0x282>
 8008878:	0800a748 	.word	0x0800a748
 800887c:	0800a744 	.word	0x0800a744
 8008880:	7ff00000 	.word	0x7ff00000
 8008884:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008886:	1c51      	adds	r1, r2, #1
 8008888:	9115      	str	r1, [sp, #84]	; 0x54
 800888a:	7852      	ldrb	r2, [r2, #1]
 800888c:	2a30      	cmp	r2, #48	; 0x30
 800888e:	d0f9      	beq.n	8008884 <_strtod_l+0x29c>
 8008890:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008894:	2908      	cmp	r1, #8
 8008896:	f63f af7a 	bhi.w	800878e <_strtod_l+0x1a6>
 800889a:	3a30      	subs	r2, #48	; 0x30
 800889c:	9208      	str	r2, [sp, #32]
 800889e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088a0:	920c      	str	r2, [sp, #48]	; 0x30
 80088a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088a4:	1c57      	adds	r7, r2, #1
 80088a6:	9715      	str	r7, [sp, #84]	; 0x54
 80088a8:	7852      	ldrb	r2, [r2, #1]
 80088aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088ae:	f1be 0f09 	cmp.w	lr, #9
 80088b2:	d938      	bls.n	8008926 <_strtod_l+0x33e>
 80088b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088b6:	1a7f      	subs	r7, r7, r1
 80088b8:	2f08      	cmp	r7, #8
 80088ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80088be:	dc03      	bgt.n	80088c8 <_strtod_l+0x2e0>
 80088c0:	9908      	ldr	r1, [sp, #32]
 80088c2:	428f      	cmp	r7, r1
 80088c4:	bfa8      	it	ge
 80088c6:	460f      	movge	r7, r1
 80088c8:	f1bc 0f00 	cmp.w	ip, #0
 80088cc:	d000      	beq.n	80088d0 <_strtod_l+0x2e8>
 80088ce:	427f      	negs	r7, r7
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d14f      	bne.n	8008974 <_strtod_l+0x38c>
 80088d4:	9904      	ldr	r1, [sp, #16]
 80088d6:	4301      	orrs	r1, r0
 80088d8:	f47f aec1 	bne.w	800865e <_strtod_l+0x76>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f aedb 	bne.w	8008698 <_strtod_l+0xb0>
 80088e2:	2a69      	cmp	r2, #105	; 0x69
 80088e4:	d029      	beq.n	800893a <_strtod_l+0x352>
 80088e6:	dc26      	bgt.n	8008936 <_strtod_l+0x34e>
 80088e8:	2a49      	cmp	r2, #73	; 0x49
 80088ea:	d026      	beq.n	800893a <_strtod_l+0x352>
 80088ec:	2a4e      	cmp	r2, #78	; 0x4e
 80088ee:	f47f aed3 	bne.w	8008698 <_strtod_l+0xb0>
 80088f2:	499b      	ldr	r1, [pc, #620]	; (8008b60 <_strtod_l+0x578>)
 80088f4:	a815      	add	r0, sp, #84	; 0x54
 80088f6:	f001 fc83 	bl	800a200 <__match>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f aecc 	beq.w	8008698 <_strtod_l+0xb0>
 8008900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b28      	cmp	r3, #40	; 0x28
 8008906:	d12f      	bne.n	8008968 <_strtod_l+0x380>
 8008908:	4996      	ldr	r1, [pc, #600]	; (8008b64 <_strtod_l+0x57c>)
 800890a:	aa18      	add	r2, sp, #96	; 0x60
 800890c:	a815      	add	r0, sp, #84	; 0x54
 800890e:	f001 fc8b 	bl	800a228 <__hexnan>
 8008912:	2805      	cmp	r0, #5
 8008914:	d128      	bne.n	8008968 <_strtod_l+0x380>
 8008916:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800891c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008920:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008924:	e69b      	b.n	800865e <_strtod_l+0x76>
 8008926:	9f08      	ldr	r7, [sp, #32]
 8008928:	210a      	movs	r1, #10
 800892a:	fb01 2107 	mla	r1, r1, r7, r2
 800892e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008932:	9208      	str	r2, [sp, #32]
 8008934:	e7b5      	b.n	80088a2 <_strtod_l+0x2ba>
 8008936:	2a6e      	cmp	r2, #110	; 0x6e
 8008938:	e7d9      	b.n	80088ee <_strtod_l+0x306>
 800893a:	498b      	ldr	r1, [pc, #556]	; (8008b68 <_strtod_l+0x580>)
 800893c:	a815      	add	r0, sp, #84	; 0x54
 800893e:	f001 fc5f 	bl	800a200 <__match>
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f aea8 	beq.w	8008698 <_strtod_l+0xb0>
 8008948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800894a:	4988      	ldr	r1, [pc, #544]	; (8008b6c <_strtod_l+0x584>)
 800894c:	3b01      	subs	r3, #1
 800894e:	a815      	add	r0, sp, #84	; 0x54
 8008950:	9315      	str	r3, [sp, #84]	; 0x54
 8008952:	f001 fc55 	bl	800a200 <__match>
 8008956:	b910      	cbnz	r0, 800895e <_strtod_l+0x376>
 8008958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800895a:	3301      	adds	r3, #1
 800895c:	9315      	str	r3, [sp, #84]	; 0x54
 800895e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008b7c <_strtod_l+0x594>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	e67a      	b.n	800865e <_strtod_l+0x76>
 8008968:	4881      	ldr	r0, [pc, #516]	; (8008b70 <_strtod_l+0x588>)
 800896a:	f001 f965 	bl	8009c38 <nan>
 800896e:	ec59 8b10 	vmov	r8, r9, d0
 8008972:	e674      	b.n	800865e <_strtod_l+0x76>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008978:	1afb      	subs	r3, r7, r3
 800897a:	f1bb 0f00 	cmp.w	fp, #0
 800897e:	bf08      	it	eq
 8008980:	46b3      	moveq	fp, r6
 8008982:	2e10      	cmp	r6, #16
 8008984:	9308      	str	r3, [sp, #32]
 8008986:	4635      	mov	r5, r6
 8008988:	bfa8      	it	ge
 800898a:	2510      	movge	r5, #16
 800898c:	f7f7 fdca 	bl	8000524 <__aeabi_ui2d>
 8008990:	2e09      	cmp	r6, #9
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	dd13      	ble.n	80089c0 <_strtod_l+0x3d8>
 8008998:	4b76      	ldr	r3, [pc, #472]	; (8008b74 <_strtod_l+0x58c>)
 800899a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800899e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089a2:	f7f7 fe39 	bl	8000618 <__aeabi_dmul>
 80089a6:	4680      	mov	r8, r0
 80089a8:	4650      	mov	r0, sl
 80089aa:	4689      	mov	r9, r1
 80089ac:	f7f7 fdba 	bl	8000524 <__aeabi_ui2d>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f7 fc78 	bl	80002ac <__adddf3>
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	2e0f      	cmp	r6, #15
 80089c2:	dc38      	bgt.n	8008a36 <_strtod_l+0x44e>
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f43f ae49 	beq.w	800865e <_strtod_l+0x76>
 80089cc:	dd24      	ble.n	8008a18 <_strtod_l+0x430>
 80089ce:	2b16      	cmp	r3, #22
 80089d0:	dc0b      	bgt.n	80089ea <_strtod_l+0x402>
 80089d2:	4968      	ldr	r1, [pc, #416]	; (8008b74 <_strtod_l+0x58c>)
 80089d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	f7f7 fe1a 	bl	8000618 <__aeabi_dmul>
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	e639      	b.n	800865e <_strtod_l+0x76>
 80089ea:	9a08      	ldr	r2, [sp, #32]
 80089ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80089f0:	4293      	cmp	r3, r2
 80089f2:	db20      	blt.n	8008a36 <_strtod_l+0x44e>
 80089f4:	4c5f      	ldr	r4, [pc, #380]	; (8008b74 <_strtod_l+0x58c>)
 80089f6:	f1c6 060f 	rsb	r6, r6, #15
 80089fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	1b9e      	subs	r6, r3, r6
 8008a0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008a12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a16:	e7e3      	b.n	80089e0 <_strtod_l+0x3f8>
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	3316      	adds	r3, #22
 8008a1c:	db0b      	blt.n	8008a36 <_strtod_l+0x44e>
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	1bdf      	subs	r7, r3, r7
 8008a22:	4b54      	ldr	r3, [pc, #336]	; (8008b74 <_strtod_l+0x58c>)
 8008a24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	4649      	mov	r1, r9
 8008a30:	f7f7 ff1c 	bl	800086c <__aeabi_ddiv>
 8008a34:	e7d6      	b.n	80089e4 <_strtod_l+0x3fc>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	1b75      	subs	r5, r6, r5
 8008a3a:	441d      	add	r5, r3
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	dd70      	ble.n	8008b22 <_strtod_l+0x53a>
 8008a40:	f015 030f 	ands.w	r3, r5, #15
 8008a44:	d00a      	beq.n	8008a5c <_strtod_l+0x474>
 8008a46:	494b      	ldr	r1, [pc, #300]	; (8008b74 <_strtod_l+0x58c>)
 8008a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a54:	f7f7 fde0 	bl	8000618 <__aeabi_dmul>
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	f035 050f 	bics.w	r5, r5, #15
 8008a60:	d04d      	beq.n	8008afe <_strtod_l+0x516>
 8008a62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008a66:	dd22      	ble.n	8008aae <_strtod_l+0x4c6>
 8008a68:	2500      	movs	r5, #0
 8008a6a:	46ab      	mov	fp, r5
 8008a6c:	9509      	str	r5, [sp, #36]	; 0x24
 8008a6e:	9505      	str	r5, [sp, #20]
 8008a70:	2322      	movs	r3, #34	; 0x22
 8008a72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008b7c <_strtod_l+0x594>
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	f04f 0800 	mov.w	r8, #0
 8008a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f43f aded 	beq.w	800865e <_strtod_l+0x76>
 8008a84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff f924 	bl	8007cd4 <_Bfree>
 8008a8c:	9905      	ldr	r1, [sp, #20]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff f920 	bl	8007cd4 <_Bfree>
 8008a94:	4659      	mov	r1, fp
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff f91c 	bl	8007cd4 <_Bfree>
 8008a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff f918 	bl	8007cd4 <_Bfree>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff f914 	bl	8007cd4 <_Bfree>
 8008aac:	e5d7      	b.n	800865e <_strtod_l+0x76>
 8008aae:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <_strtod_l+0x590>)
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	112d      	asrs	r5, r5, #4
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	469a      	mov	sl, r3
 8008abc:	2d01      	cmp	r5, #1
 8008abe:	dc21      	bgt.n	8008b04 <_strtod_l+0x51c>
 8008ac0:	b10b      	cbz	r3, 8008ac6 <_strtod_l+0x4de>
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	492c      	ldr	r1, [pc, #176]	; (8008b78 <_strtod_l+0x590>)
 8008ac8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008acc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad8:	f7f7 fd9e 	bl	8000618 <__aeabi_dmul>
 8008adc:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <_strtod_l+0x594>)
 8008ade:	460a      	mov	r2, r1
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	4927      	ldr	r1, [pc, #156]	; (8008b80 <_strtod_l+0x598>)
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	d8be      	bhi.n	8008a68 <_strtod_l+0x480>
 8008aea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008aee:	428b      	cmp	r3, r1
 8008af0:	bf86      	itte	hi
 8008af2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008b84 <_strtod_l+0x59c>
 8008af6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008afa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008afe:	2300      	movs	r3, #0
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	e07b      	b.n	8008bfc <_strtod_l+0x614>
 8008b04:	07ea      	lsls	r2, r5, #31
 8008b06:	d505      	bpl.n	8008b14 <_strtod_l+0x52c>
 8008b08:	9b04      	ldr	r3, [sp, #16]
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fd83 	bl	8000618 <__aeabi_dmul>
 8008b12:	2301      	movs	r3, #1
 8008b14:	9a04      	ldr	r2, [sp, #16]
 8008b16:	3208      	adds	r2, #8
 8008b18:	f10a 0a01 	add.w	sl, sl, #1
 8008b1c:	106d      	asrs	r5, r5, #1
 8008b1e:	9204      	str	r2, [sp, #16]
 8008b20:	e7cc      	b.n	8008abc <_strtod_l+0x4d4>
 8008b22:	d0ec      	beq.n	8008afe <_strtod_l+0x516>
 8008b24:	426d      	negs	r5, r5
 8008b26:	f015 020f 	ands.w	r2, r5, #15
 8008b2a:	d00a      	beq.n	8008b42 <_strtod_l+0x55a>
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <_strtod_l+0x58c>)
 8008b2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fe97 	bl	800086c <__aeabi_ddiv>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	112d      	asrs	r5, r5, #4
 8008b44:	d0db      	beq.n	8008afe <_strtod_l+0x516>
 8008b46:	2d1f      	cmp	r5, #31
 8008b48:	dd1e      	ble.n	8008b88 <_strtod_l+0x5a0>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	46ab      	mov	fp, r5
 8008b4e:	9509      	str	r5, [sp, #36]	; 0x24
 8008b50:	9505      	str	r5, [sp, #20]
 8008b52:	2322      	movs	r3, #34	; 0x22
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	f04f 0900 	mov.w	r9, #0
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	e78d      	b.n	8008a7c <_strtod_l+0x494>
 8008b60:	0800a535 	.word	0x0800a535
 8008b64:	0800a75c 	.word	0x0800a75c
 8008b68:	0800a52d 	.word	0x0800a52d
 8008b6c:	0800a564 	.word	0x0800a564
 8008b70:	0800a8ed 	.word	0x0800a8ed
 8008b74:	0800a670 	.word	0x0800a670
 8008b78:	0800a648 	.word	0x0800a648
 8008b7c:	7ff00000 	.word	0x7ff00000
 8008b80:	7ca00000 	.word	0x7ca00000
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	f015 0310 	ands.w	r3, r5, #16
 8008b8c:	bf18      	it	ne
 8008b8e:	236a      	movne	r3, #106	; 0x6a
 8008b90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008f34 <_strtod_l+0x94c>
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	4640      	mov	r0, r8
 8008b98:	4649      	mov	r1, r9
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	07ea      	lsls	r2, r5, #31
 8008b9e:	d504      	bpl.n	8008baa <_strtod_l+0x5c2>
 8008ba0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ba4:	f7f7 fd38 	bl	8000618 <__aeabi_dmul>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	106d      	asrs	r5, r5, #1
 8008bac:	f10a 0a08 	add.w	sl, sl, #8
 8008bb0:	d1f4      	bne.n	8008b9c <_strtod_l+0x5b4>
 8008bb2:	b10b      	cbz	r3, 8008bb8 <_strtod_l+0x5d0>
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	b1bb      	cbz	r3, 8008bec <_strtod_l+0x604>
 8008bbc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008bc0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	dd10      	ble.n	8008bec <_strtod_l+0x604>
 8008bca:	2b1f      	cmp	r3, #31
 8008bcc:	f340 811e 	ble.w	8008e0c <_strtod_l+0x824>
 8008bd0:	2b34      	cmp	r3, #52	; 0x34
 8008bd2:	bfde      	ittt	le
 8008bd4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008bd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008bdc:	4093      	lslle	r3, r2
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	bfcc      	ite	gt
 8008be4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008be8:	ea03 0901 	andle.w	r9, r3, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1a6      	bne.n	8008b4a <_strtod_l+0x562>
 8008bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c02:	4633      	mov	r3, r6
 8008c04:	465a      	mov	r2, fp
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff f8cc 	bl	8007da4 <__s2b>
 8008c0c:	9009      	str	r0, [sp, #36]	; 0x24
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f af2a 	beq.w	8008a68 <_strtod_l+0x480>
 8008c14:	9a08      	ldr	r2, [sp, #32]
 8008c16:	9b05      	ldr	r3, [sp, #20]
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	eba3 0307 	sub.w	r3, r3, r7
 8008c1e:	bfa8      	it	ge
 8008c20:	2300      	movge	r3, #0
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	2500      	movs	r5, #0
 8008c26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c2c:	46ab      	mov	fp, r5
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	4620      	mov	r0, r4
 8008c32:	6859      	ldr	r1, [r3, #4]
 8008c34:	f7ff f80e 	bl	8007c54 <_Balloc>
 8008c38:	9005      	str	r0, [sp, #20]
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f43f af18 	beq.w	8008a70 <_strtod_l+0x488>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	3202      	adds	r2, #2
 8008c46:	f103 010c 	add.w	r1, r3, #12
 8008c4a:	0092      	lsls	r2, r2, #2
 8008c4c:	300c      	adds	r0, #12
 8008c4e:	f000 ffe5 	bl	8009c1c <memcpy>
 8008c52:	ec49 8b10 	vmov	d0, r8, r9
 8008c56:	aa18      	add	r2, sp, #96	; 0x60
 8008c58:	a917      	add	r1, sp, #92	; 0x5c
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7ff fbd6 	bl	800840c <__d2b>
 8008c60:	ec49 8b18 	vmov	d8, r8, r9
 8008c64:	9016      	str	r0, [sp, #88]	; 0x58
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f43f af02 	beq.w	8008a70 <_strtod_l+0x488>
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff f930 	bl	8007ed4 <__i2b>
 8008c74:	4683      	mov	fp, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f aefa 	beq.w	8008a70 <_strtod_l+0x488>
 8008c7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	bfab      	itete	ge
 8008c84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008c86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008c88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008c8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008c8e:	bfac      	ite	ge
 8008c90:	eb06 0a03 	addge.w	sl, r6, r3
 8008c94:	1b9f      	sublt	r7, r3, r6
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	1af6      	subs	r6, r6, r3
 8008c9a:	4416      	add	r6, r2
 8008c9c:	4ba0      	ldr	r3, [pc, #640]	; (8008f20 <_strtod_l+0x938>)
 8008c9e:	3e01      	subs	r6, #1
 8008ca0:	429e      	cmp	r6, r3
 8008ca2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ca6:	f280 80c4 	bge.w	8008e32 <_strtod_l+0x84a>
 8008caa:	1b9b      	subs	r3, r3, r6
 8008cac:	2b1f      	cmp	r3, #31
 8008cae:	eba2 0203 	sub.w	r2, r2, r3
 8008cb2:	f04f 0101 	mov.w	r1, #1
 8008cb6:	f300 80b0 	bgt.w	8008e1a <_strtod_l+0x832>
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc4:	eb0a 0602 	add.w	r6, sl, r2
 8008cc8:	9b04      	ldr	r3, [sp, #16]
 8008cca:	45b2      	cmp	sl, r6
 8008ccc:	4417      	add	r7, r2
 8008cce:	441f      	add	r7, r3
 8008cd0:	4653      	mov	r3, sl
 8008cd2:	bfa8      	it	ge
 8008cd4:	4633      	movge	r3, r6
 8008cd6:	42bb      	cmp	r3, r7
 8008cd8:	bfa8      	it	ge
 8008cda:	463b      	movge	r3, r7
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfc2      	ittt	gt
 8008ce0:	1af6      	subgt	r6, r6, r3
 8008ce2:	1aff      	subgt	r7, r7, r3
 8008ce4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd17      	ble.n	8008d1e <_strtod_l+0x736>
 8008cee:	4659      	mov	r1, fp
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7ff f9ae 	bl	8008054 <__pow5mult>
 8008cf8:	4683      	mov	fp, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f aeb8 	beq.w	8008a70 <_strtod_l+0x488>
 8008d00:	4601      	mov	r1, r0
 8008d02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7ff f8fb 	bl	8007f00 <__multiply>
 8008d0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f43f aeaf 	beq.w	8008a70 <_strtod_l+0x488>
 8008d12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7fe ffdd 	bl	8007cd4 <_Bfree>
 8008d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1c:	9316      	str	r3, [sp, #88]	; 0x58
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	f300 808c 	bgt.w	8008e3c <_strtod_l+0x854>
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd08      	ble.n	8008d3c <_strtod_l+0x754>
 8008d2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d2c:	9905      	ldr	r1, [sp, #20]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff f990 	bl	8008054 <__pow5mult>
 8008d34:	9005      	str	r0, [sp, #20]
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f ae9a 	beq.w	8008a70 <_strtod_l+0x488>
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	dd08      	ble.n	8008d52 <_strtod_l+0x76a>
 8008d40:	9905      	ldr	r1, [sp, #20]
 8008d42:	463a      	mov	r2, r7
 8008d44:	4620      	mov	r0, r4
 8008d46:	f7ff f9df 	bl	8008108 <__lshift>
 8008d4a:	9005      	str	r0, [sp, #20]
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f ae8f 	beq.w	8008a70 <_strtod_l+0x488>
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	dd08      	ble.n	8008d6a <_strtod_l+0x782>
 8008d58:	4659      	mov	r1, fp
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff f9d3 	bl	8008108 <__lshift>
 8008d62:	4683      	mov	fp, r0
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f ae83 	beq.w	8008a70 <_strtod_l+0x488>
 8008d6a:	9a05      	ldr	r2, [sp, #20]
 8008d6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff fa52 	bl	8008218 <__mdiff>
 8008d74:	4605      	mov	r5, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f ae7a 	beq.w	8008a70 <_strtod_l+0x488>
 8008d7c:	68c3      	ldr	r3, [r0, #12]
 8008d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d80:	2300      	movs	r3, #0
 8008d82:	60c3      	str	r3, [r0, #12]
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7ff fa2b 	bl	80081e0 <__mcmp>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	da60      	bge.n	8008e50 <_strtod_l+0x868>
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d90:	ea53 0308 	orrs.w	r3, r3, r8
 8008d94:	f040 8084 	bne.w	8008ea0 <_strtod_l+0x8b8>
 8008d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d17f      	bne.n	8008ea0 <_strtod_l+0x8b8>
 8008da0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008da4:	0d1b      	lsrs	r3, r3, #20
 8008da6:	051b      	lsls	r3, r3, #20
 8008da8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dac:	d978      	bls.n	8008ea0 <_strtod_l+0x8b8>
 8008dae:	696b      	ldr	r3, [r5, #20]
 8008db0:	b913      	cbnz	r3, 8008db8 <_strtod_l+0x7d0>
 8008db2:	692b      	ldr	r3, [r5, #16]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	dd73      	ble.n	8008ea0 <_strtod_l+0x8b8>
 8008db8:	4629      	mov	r1, r5
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff f9a3 	bl	8008108 <__lshift>
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	f7ff fa0b 	bl	80081e0 <__mcmp>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dd68      	ble.n	8008ea0 <_strtod_l+0x8b8>
 8008dce:	9904      	ldr	r1, [sp, #16]
 8008dd0:	4a54      	ldr	r2, [pc, #336]	; (8008f24 <_strtod_l+0x93c>)
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	f000 8084 	beq.w	8008ee2 <_strtod_l+0x8fa>
 8008dda:	ea02 0109 	and.w	r1, r2, r9
 8008dde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008de2:	dc7e      	bgt.n	8008ee2 <_strtod_l+0x8fa>
 8008de4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008de8:	f77f aeb3 	ble.w	8008b52 <_strtod_l+0x56a>
 8008dec:	4b4e      	ldr	r3, [pc, #312]	; (8008f28 <_strtod_l+0x940>)
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	2200      	movs	r2, #0
 8008df4:	f7f7 fc10 	bl	8000618 <__aeabi_dmul>
 8008df8:	4b4a      	ldr	r3, [pc, #296]	; (8008f24 <_strtod_l+0x93c>)
 8008dfa:	400b      	ands	r3, r1
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f47f ae3f 	bne.w	8008a84 <_strtod_l+0x49c>
 8008e06:	2322      	movs	r3, #34	; 0x22
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	e63b      	b.n	8008a84 <_strtod_l+0x49c>
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	ea03 0808 	and.w	r8, r3, r8
 8008e18:	e6e8      	b.n	8008bec <_strtod_l+0x604>
 8008e1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008e1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008e22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008e26:	36e2      	adds	r6, #226	; 0xe2
 8008e28:	fa01 f306 	lsl.w	r3, r1, r6
 8008e2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008e30:	e748      	b.n	8008cc4 <_strtod_l+0x6dc>
 8008e32:	2100      	movs	r1, #0
 8008e34:	2301      	movs	r3, #1
 8008e36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008e3a:	e743      	b.n	8008cc4 <_strtod_l+0x6dc>
 8008e3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e3e:	4632      	mov	r2, r6
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff f961 	bl	8008108 <__lshift>
 8008e46:	9016      	str	r0, [sp, #88]	; 0x58
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f47f af6b 	bne.w	8008d24 <_strtod_l+0x73c>
 8008e4e:	e60f      	b.n	8008a70 <_strtod_l+0x488>
 8008e50:	46ca      	mov	sl, r9
 8008e52:	d171      	bne.n	8008f38 <_strtod_l+0x950>
 8008e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e5a:	b352      	cbz	r2, 8008eb2 <_strtod_l+0x8ca>
 8008e5c:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <_strtod_l+0x944>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d12a      	bne.n	8008eb8 <_strtod_l+0x8d0>
 8008e62:	9b04      	ldr	r3, [sp, #16]
 8008e64:	4641      	mov	r1, r8
 8008e66:	b1fb      	cbz	r3, 8008ea8 <_strtod_l+0x8c0>
 8008e68:	4b2e      	ldr	r3, [pc, #184]	; (8008f24 <_strtod_l+0x93c>)
 8008e6a:	ea09 0303 	and.w	r3, r9, r3
 8008e6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e76:	d81a      	bhi.n	8008eae <_strtod_l+0x8c6>
 8008e78:	0d1b      	lsrs	r3, r3, #20
 8008e7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d118      	bne.n	8008eb8 <_strtod_l+0x8d0>
 8008e86:	4b2a      	ldr	r3, [pc, #168]	; (8008f30 <_strtod_l+0x948>)
 8008e88:	459a      	cmp	sl, r3
 8008e8a:	d102      	bne.n	8008e92 <_strtod_l+0x8aa>
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	f43f adef 	beq.w	8008a70 <_strtod_l+0x488>
 8008e92:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <_strtod_l+0x93c>)
 8008e94:	ea0a 0303 	and.w	r3, sl, r3
 8008e98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1a2      	bne.n	8008dec <_strtod_l+0x804>
 8008ea6:	e5ed      	b.n	8008a84 <_strtod_l+0x49c>
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	e7e9      	b.n	8008e82 <_strtod_l+0x89a>
 8008eae:	4613      	mov	r3, r2
 8008eb0:	e7e7      	b.n	8008e82 <_strtod_l+0x89a>
 8008eb2:	ea53 0308 	orrs.w	r3, r3, r8
 8008eb6:	d08a      	beq.n	8008dce <_strtod_l+0x7e6>
 8008eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eba:	b1e3      	cbz	r3, 8008ef6 <_strtod_l+0x90e>
 8008ebc:	ea13 0f0a 	tst.w	r3, sl
 8008ec0:	d0ee      	beq.n	8008ea0 <_strtod_l+0x8b8>
 8008ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4649      	mov	r1, r9
 8008eca:	b1c3      	cbz	r3, 8008efe <_strtod_l+0x916>
 8008ecc:	f7ff fb6f 	bl	80085ae <sulp>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	ec51 0b18 	vmov	r0, r1, d8
 8008ed8:	f7f7 f9e8 	bl	80002ac <__adddf3>
 8008edc:	4680      	mov	r8, r0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	e7de      	b.n	8008ea0 <_strtod_l+0x8b8>
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ee8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008eec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ef0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008ef4:	e7d4      	b.n	8008ea0 <_strtod_l+0x8b8>
 8008ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef8:	ea13 0f08 	tst.w	r3, r8
 8008efc:	e7e0      	b.n	8008ec0 <_strtod_l+0x8d8>
 8008efe:	f7ff fb56 	bl	80085ae <sulp>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	ec51 0b18 	vmov	r0, r1, d8
 8008f0a:	f7f7 f9cd 	bl	80002a8 <__aeabi_dsub>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2300      	movs	r3, #0
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	f7f7 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0c0      	beq.n	8008ea0 <_strtod_l+0x8b8>
 8008f1e:	e618      	b.n	8008b52 <_strtod_l+0x56a>
 8008f20:	fffffc02 	.word	0xfffffc02
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	39500000 	.word	0x39500000
 8008f2c:	000fffff 	.word	0x000fffff
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	0800a770 	.word	0x0800a770
 8008f38:	4659      	mov	r1, fp
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f7ff fac0 	bl	80084c0 <__ratio>
 8008f40:	ec57 6b10 	vmov	r6, r7, d0
 8008f44:	ee10 0a10 	vmov	r0, s0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fdde 	bl	8000b10 <__aeabi_dcmple>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d071      	beq.n	800903c <_strtod_l+0xa54>
 8008f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d17c      	bne.n	8009058 <_strtod_l+0xa70>
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	d15a      	bne.n	800901a <_strtod_l+0xa32>
 8008f64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d15d      	bne.n	8009028 <_strtod_l+0xa40>
 8008f6c:	4b90      	ldr	r3, [pc, #576]	; (80091b0 <_strtod_l+0xbc8>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4630      	mov	r0, r6
 8008f72:	4639      	mov	r1, r7
 8008f74:	f7f7 fdc2 	bl	8000afc <__aeabi_dcmplt>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d15c      	bne.n	8009036 <_strtod_l+0xa4e>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4b8c      	ldr	r3, [pc, #560]	; (80091b4 <_strtod_l+0xbcc>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	f7f7 fb48 	bl	8000618 <__aeabi_dmul>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008f90:	9606      	str	r6, [sp, #24]
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008f9c:	4b86      	ldr	r3, [pc, #536]	; (80091b8 <_strtod_l+0xbd0>)
 8008f9e:	ea0a 0303 	and.w	r3, sl, r3
 8008fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fa6:	4b85      	ldr	r3, [pc, #532]	; (80091bc <_strtod_l+0xbd4>)
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f040 8090 	bne.w	80090ce <_strtod_l+0xae6>
 8008fae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008fb2:	ec49 8b10 	vmov	d0, r8, r9
 8008fb6:	f7ff f9b9 	bl	800832c <__ulp>
 8008fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fbe:	ec51 0b10 	vmov	r0, r1, d0
 8008fc2:	f7f7 fb29 	bl	8000618 <__aeabi_dmul>
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	f7f7 f96f 	bl	80002ac <__adddf3>
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4979      	ldr	r1, [pc, #484]	; (80091b8 <_strtod_l+0xbd0>)
 8008fd2:	4a7b      	ldr	r2, [pc, #492]	; (80091c0 <_strtod_l+0xbd8>)
 8008fd4:	4019      	ands	r1, r3
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	4680      	mov	r8, r0
 8008fda:	d944      	bls.n	8009066 <_strtod_l+0xa7e>
 8008fdc:	ee18 2a90 	vmov	r2, s17
 8008fe0:	4b78      	ldr	r3, [pc, #480]	; (80091c4 <_strtod_l+0xbdc>)
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d104      	bne.n	8008ff0 <_strtod_l+0xa08>
 8008fe6:	ee18 3a10 	vmov	r3, s16
 8008fea:	3301      	adds	r3, #1
 8008fec:	f43f ad40 	beq.w	8008a70 <_strtod_l+0x488>
 8008ff0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80091c4 <_strtod_l+0xbdc>
 8008ff4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008ff8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7fe fe6a 	bl	8007cd4 <_Bfree>
 8009000:	9905      	ldr	r1, [sp, #20]
 8009002:	4620      	mov	r0, r4
 8009004:	f7fe fe66 	bl	8007cd4 <_Bfree>
 8009008:	4659      	mov	r1, fp
 800900a:	4620      	mov	r0, r4
 800900c:	f7fe fe62 	bl	8007cd4 <_Bfree>
 8009010:	4629      	mov	r1, r5
 8009012:	4620      	mov	r0, r4
 8009014:	f7fe fe5e 	bl	8007cd4 <_Bfree>
 8009018:	e609      	b.n	8008c2e <_strtod_l+0x646>
 800901a:	f1b8 0f01 	cmp.w	r8, #1
 800901e:	d103      	bne.n	8009028 <_strtod_l+0xa40>
 8009020:	f1b9 0f00 	cmp.w	r9, #0
 8009024:	f43f ad95 	beq.w	8008b52 <_strtod_l+0x56a>
 8009028:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009180 <_strtod_l+0xb98>
 800902c:	4f60      	ldr	r7, [pc, #384]	; (80091b0 <_strtod_l+0xbc8>)
 800902e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009032:	2600      	movs	r6, #0
 8009034:	e7ae      	b.n	8008f94 <_strtod_l+0x9ac>
 8009036:	4f5f      	ldr	r7, [pc, #380]	; (80091b4 <_strtod_l+0xbcc>)
 8009038:	2600      	movs	r6, #0
 800903a:	e7a7      	b.n	8008f8c <_strtod_l+0x9a4>
 800903c:	4b5d      	ldr	r3, [pc, #372]	; (80091b4 <_strtod_l+0xbcc>)
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 fae8 	bl	8000618 <__aeabi_dmul>
 8009048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d09c      	beq.n	8008f8c <_strtod_l+0x9a4>
 8009052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009056:	e79d      	b.n	8008f94 <_strtod_l+0x9ac>
 8009058:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009188 <_strtod_l+0xba0>
 800905c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009060:	ec57 6b17 	vmov	r6, r7, d7
 8009064:	e796      	b.n	8008f94 <_strtod_l+0x9ac>
 8009066:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	46ca      	mov	sl, r9
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1c2      	bne.n	8008ff8 <_strtod_l+0xa10>
 8009072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009078:	0d1b      	lsrs	r3, r3, #20
 800907a:	051b      	lsls	r3, r3, #20
 800907c:	429a      	cmp	r2, r3
 800907e:	d1bb      	bne.n	8008ff8 <_strtod_l+0xa10>
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fe28 	bl	8000cd8 <__aeabi_d2lz>
 8009088:	f7f7 fa98 	bl	80005bc <__aeabi_l2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 f908 	bl	80002a8 <__aeabi_dsub>
 8009098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800909e:	ea43 0308 	orr.w	r3, r3, r8
 80090a2:	4313      	orrs	r3, r2
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	d054      	beq.n	8009154 <_strtod_l+0xb6c>
 80090aa:	a339      	add	r3, pc, #228	; (adr r3, 8009190 <_strtod_l+0xba8>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 fd24 	bl	8000afc <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f47f ace5 	bne.w	8008a84 <_strtod_l+0x49c>
 80090ba:	a337      	add	r3, pc, #220	; (adr r3, 8009198 <_strtod_l+0xbb0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d095      	beq.n	8008ff8 <_strtod_l+0xa10>
 80090cc:	e4da      	b.n	8008a84 <_strtod_l+0x49c>
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	b333      	cbz	r3, 8009120 <_strtod_l+0xb38>
 80090d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090d8:	d822      	bhi.n	8009120 <_strtod_l+0xb38>
 80090da:	a331      	add	r3, pc, #196	; (adr r3, 80091a0 <_strtod_l+0xbb8>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fd14 	bl	8000b10 <__aeabi_dcmple>
 80090e8:	b1a0      	cbz	r0, 8009114 <_strtod_l+0xb2c>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7f7 fd6b 	bl	8000bc8 <__aeabi_d2uiz>
 80090f2:	2801      	cmp	r0, #1
 80090f4:	bf38      	it	cc
 80090f6:	2001      	movcc	r0, #1
 80090f8:	f7f7 fa14 	bl	8000524 <__aeabi_ui2d>
 80090fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	bb23      	cbnz	r3, 800914e <_strtod_l+0xb66>
 8009104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009108:	9010      	str	r0, [sp, #64]	; 0x40
 800910a:	9311      	str	r3, [sp, #68]	; 0x44
 800910c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009110:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009118:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009120:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009124:	eeb0 0a48 	vmov.f32	s0, s16
 8009128:	eef0 0a68 	vmov.f32	s1, s17
 800912c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009130:	f7ff f8fc 	bl	800832c <__ulp>
 8009134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009138:	ec53 2b10 	vmov	r2, r3, d0
 800913c:	f7f7 fa6c 	bl	8000618 <__aeabi_dmul>
 8009140:	ec53 2b18 	vmov	r2, r3, d8
 8009144:	f7f7 f8b2 	bl	80002ac <__adddf3>
 8009148:	4680      	mov	r8, r0
 800914a:	4689      	mov	r9, r1
 800914c:	e78d      	b.n	800906a <_strtod_l+0xa82>
 800914e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009152:	e7db      	b.n	800910c <_strtod_l+0xb24>
 8009154:	a314      	add	r3, pc, #80	; (adr r3, 80091a8 <_strtod_l+0xbc0>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 fccf 	bl	8000afc <__aeabi_dcmplt>
 800915e:	e7b3      	b.n	80090c8 <_strtod_l+0xae0>
 8009160:	2300      	movs	r3, #0
 8009162:	930a      	str	r3, [sp, #40]	; 0x28
 8009164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	f7ff ba7c 	b.w	8008666 <_strtod_l+0x7e>
 800916e:	2a65      	cmp	r2, #101	; 0x65
 8009170:	f43f ab75 	beq.w	800885e <_strtod_l+0x276>
 8009174:	2a45      	cmp	r2, #69	; 0x45
 8009176:	f43f ab72 	beq.w	800885e <_strtod_l+0x276>
 800917a:	2301      	movs	r3, #1
 800917c:	f7ff bbaa 	b.w	80088d4 <_strtod_l+0x2ec>
 8009180:	00000000 	.word	0x00000000
 8009184:	bff00000 	.word	0xbff00000
 8009188:	00000000 	.word	0x00000000
 800918c:	3ff00000 	.word	0x3ff00000
 8009190:	94a03595 	.word	0x94a03595
 8009194:	3fdfffff 	.word	0x3fdfffff
 8009198:	35afe535 	.word	0x35afe535
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	ffc00000 	.word	0xffc00000
 80091a4:	41dfffff 	.word	0x41dfffff
 80091a8:	94a03595 	.word	0x94a03595
 80091ac:	3fcfffff 	.word	0x3fcfffff
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	3fe00000 	.word	0x3fe00000
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	7fe00000 	.word	0x7fe00000
 80091c0:	7c9fffff 	.word	0x7c9fffff
 80091c4:	7fefffff 	.word	0x7fefffff

080091c8 <_strtod_r>:
 80091c8:	4b01      	ldr	r3, [pc, #4]	; (80091d0 <_strtod_r+0x8>)
 80091ca:	f7ff ba0d 	b.w	80085e8 <_strtod_l>
 80091ce:	bf00      	nop
 80091d0:	20000068 	.word	0x20000068

080091d4 <_strtol_l.constprop.0>:
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091da:	d001      	beq.n	80091e0 <_strtol_l.constprop.0+0xc>
 80091dc:	2b24      	cmp	r3, #36	; 0x24
 80091de:	d906      	bls.n	80091ee <_strtol_l.constprop.0+0x1a>
 80091e0:	f7fd fd8c 	bl	8006cfc <__errno>
 80091e4:	2316      	movs	r3, #22
 80091e6:	6003      	str	r3, [r0, #0]
 80091e8:	2000      	movs	r0, #0
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092d4 <_strtol_l.constprop.0+0x100>
 80091f2:	460d      	mov	r5, r1
 80091f4:	462e      	mov	r6, r5
 80091f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80091fe:	f017 0708 	ands.w	r7, r7, #8
 8009202:	d1f7      	bne.n	80091f4 <_strtol_l.constprop.0+0x20>
 8009204:	2c2d      	cmp	r4, #45	; 0x2d
 8009206:	d132      	bne.n	800926e <_strtol_l.constprop.0+0x9a>
 8009208:	782c      	ldrb	r4, [r5, #0]
 800920a:	2701      	movs	r7, #1
 800920c:	1cb5      	adds	r5, r6, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d05b      	beq.n	80092ca <_strtol_l.constprop.0+0xf6>
 8009212:	2b10      	cmp	r3, #16
 8009214:	d109      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 8009216:	2c30      	cmp	r4, #48	; 0x30
 8009218:	d107      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 800921a:	782c      	ldrb	r4, [r5, #0]
 800921c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009220:	2c58      	cmp	r4, #88	; 0x58
 8009222:	d14d      	bne.n	80092c0 <_strtol_l.constprop.0+0xec>
 8009224:	786c      	ldrb	r4, [r5, #1]
 8009226:	2310      	movs	r3, #16
 8009228:	3502      	adds	r5, #2
 800922a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800922e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009232:	f04f 0e00 	mov.w	lr, #0
 8009236:	fbb8 f9f3 	udiv	r9, r8, r3
 800923a:	4676      	mov	r6, lr
 800923c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009240:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009244:	f1bc 0f09 	cmp.w	ip, #9
 8009248:	d816      	bhi.n	8009278 <_strtol_l.constprop.0+0xa4>
 800924a:	4664      	mov	r4, ip
 800924c:	42a3      	cmp	r3, r4
 800924e:	dd24      	ble.n	800929a <_strtol_l.constprop.0+0xc6>
 8009250:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009254:	d008      	beq.n	8009268 <_strtol_l.constprop.0+0x94>
 8009256:	45b1      	cmp	r9, r6
 8009258:	d31c      	bcc.n	8009294 <_strtol_l.constprop.0+0xc0>
 800925a:	d101      	bne.n	8009260 <_strtol_l.constprop.0+0x8c>
 800925c:	45a2      	cmp	sl, r4
 800925e:	db19      	blt.n	8009294 <_strtol_l.constprop.0+0xc0>
 8009260:	fb06 4603 	mla	r6, r6, r3, r4
 8009264:	f04f 0e01 	mov.w	lr, #1
 8009268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800926c:	e7e8      	b.n	8009240 <_strtol_l.constprop.0+0x6c>
 800926e:	2c2b      	cmp	r4, #43	; 0x2b
 8009270:	bf04      	itt	eq
 8009272:	782c      	ldrbeq	r4, [r5, #0]
 8009274:	1cb5      	addeq	r5, r6, #2
 8009276:	e7ca      	b.n	800920e <_strtol_l.constprop.0+0x3a>
 8009278:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800927c:	f1bc 0f19 	cmp.w	ip, #25
 8009280:	d801      	bhi.n	8009286 <_strtol_l.constprop.0+0xb2>
 8009282:	3c37      	subs	r4, #55	; 0x37
 8009284:	e7e2      	b.n	800924c <_strtol_l.constprop.0+0x78>
 8009286:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800928a:	f1bc 0f19 	cmp.w	ip, #25
 800928e:	d804      	bhi.n	800929a <_strtol_l.constprop.0+0xc6>
 8009290:	3c57      	subs	r4, #87	; 0x57
 8009292:	e7db      	b.n	800924c <_strtol_l.constprop.0+0x78>
 8009294:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009298:	e7e6      	b.n	8009268 <_strtol_l.constprop.0+0x94>
 800929a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800929e:	d105      	bne.n	80092ac <_strtol_l.constprop.0+0xd8>
 80092a0:	2322      	movs	r3, #34	; 0x22
 80092a2:	6003      	str	r3, [r0, #0]
 80092a4:	4646      	mov	r6, r8
 80092a6:	b942      	cbnz	r2, 80092ba <_strtol_l.constprop.0+0xe6>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e79e      	b.n	80091ea <_strtol_l.constprop.0+0x16>
 80092ac:	b107      	cbz	r7, 80092b0 <_strtol_l.constprop.0+0xdc>
 80092ae:	4276      	negs	r6, r6
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	d0f9      	beq.n	80092a8 <_strtol_l.constprop.0+0xd4>
 80092b4:	f1be 0f00 	cmp.w	lr, #0
 80092b8:	d000      	beq.n	80092bc <_strtol_l.constprop.0+0xe8>
 80092ba:	1e69      	subs	r1, r5, #1
 80092bc:	6011      	str	r1, [r2, #0]
 80092be:	e7f3      	b.n	80092a8 <_strtol_l.constprop.0+0xd4>
 80092c0:	2430      	movs	r4, #48	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1b1      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 80092c6:	2308      	movs	r3, #8
 80092c8:	e7af      	b.n	800922a <_strtol_l.constprop.0+0x56>
 80092ca:	2c30      	cmp	r4, #48	; 0x30
 80092cc:	d0a5      	beq.n	800921a <_strtol_l.constprop.0+0x46>
 80092ce:	230a      	movs	r3, #10
 80092d0:	e7ab      	b.n	800922a <_strtol_l.constprop.0+0x56>
 80092d2:	bf00      	nop
 80092d4:	0800a799 	.word	0x0800a799

080092d8 <_strtol_r>:
 80092d8:	f7ff bf7c 	b.w	80091d4 <_strtol_l.constprop.0>

080092dc <__ssputs_r>:
 80092dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	688e      	ldr	r6, [r1, #8]
 80092e2:	461f      	mov	r7, r3
 80092e4:	42be      	cmp	r6, r7
 80092e6:	680b      	ldr	r3, [r1, #0]
 80092e8:	4682      	mov	sl, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4690      	mov	r8, r2
 80092ee:	d82c      	bhi.n	800934a <__ssputs_r+0x6e>
 80092f0:	898a      	ldrh	r2, [r1, #12]
 80092f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092f6:	d026      	beq.n	8009346 <__ssputs_r+0x6a>
 80092f8:	6965      	ldr	r5, [r4, #20]
 80092fa:	6909      	ldr	r1, [r1, #16]
 80092fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009300:	eba3 0901 	sub.w	r9, r3, r1
 8009304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009308:	1c7b      	adds	r3, r7, #1
 800930a:	444b      	add	r3, r9
 800930c:	106d      	asrs	r5, r5, #1
 800930e:	429d      	cmp	r5, r3
 8009310:	bf38      	it	cc
 8009312:	461d      	movcc	r5, r3
 8009314:	0553      	lsls	r3, r2, #21
 8009316:	d527      	bpl.n	8009368 <__ssputs_r+0x8c>
 8009318:	4629      	mov	r1, r5
 800931a:	f7fe fc0f 	bl	8007b3c <_malloc_r>
 800931e:	4606      	mov	r6, r0
 8009320:	b360      	cbz	r0, 800937c <__ssputs_r+0xa0>
 8009322:	6921      	ldr	r1, [r4, #16]
 8009324:	464a      	mov	r2, r9
 8009326:	f000 fc79 	bl	8009c1c <memcpy>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	6126      	str	r6, [r4, #16]
 8009338:	6165      	str	r5, [r4, #20]
 800933a:	444e      	add	r6, r9
 800933c:	eba5 0509 	sub.w	r5, r5, r9
 8009340:	6026      	str	r6, [r4, #0]
 8009342:	60a5      	str	r5, [r4, #8]
 8009344:	463e      	mov	r6, r7
 8009346:	42be      	cmp	r6, r7
 8009348:	d900      	bls.n	800934c <__ssputs_r+0x70>
 800934a:	463e      	mov	r6, r7
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	4632      	mov	r2, r6
 8009350:	4641      	mov	r1, r8
 8009352:	f000 fc05 	bl	8009b60 <memmove>
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	1b9b      	subs	r3, r3, r6
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	4433      	add	r3, r6
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	2000      	movs	r0, #0
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	462a      	mov	r2, r5
 800936a:	f001 f80a 	bl	800a382 <_realloc_r>
 800936e:	4606      	mov	r6, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d1e0      	bne.n	8009336 <__ssputs_r+0x5a>
 8009374:	6921      	ldr	r1, [r4, #16]
 8009376:	4650      	mov	r0, sl
 8009378:	f7fe fb6c 	bl	8007a54 <_free_r>
 800937c:	230c      	movs	r3, #12
 800937e:	f8ca 3000 	str.w	r3, [sl]
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800938e:	e7e9      	b.n	8009364 <__ssputs_r+0x88>

08009390 <_svfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4698      	mov	r8, r3
 8009396:	898b      	ldrh	r3, [r1, #12]
 8009398:	061b      	lsls	r3, r3, #24
 800939a:	b09d      	sub	sp, #116	; 0x74
 800939c:	4607      	mov	r7, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	4614      	mov	r4, r2
 80093a2:	d50e      	bpl.n	80093c2 <_svfiprintf_r+0x32>
 80093a4:	690b      	ldr	r3, [r1, #16]
 80093a6:	b963      	cbnz	r3, 80093c2 <_svfiprintf_r+0x32>
 80093a8:	2140      	movs	r1, #64	; 0x40
 80093aa:	f7fe fbc7 	bl	8007b3c <_malloc_r>
 80093ae:	6028      	str	r0, [r5, #0]
 80093b0:	6128      	str	r0, [r5, #16]
 80093b2:	b920      	cbnz	r0, 80093be <_svfiprintf_r+0x2e>
 80093b4:	230c      	movs	r3, #12
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093bc:	e0d0      	b.n	8009560 <_svfiprintf_r+0x1d0>
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	616b      	str	r3, [r5, #20]
 80093c2:	2300      	movs	r3, #0
 80093c4:	9309      	str	r3, [sp, #36]	; 0x24
 80093c6:	2320      	movs	r3, #32
 80093c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d0:	2330      	movs	r3, #48	; 0x30
 80093d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009578 <_svfiprintf_r+0x1e8>
 80093d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093da:	f04f 0901 	mov.w	r9, #1
 80093de:	4623      	mov	r3, r4
 80093e0:	469a      	mov	sl, r3
 80093e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e6:	b10a      	cbz	r2, 80093ec <_svfiprintf_r+0x5c>
 80093e8:	2a25      	cmp	r2, #37	; 0x25
 80093ea:	d1f9      	bne.n	80093e0 <_svfiprintf_r+0x50>
 80093ec:	ebba 0b04 	subs.w	fp, sl, r4
 80093f0:	d00b      	beq.n	800940a <_svfiprintf_r+0x7a>
 80093f2:	465b      	mov	r3, fp
 80093f4:	4622      	mov	r2, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff ff6f 	bl	80092dc <__ssputs_r>
 80093fe:	3001      	adds	r0, #1
 8009400:	f000 80a9 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009406:	445a      	add	r2, fp
 8009408:	9209      	str	r2, [sp, #36]	; 0x24
 800940a:	f89a 3000 	ldrb.w	r3, [sl]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80a1 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009414:	2300      	movs	r3, #0
 8009416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800941a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800941e:	f10a 0a01 	add.w	sl, sl, #1
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	9307      	str	r3, [sp, #28]
 8009426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800942a:	931a      	str	r3, [sp, #104]	; 0x68
 800942c:	4654      	mov	r4, sl
 800942e:	2205      	movs	r2, #5
 8009430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009434:	4850      	ldr	r0, [pc, #320]	; (8009578 <_svfiprintf_r+0x1e8>)
 8009436:	f7f6 fedb 	bl	80001f0 <memchr>
 800943a:	9a04      	ldr	r2, [sp, #16]
 800943c:	b9d8      	cbnz	r0, 8009476 <_svfiprintf_r+0xe6>
 800943e:	06d0      	lsls	r0, r2, #27
 8009440:	bf44      	itt	mi
 8009442:	2320      	movmi	r3, #32
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009448:	0711      	lsls	r1, r2, #28
 800944a:	bf44      	itt	mi
 800944c:	232b      	movmi	r3, #43	; 0x2b
 800944e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009452:	f89a 3000 	ldrb.w	r3, [sl]
 8009456:	2b2a      	cmp	r3, #42	; 0x2a
 8009458:	d015      	beq.n	8009486 <_svfiprintf_r+0xf6>
 800945a:	9a07      	ldr	r2, [sp, #28]
 800945c:	4654      	mov	r4, sl
 800945e:	2000      	movs	r0, #0
 8009460:	f04f 0c0a 	mov.w	ip, #10
 8009464:	4621      	mov	r1, r4
 8009466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946a:	3b30      	subs	r3, #48	; 0x30
 800946c:	2b09      	cmp	r3, #9
 800946e:	d94d      	bls.n	800950c <_svfiprintf_r+0x17c>
 8009470:	b1b0      	cbz	r0, 80094a0 <_svfiprintf_r+0x110>
 8009472:	9207      	str	r2, [sp, #28]
 8009474:	e014      	b.n	80094a0 <_svfiprintf_r+0x110>
 8009476:	eba0 0308 	sub.w	r3, r0, r8
 800947a:	fa09 f303 	lsl.w	r3, r9, r3
 800947e:	4313      	orrs	r3, r2
 8009480:	9304      	str	r3, [sp, #16]
 8009482:	46a2      	mov	sl, r4
 8009484:	e7d2      	b.n	800942c <_svfiprintf_r+0x9c>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	1d19      	adds	r1, r3, #4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	9103      	str	r1, [sp, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfbb      	ittet	lt
 8009492:	425b      	neglt	r3, r3
 8009494:	f042 0202 	orrlt.w	r2, r2, #2
 8009498:	9307      	strge	r3, [sp, #28]
 800949a:	9307      	strlt	r3, [sp, #28]
 800949c:	bfb8      	it	lt
 800949e:	9204      	strlt	r2, [sp, #16]
 80094a0:	7823      	ldrb	r3, [r4, #0]
 80094a2:	2b2e      	cmp	r3, #46	; 0x2e
 80094a4:	d10c      	bne.n	80094c0 <_svfiprintf_r+0x130>
 80094a6:	7863      	ldrb	r3, [r4, #1]
 80094a8:	2b2a      	cmp	r3, #42	; 0x2a
 80094aa:	d134      	bne.n	8009516 <_svfiprintf_r+0x186>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1d1a      	adds	r2, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9203      	str	r2, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bfb8      	it	lt
 80094b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094bc:	3402      	adds	r4, #2
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009588 <_svfiprintf_r+0x1f8>
 80094c4:	7821      	ldrb	r1, [r4, #0]
 80094c6:	2203      	movs	r2, #3
 80094c8:	4650      	mov	r0, sl
 80094ca:	f7f6 fe91 	bl	80001f0 <memchr>
 80094ce:	b138      	cbz	r0, 80094e0 <_svfiprintf_r+0x150>
 80094d0:	9b04      	ldr	r3, [sp, #16]
 80094d2:	eba0 000a 	sub.w	r0, r0, sl
 80094d6:	2240      	movs	r2, #64	; 0x40
 80094d8:	4082      	lsls	r2, r0
 80094da:	4313      	orrs	r3, r2
 80094dc:	3401      	adds	r4, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e4:	4825      	ldr	r0, [pc, #148]	; (800957c <_svfiprintf_r+0x1ec>)
 80094e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ea:	2206      	movs	r2, #6
 80094ec:	f7f6 fe80 	bl	80001f0 <memchr>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d038      	beq.n	8009566 <_svfiprintf_r+0x1d6>
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <_svfiprintf_r+0x1f0>)
 80094f6:	bb1b      	cbnz	r3, 8009540 <_svfiprintf_r+0x1b0>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	3307      	adds	r3, #7
 80094fc:	f023 0307 	bic.w	r3, r3, #7
 8009500:	3308      	adds	r3, #8
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009506:	4433      	add	r3, r6
 8009508:	9309      	str	r3, [sp, #36]	; 0x24
 800950a:	e768      	b.n	80093de <_svfiprintf_r+0x4e>
 800950c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009510:	460c      	mov	r4, r1
 8009512:	2001      	movs	r0, #1
 8009514:	e7a6      	b.n	8009464 <_svfiprintf_r+0xd4>
 8009516:	2300      	movs	r3, #0
 8009518:	3401      	adds	r4, #1
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	4619      	mov	r1, r3
 800951e:	f04f 0c0a 	mov.w	ip, #10
 8009522:	4620      	mov	r0, r4
 8009524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009528:	3a30      	subs	r2, #48	; 0x30
 800952a:	2a09      	cmp	r2, #9
 800952c:	d903      	bls.n	8009536 <_svfiprintf_r+0x1a6>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0c6      	beq.n	80094c0 <_svfiprintf_r+0x130>
 8009532:	9105      	str	r1, [sp, #20]
 8009534:	e7c4      	b.n	80094c0 <_svfiprintf_r+0x130>
 8009536:	fb0c 2101 	mla	r1, ip, r1, r2
 800953a:	4604      	mov	r4, r0
 800953c:	2301      	movs	r3, #1
 800953e:	e7f0      	b.n	8009522 <_svfiprintf_r+0x192>
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	462a      	mov	r2, r5
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <_svfiprintf_r+0x1f4>)
 8009548:	a904      	add	r1, sp, #16
 800954a:	4638      	mov	r0, r7
 800954c:	f7fc fbda 	bl	8005d04 <_printf_float>
 8009550:	1c42      	adds	r2, r0, #1
 8009552:	4606      	mov	r6, r0
 8009554:	d1d6      	bne.n	8009504 <_svfiprintf_r+0x174>
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	065b      	lsls	r3, r3, #25
 800955a:	f53f af2d 	bmi.w	80093b8 <_svfiprintf_r+0x28>
 800955e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009560:	b01d      	add	sp, #116	; 0x74
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_svfiprintf_r+0x1f4>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4638      	mov	r0, r7
 8009572:	f7fc fe6b 	bl	800624c <_printf_i>
 8009576:	e7eb      	b.n	8009550 <_svfiprintf_r+0x1c0>
 8009578:	0800a899 	.word	0x0800a899
 800957c:	0800a8a3 	.word	0x0800a8a3
 8009580:	08005d05 	.word	0x08005d05
 8009584:	080092dd 	.word	0x080092dd
 8009588:	0800a89f 	.word	0x0800a89f

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	b410      	push	{r4}
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da08      	bge.n	80095aa <__sfputc_r+0x1e>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d103      	bne.n	80095aa <__sfputc_r+0x1e>
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	f000 ba45 	b.w	8009a34 <__swbuf_r>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	1c58      	adds	r0, r3, #1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <__sfputs_r>:
 80095ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	18d5      	adds	r5, r2, r3
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	d101      	bne.n	80095cc <__sfputs_r+0x12>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e007      	b.n	80095dc <__sfputs_r+0x22>
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	463a      	mov	r2, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffda 	bl	800958c <__sfputc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d1f3      	bne.n	80095c4 <__sfputs_r+0xa>
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6a03      	ldr	r3, [r0, #32]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f7fd f9d6 	bl	80069a4 <__sinit>
 80095f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095fa:	07d9      	lsls	r1, r3, #31
 80095fc:	d405      	bmi.n	800960a <_vfiprintf_r+0x2a>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d402      	bmi.n	800960a <_vfiprintf_r+0x2a>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f7fd fba3 	bl	8006d50 <__retarget_lock_acquire_recursive>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	d501      	bpl.n	8009614 <_vfiprintf_r+0x34>
 8009610:	692b      	ldr	r3, [r5, #16]
 8009612:	b99b      	cbnz	r3, 800963c <_vfiprintf_r+0x5c>
 8009614:	4629      	mov	r1, r5
 8009616:	4630      	mov	r0, r6
 8009618:	f000 fa4a 	bl	8009ab0 <__swsetup_r>
 800961c:	b170      	cbz	r0, 800963c <_vfiprintf_r+0x5c>
 800961e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009620:	07dc      	lsls	r4, r3, #31
 8009622:	d504      	bpl.n	800962e <_vfiprintf_r+0x4e>
 8009624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009628:	b01d      	add	sp, #116	; 0x74
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4f7      	bmi.n	8009624 <_vfiprintf_r+0x44>
 8009634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009636:	f7fd fb8c 	bl	8006d52 <__retarget_lock_release_recursive>
 800963a:	e7f3      	b.n	8009624 <_vfiprintf_r+0x44>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	f8cd 800c 	str.w	r8, [sp, #12]
 800964a:	2330      	movs	r3, #48	; 0x30
 800964c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009800 <_vfiprintf_r+0x220>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009654:	f04f 0901 	mov.w	r9, #1
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0x86>
 8009662:	2a25      	cmp	r2, #37	; 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x7a>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xa4>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ffa1 	bl	80095ba <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80a9 	beq.w	80097d0 <_vfiprintf_r+0x1f0>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a1 	beq.w	80097d0 <_vfiprintf_r+0x1f0>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a4:	931a      	str	r3, [sp, #104]	; 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4854      	ldr	r0, [pc, #336]	; (8009800 <_vfiprintf_r+0x220>)
 80096b0:	f7f6 fd9e 	bl	80001f0 <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x110>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	; 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x120>
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	4654      	mov	r4, sl
 80096d8:	2000      	movs	r0, #0
 80096da:	f04f 0c0a 	mov.w	ip, #10
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94d      	bls.n	8009786 <_vfiprintf_r+0x1a6>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x13a>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x13a>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	46a2      	mov	sl, r4
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xc6>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	; 0x2e
 800971e:	d10c      	bne.n	800973a <_vfiprintf_r+0x15a>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d134      	bne.n	8009790 <_vfiprintf_r+0x1b0>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	9203      	str	r2, [sp, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfb8      	it	lt
 8009732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009736:	3402      	adds	r4, #2
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009810 <_vfiprintf_r+0x230>
 800973e:	7821      	ldrb	r1, [r4, #0]
 8009740:	2203      	movs	r2, #3
 8009742:	4650      	mov	r0, sl
 8009744:	f7f6 fd54 	bl	80001f0 <memchr>
 8009748:	b138      	cbz	r0, 800975a <_vfiprintf_r+0x17a>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	2240      	movs	r2, #64	; 0x40
 8009752:	4082      	lsls	r2, r0
 8009754:	4313      	orrs	r3, r2
 8009756:	3401      	adds	r4, #1
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	4829      	ldr	r0, [pc, #164]	; (8009804 <_vfiprintf_r+0x224>)
 8009760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009764:	2206      	movs	r2, #6
 8009766:	f7f6 fd43 	bl	80001f0 <memchr>
 800976a:	2800      	cmp	r0, #0
 800976c:	d03f      	beq.n	80097ee <_vfiprintf_r+0x20e>
 800976e:	4b26      	ldr	r3, [pc, #152]	; (8009808 <_vfiprintf_r+0x228>)
 8009770:	bb1b      	cbnz	r3, 80097ba <_vfiprintf_r+0x1da>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	3307      	adds	r3, #7
 8009776:	f023 0307 	bic.w	r3, r3, #7
 800977a:	3308      	adds	r3, #8
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009780:	443b      	add	r3, r7
 8009782:	9309      	str	r3, [sp, #36]	; 0x24
 8009784:	e768      	b.n	8009658 <_vfiprintf_r+0x78>
 8009786:	fb0c 3202 	mla	r2, ip, r2, r3
 800978a:	460c      	mov	r4, r1
 800978c:	2001      	movs	r0, #1
 800978e:	e7a6      	b.n	80096de <_vfiprintf_r+0xfe>
 8009790:	2300      	movs	r3, #0
 8009792:	3401      	adds	r4, #1
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	4619      	mov	r1, r3
 8009798:	f04f 0c0a 	mov.w	ip, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a2:	3a30      	subs	r2, #48	; 0x30
 80097a4:	2a09      	cmp	r2, #9
 80097a6:	d903      	bls.n	80097b0 <_vfiprintf_r+0x1d0>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0c6      	beq.n	800973a <_vfiprintf_r+0x15a>
 80097ac:	9105      	str	r1, [sp, #20]
 80097ae:	e7c4      	b.n	800973a <_vfiprintf_r+0x15a>
 80097b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b4:	4604      	mov	r4, r0
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7f0      	b.n	800979c <_vfiprintf_r+0x1bc>
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	462a      	mov	r2, r5
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <_vfiprintf_r+0x22c>)
 80097c2:	a904      	add	r1, sp, #16
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7fc fa9d 	bl	8005d04 <_printf_float>
 80097ca:	4607      	mov	r7, r0
 80097cc:	1c78      	adds	r0, r7, #1
 80097ce:	d1d6      	bne.n	800977e <_vfiprintf_r+0x19e>
 80097d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x202>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x202>
 80097dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097de:	f7fd fab8 	bl	8006d52 <__retarget_lock_release_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	065b      	lsls	r3, r3, #25
 80097e6:	f53f af1d 	bmi.w	8009624 <_vfiprintf_r+0x44>
 80097ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ec:	e71c      	b.n	8009628 <_vfiprintf_r+0x48>
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <_vfiprintf_r+0x22c>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7fc fd27 	bl	800624c <_printf_i>
 80097fe:	e7e4      	b.n	80097ca <_vfiprintf_r+0x1ea>
 8009800:	0800a899 	.word	0x0800a899
 8009804:	0800a8a3 	.word	0x0800a8a3
 8009808:	08005d05 	.word	0x08005d05
 800980c:	080095bb 	.word	0x080095bb
 8009810:	0800a89f 	.word	0x0800a89f

08009814 <__sflush_r>:
 8009814:	898a      	ldrh	r2, [r1, #12]
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	0710      	lsls	r0, r2, #28
 800981e:	460c      	mov	r4, r1
 8009820:	d458      	bmi.n	80098d4 <__sflush_r+0xc0>
 8009822:	684b      	ldr	r3, [r1, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dc05      	bgt.n	8009834 <__sflush_r+0x20>
 8009828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc02      	bgt.n	8009834 <__sflush_r+0x20>
 800982e:	2000      	movs	r0, #0
 8009830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009836:	2e00      	cmp	r6, #0
 8009838:	d0f9      	beq.n	800982e <__sflush_r+0x1a>
 800983a:	2300      	movs	r3, #0
 800983c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009840:	682f      	ldr	r7, [r5, #0]
 8009842:	6a21      	ldr	r1, [r4, #32]
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	d032      	beq.n	80098ae <__sflush_r+0x9a>
 8009848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	075a      	lsls	r2, r3, #29
 800984e:	d505      	bpl.n	800985c <__sflush_r+0x48>
 8009850:	6863      	ldr	r3, [r4, #4]
 8009852:	1ac0      	subs	r0, r0, r3
 8009854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009856:	b10b      	cbz	r3, 800985c <__sflush_r+0x48>
 8009858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800985a:	1ac0      	subs	r0, r0, r3
 800985c:	2300      	movs	r3, #0
 800985e:	4602      	mov	r2, r0
 8009860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009862:	6a21      	ldr	r1, [r4, #32]
 8009864:	4628      	mov	r0, r5
 8009866:	47b0      	blx	r6
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	d106      	bne.n	800987c <__sflush_r+0x68>
 800986e:	6829      	ldr	r1, [r5, #0]
 8009870:	291d      	cmp	r1, #29
 8009872:	d82b      	bhi.n	80098cc <__sflush_r+0xb8>
 8009874:	4a29      	ldr	r2, [pc, #164]	; (800991c <__sflush_r+0x108>)
 8009876:	410a      	asrs	r2, r1
 8009878:	07d6      	lsls	r6, r2, #31
 800987a:	d427      	bmi.n	80098cc <__sflush_r+0xb8>
 800987c:	2200      	movs	r2, #0
 800987e:	6062      	str	r2, [r4, #4]
 8009880:	04d9      	lsls	r1, r3, #19
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	d504      	bpl.n	8009892 <__sflush_r+0x7e>
 8009888:	1c42      	adds	r2, r0, #1
 800988a:	d101      	bne.n	8009890 <__sflush_r+0x7c>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b903      	cbnz	r3, 8009892 <__sflush_r+0x7e>
 8009890:	6560      	str	r0, [r4, #84]	; 0x54
 8009892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009894:	602f      	str	r7, [r5, #0]
 8009896:	2900      	cmp	r1, #0
 8009898:	d0c9      	beq.n	800982e <__sflush_r+0x1a>
 800989a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989e:	4299      	cmp	r1, r3
 80098a0:	d002      	beq.n	80098a8 <__sflush_r+0x94>
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7fe f8d6 	bl	8007a54 <_free_r>
 80098a8:	2000      	movs	r0, #0
 80098aa:	6360      	str	r0, [r4, #52]	; 0x34
 80098ac:	e7c0      	b.n	8009830 <__sflush_r+0x1c>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	1c41      	adds	r1, r0, #1
 80098b6:	d1c8      	bne.n	800984a <__sflush_r+0x36>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c5      	beq.n	800984a <__sflush_r+0x36>
 80098be:	2b1d      	cmp	r3, #29
 80098c0:	d001      	beq.n	80098c6 <__sflush_r+0xb2>
 80098c2:	2b16      	cmp	r3, #22
 80098c4:	d101      	bne.n	80098ca <__sflush_r+0xb6>
 80098c6:	602f      	str	r7, [r5, #0]
 80098c8:	e7b1      	b.n	800982e <__sflush_r+0x1a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e7ad      	b.n	8009830 <__sflush_r+0x1c>
 80098d4:	690f      	ldr	r7, [r1, #16]
 80098d6:	2f00      	cmp	r7, #0
 80098d8:	d0a9      	beq.n	800982e <__sflush_r+0x1a>
 80098da:	0793      	lsls	r3, r2, #30
 80098dc:	680e      	ldr	r6, [r1, #0]
 80098de:	bf08      	it	eq
 80098e0:	694b      	ldreq	r3, [r1, #20]
 80098e2:	600f      	str	r7, [r1, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2300      	movne	r3, #0
 80098e8:	eba6 0807 	sub.w	r8, r6, r7
 80098ec:	608b      	str	r3, [r1, #8]
 80098ee:	f1b8 0f00 	cmp.w	r8, #0
 80098f2:	dd9c      	ble.n	800982e <__sflush_r+0x1a>
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f8:	4643      	mov	r3, r8
 80098fa:	463a      	mov	r2, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b0      	blx	r6
 8009900:	2800      	cmp	r0, #0
 8009902:	dc06      	bgt.n	8009912 <__sflush_r+0xfe>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009910:	e78e      	b.n	8009830 <__sflush_r+0x1c>
 8009912:	4407      	add	r7, r0
 8009914:	eba8 0800 	sub.w	r8, r8, r0
 8009918:	e7e9      	b.n	80098ee <__sflush_r+0xda>
 800991a:	bf00      	nop
 800991c:	dfbffffe 	.word	0xdfbffffe

08009920 <_fflush_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b913      	cbnz	r3, 8009930 <_fflush_r+0x10>
 800992a:	2500      	movs	r5, #0
 800992c:	4628      	mov	r0, r5
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	b118      	cbz	r0, 800993a <_fflush_r+0x1a>
 8009932:	6a03      	ldr	r3, [r0, #32]
 8009934:	b90b      	cbnz	r3, 800993a <_fflush_r+0x1a>
 8009936:	f7fd f835 	bl	80069a4 <__sinit>
 800993a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0f3      	beq.n	800992a <_fflush_r+0xa>
 8009942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009944:	07d0      	lsls	r0, r2, #31
 8009946:	d404      	bmi.n	8009952 <_fflush_r+0x32>
 8009948:	0599      	lsls	r1, r3, #22
 800994a:	d402      	bmi.n	8009952 <_fflush_r+0x32>
 800994c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994e:	f7fd f9ff 	bl	8006d50 <__retarget_lock_acquire_recursive>
 8009952:	4628      	mov	r0, r5
 8009954:	4621      	mov	r1, r4
 8009956:	f7ff ff5d 	bl	8009814 <__sflush_r>
 800995a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800995c:	07da      	lsls	r2, r3, #31
 800995e:	4605      	mov	r5, r0
 8009960:	d4e4      	bmi.n	800992c <_fflush_r+0xc>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	059b      	lsls	r3, r3, #22
 8009966:	d4e1      	bmi.n	800992c <_fflush_r+0xc>
 8009968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996a:	f7fd f9f2 	bl	8006d52 <__retarget_lock_release_recursive>
 800996e:	e7dd      	b.n	800992c <_fflush_r+0xc>

08009970 <__swhatbuf_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2900      	cmp	r1, #0
 800997a:	b096      	sub	sp, #88	; 0x58
 800997c:	4615      	mov	r5, r2
 800997e:	461e      	mov	r6, r3
 8009980:	da0d      	bge.n	800999e <__swhatbuf_r+0x2e>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	bf0c      	ite	eq
 800998e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009992:	2340      	movne	r3, #64	; 0x40
 8009994:	2000      	movs	r0, #0
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	b016      	add	sp, #88	; 0x58
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	466a      	mov	r2, sp
 80099a0:	f000 f90a 	bl	8009bb8 <_fstat_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	dbec      	blt.n	8009982 <__swhatbuf_r+0x12>
 80099a8:	9901      	ldr	r1, [sp, #4]
 80099aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099b2:	4259      	negs	r1, r3
 80099b4:	4159      	adcs	r1, r3
 80099b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ba:	e7eb      	b.n	8009994 <__swhatbuf_r+0x24>

080099bc <__smakebuf_r>:
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c0:	079d      	lsls	r5, r3, #30
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	d507      	bpl.n	80099d8 <__smakebuf_r+0x1c>
 80099c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2301      	movs	r3, #1
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	b002      	add	sp, #8
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	ab01      	add	r3, sp, #4
 80099da:	466a      	mov	r2, sp
 80099dc:	f7ff ffc8 	bl	8009970 <__swhatbuf_r>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7fe f8a9 	bl	8007b3c <_malloc_r>
 80099ea:	b948      	cbnz	r0, 8009a00 <__smakebuf_r+0x44>
 80099ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f0:	059a      	lsls	r2, r3, #22
 80099f2:	d4ef      	bmi.n	80099d4 <__smakebuf_r+0x18>
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	f043 0302 	orr.w	r3, r3, #2
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7e3      	b.n	80099c8 <__smakebuf_r+0xc>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	6020      	str	r0, [r4, #0]
 8009a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a08:	81a3      	strh	r3, [r4, #12]
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	6163      	str	r3, [r4, #20]
 8009a0e:	9b01      	ldr	r3, [sp, #4]
 8009a10:	6120      	str	r0, [r4, #16]
 8009a12:	b15b      	cbz	r3, 8009a2c <__smakebuf_r+0x70>
 8009a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 f8df 	bl	8009bdc <_isatty_r>
 8009a1e:	b128      	cbz	r0, 8009a2c <__smakebuf_r+0x70>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	431d      	orrs	r5, r3
 8009a30:	81a5      	strh	r5, [r4, #12]
 8009a32:	e7cf      	b.n	80099d4 <__smakebuf_r+0x18>

08009a34 <__swbuf_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	460e      	mov	r6, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b118      	cbz	r0, 8009a46 <__swbuf_r+0x12>
 8009a3e:	6a03      	ldr	r3, [r0, #32]
 8009a40:	b90b      	cbnz	r3, 8009a46 <__swbuf_r+0x12>
 8009a42:	f7fc ffaf 	bl	80069a4 <__sinit>
 8009a46:	69a3      	ldr	r3, [r4, #24]
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	071a      	lsls	r2, r3, #28
 8009a4e:	d525      	bpl.n	8009a9c <__swbuf_r+0x68>
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	b31b      	cbz	r3, 8009a9c <__swbuf_r+0x68>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	6922      	ldr	r2, [r4, #16]
 8009a58:	1a98      	subs	r0, r3, r2
 8009a5a:	6963      	ldr	r3, [r4, #20]
 8009a5c:	b2f6      	uxtb	r6, r6
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	4637      	mov	r7, r6
 8009a62:	dc04      	bgt.n	8009a6e <__swbuf_r+0x3a>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4628      	mov	r0, r5
 8009a68:	f7ff ff5a 	bl	8009920 <_fflush_r>
 8009a6c:	b9e0      	cbnz	r0, 8009aa8 <__swbuf_r+0x74>
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	60a3      	str	r3, [r4, #8]
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	701e      	strb	r6, [r3, #0]
 8009a7c:	6962      	ldr	r2, [r4, #20]
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d004      	beq.n	8009a8e <__swbuf_r+0x5a>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	07db      	lsls	r3, r3, #31
 8009a88:	d506      	bpl.n	8009a98 <__swbuf_r+0x64>
 8009a8a:	2e0a      	cmp	r6, #10
 8009a8c:	d104      	bne.n	8009a98 <__swbuf_r+0x64>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f7ff ff45 	bl	8009920 <_fflush_r>
 8009a96:	b938      	cbnz	r0, 8009aa8 <__swbuf_r+0x74>
 8009a98:	4638      	mov	r0, r7
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f806 	bl	8009ab0 <__swsetup_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d0d5      	beq.n	8009a54 <__swbuf_r+0x20>
 8009aa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009aac:	e7f4      	b.n	8009a98 <__swbuf_r+0x64>
	...

08009ab0 <__swsetup_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <__swsetup_r+0xac>)
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	460c      	mov	r4, r1
 8009aba:	b118      	cbz	r0, 8009ac4 <__swsetup_r+0x14>
 8009abc:	6a03      	ldr	r3, [r0, #32]
 8009abe:	b90b      	cbnz	r3, 8009ac4 <__swsetup_r+0x14>
 8009ac0:	f7fc ff70 	bl	80069a4 <__sinit>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aca:	0718      	lsls	r0, r3, #28
 8009acc:	d422      	bmi.n	8009b14 <__swsetup_r+0x64>
 8009ace:	06d9      	lsls	r1, r3, #27
 8009ad0:	d407      	bmi.n	8009ae2 <__swsetup_r+0x32>
 8009ad2:	2309      	movs	r3, #9
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ae0:	e034      	b.n	8009b4c <__swsetup_r+0x9c>
 8009ae2:	0758      	lsls	r0, r3, #29
 8009ae4:	d512      	bpl.n	8009b0c <__swsetup_r+0x5c>
 8009ae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae8:	b141      	cbz	r1, 8009afc <__swsetup_r+0x4c>
 8009aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aee:	4299      	cmp	r1, r3
 8009af0:	d002      	beq.n	8009af8 <__swsetup_r+0x48>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7fd ffae 	bl	8007a54 <_free_r>
 8009af8:	2300      	movs	r3, #0
 8009afa:	6363      	str	r3, [r4, #52]	; 0x34
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	2300      	movs	r3, #0
 8009b06:	6063      	str	r3, [r4, #4]
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f043 0308 	orr.w	r3, r3, #8
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	b94b      	cbnz	r3, 8009b2c <__swsetup_r+0x7c>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b22:	d003      	beq.n	8009b2c <__swsetup_r+0x7c>
 8009b24:	4621      	mov	r1, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f7ff ff48 	bl	80099bc <__smakebuf_r>
 8009b2c:	89a0      	ldrh	r0, [r4, #12]
 8009b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b32:	f010 0301 	ands.w	r3, r0, #1
 8009b36:	d00a      	beq.n	8009b4e <__swsetup_r+0x9e>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60a3      	str	r3, [r4, #8]
 8009b3c:	6963      	ldr	r3, [r4, #20]
 8009b3e:	425b      	negs	r3, r3
 8009b40:	61a3      	str	r3, [r4, #24]
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	b943      	cbnz	r3, 8009b58 <__swsetup_r+0xa8>
 8009b46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b4a:	d1c4      	bne.n	8009ad6 <__swsetup_r+0x26>
 8009b4c:	bd38      	pop	{r3, r4, r5, pc}
 8009b4e:	0781      	lsls	r1, r0, #30
 8009b50:	bf58      	it	pl
 8009b52:	6963      	ldrpl	r3, [r4, #20]
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	e7f4      	b.n	8009b42 <__swsetup_r+0x92>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7f7      	b.n	8009b4c <__swsetup_r+0x9c>
 8009b5c:	20000064 	.word	0x20000064

08009b60 <memmove>:
 8009b60:	4288      	cmp	r0, r1
 8009b62:	b510      	push	{r4, lr}
 8009b64:	eb01 0402 	add.w	r4, r1, r2
 8009b68:	d902      	bls.n	8009b70 <memmove+0x10>
 8009b6a:	4284      	cmp	r4, r0
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	d807      	bhi.n	8009b80 <memmove+0x20>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	42a1      	cmp	r1, r4
 8009b74:	d008      	beq.n	8009b88 <memmove+0x28>
 8009b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b7e:	e7f8      	b.n	8009b72 <memmove+0x12>
 8009b80:	4402      	add	r2, r0
 8009b82:	4601      	mov	r1, r0
 8009b84:	428a      	cmp	r2, r1
 8009b86:	d100      	bne.n	8009b8a <memmove+0x2a>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b92:	e7f7      	b.n	8009b84 <memmove+0x24>

08009b94 <strncmp>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	b16a      	cbz	r2, 8009bb4 <strncmp+0x20>
 8009b98:	3901      	subs	r1, #1
 8009b9a:	1884      	adds	r4, r0, r2
 8009b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d103      	bne.n	8009bb0 <strncmp+0x1c>
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d001      	beq.n	8009bb0 <strncmp+0x1c>
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d1f5      	bne.n	8009b9c <strncmp+0x8>
 8009bb0:	1ad0      	subs	r0, r2, r3
 8009bb2:	bd10      	pop	{r4, pc}
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	e7fc      	b.n	8009bb2 <strncmp+0x1e>

08009bb8 <_fstat_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d07      	ldr	r5, [pc, #28]	; (8009bd8 <_fstat_r+0x20>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	f7f7 fd75 	bl	80016b4 <_fstat>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d102      	bne.n	8009bd4 <_fstat_r+0x1c>
 8009bce:	682b      	ldr	r3, [r5, #0]
 8009bd0:	b103      	cbz	r3, 8009bd4 <_fstat_r+0x1c>
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000710 	.word	0x20000710

08009bdc <_isatty_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_isatty_r+0x1c>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f7 fcd2 	bl	8001590 <_isatty>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_isatty_r+0x1a>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_isatty_r+0x1a>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20000710 	.word	0x20000710

08009bfc <_sbrk_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	; (8009c18 <_sbrk_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f7 ff1c 	bl	8001a44 <_sbrk>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_sbrk_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_sbrk_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20000710 	.word	0x20000710

08009c1c <memcpy>:
 8009c1c:	440a      	add	r2, r1
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c24:	d100      	bne.n	8009c28 <memcpy+0xc>
 8009c26:	4770      	bx	lr
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c32:	4291      	cmp	r1, r2
 8009c34:	d1f9      	bne.n	8009c2a <memcpy+0xe>
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <nan>:
 8009c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c40 <nan+0x8>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00000000 	.word	0x00000000
 8009c44:	7ff80000 	.word	0x7ff80000

08009c48 <__assert_func>:
 8009c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <__assert_func+0x2c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	68d8      	ldr	r0, [r3, #12]
 8009c56:	b14c      	cbz	r4, 8009c6c <__assert_func+0x24>
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <__assert_func+0x30>)
 8009c5a:	9100      	str	r1, [sp, #0]
 8009c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c60:	4906      	ldr	r1, [pc, #24]	; (8009c7c <__assert_func+0x34>)
 8009c62:	462b      	mov	r3, r5
 8009c64:	f000 fbca 	bl	800a3fc <fiprintf>
 8009c68:	f000 fbda 	bl	800a420 <abort>
 8009c6c:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <__assert_func+0x38>)
 8009c6e:	461c      	mov	r4, r3
 8009c70:	e7f3      	b.n	8009c5a <__assert_func+0x12>
 8009c72:	bf00      	nop
 8009c74:	20000064 	.word	0x20000064
 8009c78:	0800a8b2 	.word	0x0800a8b2
 8009c7c:	0800a8bf 	.word	0x0800a8bf
 8009c80:	0800a8ed 	.word	0x0800a8ed

08009c84 <_calloc_r>:
 8009c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c86:	fba1 2402 	umull	r2, r4, r1, r2
 8009c8a:	b94c      	cbnz	r4, 8009ca0 <_calloc_r+0x1c>
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	9201      	str	r2, [sp, #4]
 8009c90:	f7fd ff54 	bl	8007b3c <_malloc_r>
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	4605      	mov	r5, r0
 8009c98:	b930      	cbnz	r0, 8009ca8 <_calloc_r+0x24>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	220c      	movs	r2, #12
 8009ca2:	6002      	str	r2, [r0, #0]
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	e7f8      	b.n	8009c9a <_calloc_r+0x16>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	f7fc ffd4 	bl	8006c56 <memset>
 8009cae:	e7f4      	b.n	8009c9a <_calloc_r+0x16>

08009cb0 <rshift>:
 8009cb0:	6903      	ldr	r3, [r0, #16]
 8009cb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cbe:	f100 0414 	add.w	r4, r0, #20
 8009cc2:	dd45      	ble.n	8009d50 <rshift+0xa0>
 8009cc4:	f011 011f 	ands.w	r1, r1, #31
 8009cc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd0:	d10c      	bne.n	8009cec <rshift+0x3c>
 8009cd2:	f100 0710 	add.w	r7, r0, #16
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	42b1      	cmp	r1, r6
 8009cda:	d334      	bcc.n	8009d46 <rshift+0x96>
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	1eea      	subs	r2, r5, #3
 8009ce2:	4296      	cmp	r6, r2
 8009ce4:	bf38      	it	cc
 8009ce6:	2300      	movcc	r3, #0
 8009ce8:	4423      	add	r3, r4
 8009cea:	e015      	b.n	8009d18 <rshift+0x68>
 8009cec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf0:	f1c1 0820 	rsb	r8, r1, #32
 8009cf4:	40cf      	lsrs	r7, r1
 8009cf6:	f105 0e04 	add.w	lr, r5, #4
 8009cfa:	46a1      	mov	r9, r4
 8009cfc:	4576      	cmp	r6, lr
 8009cfe:	46f4      	mov	ip, lr
 8009d00:	d815      	bhi.n	8009d2e <rshift+0x7e>
 8009d02:	1a9a      	subs	r2, r3, r2
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	3a04      	subs	r2, #4
 8009d08:	3501      	adds	r5, #1
 8009d0a:	42ae      	cmp	r6, r5
 8009d0c:	bf38      	it	cc
 8009d0e:	2200      	movcc	r2, #0
 8009d10:	18a3      	adds	r3, r4, r2
 8009d12:	50a7      	str	r7, [r4, r2]
 8009d14:	b107      	cbz	r7, 8009d18 <rshift+0x68>
 8009d16:	3304      	adds	r3, #4
 8009d18:	1b1a      	subs	r2, r3, r4
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d20:	bf08      	it	eq
 8009d22:	2300      	moveq	r3, #0
 8009d24:	6102      	str	r2, [r0, #16]
 8009d26:	bf08      	it	eq
 8009d28:	6143      	streq	r3, [r0, #20]
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	f8dc c000 	ldr.w	ip, [ip]
 8009d32:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d36:	ea4c 0707 	orr.w	r7, ip, r7
 8009d3a:	f849 7b04 	str.w	r7, [r9], #4
 8009d3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d42:	40cf      	lsrs	r7, r1
 8009d44:	e7da      	b.n	8009cfc <rshift+0x4c>
 8009d46:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d4e:	e7c3      	b.n	8009cd8 <rshift+0x28>
 8009d50:	4623      	mov	r3, r4
 8009d52:	e7e1      	b.n	8009d18 <rshift+0x68>

08009d54 <__hexdig_fun>:
 8009d54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d58:	2b09      	cmp	r3, #9
 8009d5a:	d802      	bhi.n	8009d62 <__hexdig_fun+0xe>
 8009d5c:	3820      	subs	r0, #32
 8009d5e:	b2c0      	uxtb	r0, r0
 8009d60:	4770      	bx	lr
 8009d62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d66:	2b05      	cmp	r3, #5
 8009d68:	d801      	bhi.n	8009d6e <__hexdig_fun+0x1a>
 8009d6a:	3847      	subs	r0, #71	; 0x47
 8009d6c:	e7f7      	b.n	8009d5e <__hexdig_fun+0xa>
 8009d6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d801      	bhi.n	8009d7a <__hexdig_fun+0x26>
 8009d76:	3827      	subs	r0, #39	; 0x27
 8009d78:	e7f1      	b.n	8009d5e <__hexdig_fun+0xa>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	4770      	bx	lr
	...

08009d80 <__gethex>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	4617      	mov	r7, r2
 8009d86:	680a      	ldr	r2, [r1, #0]
 8009d88:	b085      	sub	sp, #20
 8009d8a:	f102 0b02 	add.w	fp, r2, #2
 8009d8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d96:	4681      	mov	r9, r0
 8009d98:	468a      	mov	sl, r1
 8009d9a:	9302      	str	r3, [sp, #8]
 8009d9c:	32fe      	adds	r2, #254	; 0xfe
 8009d9e:	eb02 030b 	add.w	r3, r2, fp
 8009da2:	46d8      	mov	r8, fp
 8009da4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	2830      	cmp	r0, #48	; 0x30
 8009dac:	d0f7      	beq.n	8009d9e <__gethex+0x1e>
 8009dae:	f7ff ffd1 	bl	8009d54 <__hexdig_fun>
 8009db2:	4604      	mov	r4, r0
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d138      	bne.n	8009e2a <__gethex+0xaa>
 8009db8:	49a7      	ldr	r1, [pc, #668]	; (800a058 <__gethex+0x2d8>)
 8009dba:	2201      	movs	r2, #1
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	f7ff fee9 	bl	8009b94 <strncmp>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d169      	bne.n	8009e9c <__gethex+0x11c>
 8009dc8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009dcc:	465d      	mov	r5, fp
 8009dce:	f7ff ffc1 	bl	8009d54 <__hexdig_fun>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d064      	beq.n	8009ea0 <__gethex+0x120>
 8009dd6:	465a      	mov	r2, fp
 8009dd8:	7810      	ldrb	r0, [r2, #0]
 8009dda:	2830      	cmp	r0, #48	; 0x30
 8009ddc:	4690      	mov	r8, r2
 8009dde:	f102 0201 	add.w	r2, r2, #1
 8009de2:	d0f9      	beq.n	8009dd8 <__gethex+0x58>
 8009de4:	f7ff ffb6 	bl	8009d54 <__hexdig_fun>
 8009de8:	2301      	movs	r3, #1
 8009dea:	fab0 f480 	clz	r4, r0
 8009dee:	0964      	lsrs	r4, r4, #5
 8009df0:	465e      	mov	r6, fp
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	4642      	mov	r2, r8
 8009df6:	4615      	mov	r5, r2
 8009df8:	3201      	adds	r2, #1
 8009dfa:	7828      	ldrb	r0, [r5, #0]
 8009dfc:	f7ff ffaa 	bl	8009d54 <__hexdig_fun>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1f8      	bne.n	8009df6 <__gethex+0x76>
 8009e04:	4994      	ldr	r1, [pc, #592]	; (800a058 <__gethex+0x2d8>)
 8009e06:	2201      	movs	r2, #1
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f7ff fec3 	bl	8009b94 <strncmp>
 8009e0e:	b978      	cbnz	r0, 8009e30 <__gethex+0xb0>
 8009e10:	b946      	cbnz	r6, 8009e24 <__gethex+0xa4>
 8009e12:	1c6e      	adds	r6, r5, #1
 8009e14:	4632      	mov	r2, r6
 8009e16:	4615      	mov	r5, r2
 8009e18:	3201      	adds	r2, #1
 8009e1a:	7828      	ldrb	r0, [r5, #0]
 8009e1c:	f7ff ff9a 	bl	8009d54 <__hexdig_fun>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1f8      	bne.n	8009e16 <__gethex+0x96>
 8009e24:	1b73      	subs	r3, r6, r5
 8009e26:	009e      	lsls	r6, r3, #2
 8009e28:	e004      	b.n	8009e34 <__gethex+0xb4>
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	4626      	mov	r6, r4
 8009e2e:	e7e1      	b.n	8009df4 <__gethex+0x74>
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d1f7      	bne.n	8009e24 <__gethex+0xa4>
 8009e34:	782b      	ldrb	r3, [r5, #0]
 8009e36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e3a:	2b50      	cmp	r3, #80	; 0x50
 8009e3c:	d13d      	bne.n	8009eba <__gethex+0x13a>
 8009e3e:	786b      	ldrb	r3, [r5, #1]
 8009e40:	2b2b      	cmp	r3, #43	; 0x2b
 8009e42:	d02f      	beq.n	8009ea4 <__gethex+0x124>
 8009e44:	2b2d      	cmp	r3, #45	; 0x2d
 8009e46:	d031      	beq.n	8009eac <__gethex+0x12c>
 8009e48:	1c69      	adds	r1, r5, #1
 8009e4a:	f04f 0b00 	mov.w	fp, #0
 8009e4e:	7808      	ldrb	r0, [r1, #0]
 8009e50:	f7ff ff80 	bl	8009d54 <__hexdig_fun>
 8009e54:	1e42      	subs	r2, r0, #1
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	2a18      	cmp	r2, #24
 8009e5a:	d82e      	bhi.n	8009eba <__gethex+0x13a>
 8009e5c:	f1a0 0210 	sub.w	r2, r0, #16
 8009e60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e64:	f7ff ff76 	bl	8009d54 <__hexdig_fun>
 8009e68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009e6c:	fa5f fc8c 	uxtb.w	ip, ip
 8009e70:	f1bc 0f18 	cmp.w	ip, #24
 8009e74:	d91d      	bls.n	8009eb2 <__gethex+0x132>
 8009e76:	f1bb 0f00 	cmp.w	fp, #0
 8009e7a:	d000      	beq.n	8009e7e <__gethex+0xfe>
 8009e7c:	4252      	negs	r2, r2
 8009e7e:	4416      	add	r6, r2
 8009e80:	f8ca 1000 	str.w	r1, [sl]
 8009e84:	b1dc      	cbz	r4, 8009ebe <__gethex+0x13e>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf14      	ite	ne
 8009e8c:	f04f 0800 	movne.w	r8, #0
 8009e90:	f04f 0806 	moveq.w	r8, #6
 8009e94:	4640      	mov	r0, r8
 8009e96:	b005      	add	sp, #20
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	4645      	mov	r5, r8
 8009e9e:	4626      	mov	r6, r4
 8009ea0:	2401      	movs	r4, #1
 8009ea2:	e7c7      	b.n	8009e34 <__gethex+0xb4>
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	1ca9      	adds	r1, r5, #2
 8009eaa:	e7d0      	b.n	8009e4e <__gethex+0xce>
 8009eac:	f04f 0b01 	mov.w	fp, #1
 8009eb0:	e7fa      	b.n	8009ea8 <__gethex+0x128>
 8009eb2:	230a      	movs	r3, #10
 8009eb4:	fb03 0002 	mla	r0, r3, r2, r0
 8009eb8:	e7d0      	b.n	8009e5c <__gethex+0xdc>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	e7e0      	b.n	8009e80 <__gethex+0x100>
 8009ebe:	eba5 0308 	sub.w	r3, r5, r8
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	2b07      	cmp	r3, #7
 8009ec8:	dc0a      	bgt.n	8009ee0 <__gethex+0x160>
 8009eca:	4648      	mov	r0, r9
 8009ecc:	f7fd fec2 	bl	8007c54 <_Balloc>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	b940      	cbnz	r0, 8009ee6 <__gethex+0x166>
 8009ed4:	4b61      	ldr	r3, [pc, #388]	; (800a05c <__gethex+0x2dc>)
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	21e4      	movs	r1, #228	; 0xe4
 8009eda:	4861      	ldr	r0, [pc, #388]	; (800a060 <__gethex+0x2e0>)
 8009edc:	f7ff feb4 	bl	8009c48 <__assert_func>
 8009ee0:	3101      	adds	r1, #1
 8009ee2:	105b      	asrs	r3, r3, #1
 8009ee4:	e7ef      	b.n	8009ec6 <__gethex+0x146>
 8009ee6:	f100 0a14 	add.w	sl, r0, #20
 8009eea:	2300      	movs	r3, #0
 8009eec:	495a      	ldr	r1, [pc, #360]	; (800a058 <__gethex+0x2d8>)
 8009eee:	f8cd a004 	str.w	sl, [sp, #4]
 8009ef2:	469b      	mov	fp, r3
 8009ef4:	45a8      	cmp	r8, r5
 8009ef6:	d342      	bcc.n	8009f7e <__gethex+0x1fe>
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	f840 bb04 	str.w	fp, [r0], #4
 8009efe:	eba0 000a 	sub.w	r0, r0, sl
 8009f02:	1080      	asrs	r0, r0, #2
 8009f04:	6120      	str	r0, [r4, #16]
 8009f06:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f7fd ff94 	bl	8007e38 <__hi0bits>
 8009f10:	683d      	ldr	r5, [r7, #0]
 8009f12:	eba8 0000 	sub.w	r0, r8, r0
 8009f16:	42a8      	cmp	r0, r5
 8009f18:	dd59      	ble.n	8009fce <__gethex+0x24e>
 8009f1a:	eba0 0805 	sub.w	r8, r0, r5
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7fe fb23 	bl	800856c <__any_on>
 8009f26:	4683      	mov	fp, r0
 8009f28:	b1b8      	cbz	r0, 8009f5a <__gethex+0x1da>
 8009f2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009f2e:	1159      	asrs	r1, r3, #5
 8009f30:	f003 021f 	and.w	r2, r3, #31
 8009f34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f38:	f04f 0b01 	mov.w	fp, #1
 8009f3c:	fa0b f202 	lsl.w	r2, fp, r2
 8009f40:	420a      	tst	r2, r1
 8009f42:	d00a      	beq.n	8009f5a <__gethex+0x1da>
 8009f44:	455b      	cmp	r3, fp
 8009f46:	dd06      	ble.n	8009f56 <__gethex+0x1d6>
 8009f48:	f1a8 0102 	sub.w	r1, r8, #2
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7fe fb0d 	bl	800856c <__any_on>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d138      	bne.n	8009fc8 <__gethex+0x248>
 8009f56:	f04f 0b02 	mov.w	fp, #2
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f7ff fea7 	bl	8009cb0 <rshift>
 8009f62:	4446      	add	r6, r8
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	42b3      	cmp	r3, r6
 8009f68:	da41      	bge.n	8009fee <__gethex+0x26e>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4648      	mov	r0, r9
 8009f6e:	f7fd feb1 	bl	8007cd4 <_Bfree>
 8009f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f74:	2300      	movs	r3, #0
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009f7c:	e78a      	b.n	8009e94 <__gethex+0x114>
 8009f7e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009f82:	2a2e      	cmp	r2, #46	; 0x2e
 8009f84:	d014      	beq.n	8009fb0 <__gethex+0x230>
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d106      	bne.n	8009f98 <__gethex+0x218>
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	f843 bb04 	str.w	fp, [r3], #4
 8009f90:	f04f 0b00 	mov.w	fp, #0
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	465b      	mov	r3, fp
 8009f98:	7828      	ldrb	r0, [r5, #0]
 8009f9a:	9303      	str	r3, [sp, #12]
 8009f9c:	f7ff feda 	bl	8009d54 <__hexdig_fun>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	f000 000f 	and.w	r0, r0, #15
 8009fa6:	4098      	lsls	r0, r3
 8009fa8:	ea4b 0b00 	orr.w	fp, fp, r0
 8009fac:	3304      	adds	r3, #4
 8009fae:	e7a1      	b.n	8009ef4 <__gethex+0x174>
 8009fb0:	45a8      	cmp	r8, r5
 8009fb2:	d8e8      	bhi.n	8009f86 <__gethex+0x206>
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	f7ff fdeb 	bl	8009b94 <strncmp>
 8009fbe:	4926      	ldr	r1, [pc, #152]	; (800a058 <__gethex+0x2d8>)
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d1df      	bne.n	8009f86 <__gethex+0x206>
 8009fc6:	e795      	b.n	8009ef4 <__gethex+0x174>
 8009fc8:	f04f 0b03 	mov.w	fp, #3
 8009fcc:	e7c5      	b.n	8009f5a <__gethex+0x1da>
 8009fce:	da0b      	bge.n	8009fe8 <__gethex+0x268>
 8009fd0:	eba5 0800 	sub.w	r8, r5, r0
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	4648      	mov	r0, r9
 8009fda:	f7fe f895 	bl	8008108 <__lshift>
 8009fde:	eba6 0608 	sub.w	r6, r6, r8
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	f100 0a14 	add.w	sl, r0, #20
 8009fe8:	f04f 0b00 	mov.w	fp, #0
 8009fec:	e7ba      	b.n	8009f64 <__gethex+0x1e4>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	dd73      	ble.n	800a0dc <__gethex+0x35c>
 8009ff4:	1b9e      	subs	r6, r3, r6
 8009ff6:	42b5      	cmp	r5, r6
 8009ff8:	dc34      	bgt.n	800a064 <__gethex+0x2e4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d023      	beq.n	800a048 <__gethex+0x2c8>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d025      	beq.n	800a050 <__gethex+0x2d0>
 800a004:	2b01      	cmp	r3, #1
 800a006:	d115      	bne.n	800a034 <__gethex+0x2b4>
 800a008:	42b5      	cmp	r5, r6
 800a00a:	d113      	bne.n	800a034 <__gethex+0x2b4>
 800a00c:	2d01      	cmp	r5, #1
 800a00e:	d10b      	bne.n	800a028 <__gethex+0x2a8>
 800a010:	9a02      	ldr	r2, [sp, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	2301      	movs	r3, #1
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	f8ca 3000 	str.w	r3, [sl]
 800a01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a020:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a024:	601c      	str	r4, [r3, #0]
 800a026:	e735      	b.n	8009e94 <__gethex+0x114>
 800a028:	1e69      	subs	r1, r5, #1
 800a02a:	4620      	mov	r0, r4
 800a02c:	f7fe fa9e 	bl	800856c <__any_on>
 800a030:	2800      	cmp	r0, #0
 800a032:	d1ed      	bne.n	800a010 <__gethex+0x290>
 800a034:	4621      	mov	r1, r4
 800a036:	4648      	mov	r0, r9
 800a038:	f7fd fe4c 	bl	8007cd4 <_Bfree>
 800a03c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a03e:	2300      	movs	r3, #0
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a046:	e725      	b.n	8009e94 <__gethex+0x114>
 800a048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f2      	bne.n	800a034 <__gethex+0x2b4>
 800a04e:	e7df      	b.n	800a010 <__gethex+0x290>
 800a050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1dc      	bne.n	800a010 <__gethex+0x290>
 800a056:	e7ed      	b.n	800a034 <__gethex+0x2b4>
 800a058:	0800a744 	.word	0x0800a744
 800a05c:	0800a5dd 	.word	0x0800a5dd
 800a060:	0800a8ee 	.word	0x0800a8ee
 800a064:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800a068:	f1bb 0f00 	cmp.w	fp, #0
 800a06c:	d133      	bne.n	800a0d6 <__gethex+0x356>
 800a06e:	f1b8 0f00 	cmp.w	r8, #0
 800a072:	d004      	beq.n	800a07e <__gethex+0x2fe>
 800a074:	4641      	mov	r1, r8
 800a076:	4620      	mov	r0, r4
 800a078:	f7fe fa78 	bl	800856c <__any_on>
 800a07c:	4683      	mov	fp, r0
 800a07e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a082:	2301      	movs	r3, #1
 800a084:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a088:	f008 081f 	and.w	r8, r8, #31
 800a08c:	fa03 f308 	lsl.w	r3, r3, r8
 800a090:	4213      	tst	r3, r2
 800a092:	4631      	mov	r1, r6
 800a094:	4620      	mov	r0, r4
 800a096:	bf18      	it	ne
 800a098:	f04b 0b02 	orrne.w	fp, fp, #2
 800a09c:	1bad      	subs	r5, r5, r6
 800a09e:	f7ff fe07 	bl	8009cb0 <rshift>
 800a0a2:	687e      	ldr	r6, [r7, #4]
 800a0a4:	f04f 0802 	mov.w	r8, #2
 800a0a8:	f1bb 0f00 	cmp.w	fp, #0
 800a0ac:	d04a      	beq.n	800a144 <__gethex+0x3c4>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d016      	beq.n	800a0e2 <__gethex+0x362>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d018      	beq.n	800a0ea <__gethex+0x36a>
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d109      	bne.n	800a0d0 <__gethex+0x350>
 800a0bc:	f01b 0f02 	tst.w	fp, #2
 800a0c0:	d006      	beq.n	800a0d0 <__gethex+0x350>
 800a0c2:	f8da 3000 	ldr.w	r3, [sl]
 800a0c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a0ca:	f01b 0f01 	tst.w	fp, #1
 800a0ce:	d10f      	bne.n	800a0f0 <__gethex+0x370>
 800a0d0:	f048 0810 	orr.w	r8, r8, #16
 800a0d4:	e036      	b.n	800a144 <__gethex+0x3c4>
 800a0d6:	f04f 0b01 	mov.w	fp, #1
 800a0da:	e7d0      	b.n	800a07e <__gethex+0x2fe>
 800a0dc:	f04f 0801 	mov.w	r8, #1
 800a0e0:	e7e2      	b.n	800a0a8 <__gethex+0x328>
 800a0e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e4:	f1c3 0301 	rsb	r3, r3, #1
 800a0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0ef      	beq.n	800a0d0 <__gethex+0x350>
 800a0f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0f4:	f104 0214 	add.w	r2, r4, #20
 800a0f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a102:	2300      	movs	r3, #0
 800a104:	4694      	mov	ip, r2
 800a106:	f852 1b04 	ldr.w	r1, [r2], #4
 800a10a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a10e:	d01e      	beq.n	800a14e <__gethex+0x3ce>
 800a110:	3101      	adds	r1, #1
 800a112:	f8cc 1000 	str.w	r1, [ip]
 800a116:	f1b8 0f02 	cmp.w	r8, #2
 800a11a:	f104 0214 	add.w	r2, r4, #20
 800a11e:	d13d      	bne.n	800a19c <__gethex+0x41c>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	42ab      	cmp	r3, r5
 800a126:	d10b      	bne.n	800a140 <__gethex+0x3c0>
 800a128:	1169      	asrs	r1, r5, #5
 800a12a:	2301      	movs	r3, #1
 800a12c:	f005 051f 	and.w	r5, r5, #31
 800a130:	fa03 f505 	lsl.w	r5, r3, r5
 800a134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a138:	421d      	tst	r5, r3
 800a13a:	bf18      	it	ne
 800a13c:	f04f 0801 	movne.w	r8, #1
 800a140:	f048 0820 	orr.w	r8, r8, #32
 800a144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a146:	601c      	str	r4, [r3, #0]
 800a148:	9b02      	ldr	r3, [sp, #8]
 800a14a:	601e      	str	r6, [r3, #0]
 800a14c:	e6a2      	b.n	8009e94 <__gethex+0x114>
 800a14e:	4290      	cmp	r0, r2
 800a150:	f842 3c04 	str.w	r3, [r2, #-4]
 800a154:	d8d6      	bhi.n	800a104 <__gethex+0x384>
 800a156:	68a2      	ldr	r2, [r4, #8]
 800a158:	4593      	cmp	fp, r2
 800a15a:	db17      	blt.n	800a18c <__gethex+0x40c>
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	4648      	mov	r0, r9
 800a160:	3101      	adds	r1, #1
 800a162:	f7fd fd77 	bl	8007c54 <_Balloc>
 800a166:	4682      	mov	sl, r0
 800a168:	b918      	cbnz	r0, 800a172 <__gethex+0x3f2>
 800a16a:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <__gethex+0x458>)
 800a16c:	4602      	mov	r2, r0
 800a16e:	2184      	movs	r1, #132	; 0x84
 800a170:	e6b3      	b.n	8009eda <__gethex+0x15a>
 800a172:	6922      	ldr	r2, [r4, #16]
 800a174:	3202      	adds	r2, #2
 800a176:	f104 010c 	add.w	r1, r4, #12
 800a17a:	0092      	lsls	r2, r2, #2
 800a17c:	300c      	adds	r0, #12
 800a17e:	f7ff fd4d 	bl	8009c1c <memcpy>
 800a182:	4621      	mov	r1, r4
 800a184:	4648      	mov	r0, r9
 800a186:	f7fd fda5 	bl	8007cd4 <_Bfree>
 800a18a:	4654      	mov	r4, sl
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	1c51      	adds	r1, r2, #1
 800a190:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a194:	6121      	str	r1, [r4, #16]
 800a196:	2101      	movs	r1, #1
 800a198:	6151      	str	r1, [r2, #20]
 800a19a:	e7bc      	b.n	800a116 <__gethex+0x396>
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	4559      	cmp	r1, fp
 800a1a0:	dd0b      	ble.n	800a1ba <__gethex+0x43a>
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7ff fd83 	bl	8009cb0 <rshift>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	42b3      	cmp	r3, r6
 800a1b0:	f6ff aedb 	blt.w	8009f6a <__gethex+0x1ea>
 800a1b4:	f04f 0801 	mov.w	r8, #1
 800a1b8:	e7c2      	b.n	800a140 <__gethex+0x3c0>
 800a1ba:	f015 051f 	ands.w	r5, r5, #31
 800a1be:	d0f9      	beq.n	800a1b4 <__gethex+0x434>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	f1c5 0520 	rsb	r5, r5, #32
 800a1c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a1cc:	f7fd fe34 	bl	8007e38 <__hi0bits>
 800a1d0:	42a8      	cmp	r0, r5
 800a1d2:	dbe6      	blt.n	800a1a2 <__gethex+0x422>
 800a1d4:	e7ee      	b.n	800a1b4 <__gethex+0x434>
 800a1d6:	bf00      	nop
 800a1d8:	0800a5dd 	.word	0x0800a5dd

0800a1dc <L_shift>:
 800a1dc:	f1c2 0208 	rsb	r2, r2, #8
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	b570      	push	{r4, r5, r6, lr}
 800a1e4:	f1c2 0620 	rsb	r6, r2, #32
 800a1e8:	6843      	ldr	r3, [r0, #4]
 800a1ea:	6804      	ldr	r4, [r0, #0]
 800a1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a1f0:	432c      	orrs	r4, r5
 800a1f2:	40d3      	lsrs	r3, r2
 800a1f4:	6004      	str	r4, [r0, #0]
 800a1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1fa:	4288      	cmp	r0, r1
 800a1fc:	d3f4      	bcc.n	800a1e8 <L_shift+0xc>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}

0800a200 <__match>:
 800a200:	b530      	push	{r4, r5, lr}
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	3301      	adds	r3, #1
 800a206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20a:	b914      	cbnz	r4, 800a212 <__match+0x12>
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	bd30      	pop	{r4, r5, pc}
 800a212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a216:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a21a:	2d19      	cmp	r5, #25
 800a21c:	bf98      	it	ls
 800a21e:	3220      	addls	r2, #32
 800a220:	42a2      	cmp	r2, r4
 800a222:	d0f0      	beq.n	800a206 <__match+0x6>
 800a224:	2000      	movs	r0, #0
 800a226:	e7f3      	b.n	800a210 <__match+0x10>

0800a228 <__hexnan>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	6801      	ldr	r1, [r0, #0]
 800a230:	115e      	asrs	r6, r3, #5
 800a232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a236:	f013 031f 	ands.w	r3, r3, #31
 800a23a:	b087      	sub	sp, #28
 800a23c:	bf18      	it	ne
 800a23e:	3604      	addne	r6, #4
 800a240:	2500      	movs	r5, #0
 800a242:	1f37      	subs	r7, r6, #4
 800a244:	4682      	mov	sl, r0
 800a246:	4690      	mov	r8, r2
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a24e:	46b9      	mov	r9, r7
 800a250:	463c      	mov	r4, r7
 800a252:	9502      	str	r5, [sp, #8]
 800a254:	46ab      	mov	fp, r5
 800a256:	784a      	ldrb	r2, [r1, #1]
 800a258:	1c4b      	adds	r3, r1, #1
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	b342      	cbz	r2, 800a2b0 <__hexnan+0x88>
 800a25e:	4610      	mov	r0, r2
 800a260:	9105      	str	r1, [sp, #20]
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	f7ff fd76 	bl	8009d54 <__hexdig_fun>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d14f      	bne.n	800a30c <__hexnan+0xe4>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	9905      	ldr	r1, [sp, #20]
 800a270:	2a20      	cmp	r2, #32
 800a272:	d818      	bhi.n	800a2a6 <__hexnan+0x7e>
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	459b      	cmp	fp, r3
 800a278:	dd13      	ble.n	800a2a2 <__hexnan+0x7a>
 800a27a:	454c      	cmp	r4, r9
 800a27c:	d206      	bcs.n	800a28c <__hexnan+0x64>
 800a27e:	2d07      	cmp	r5, #7
 800a280:	dc04      	bgt.n	800a28c <__hexnan+0x64>
 800a282:	462a      	mov	r2, r5
 800a284:	4649      	mov	r1, r9
 800a286:	4620      	mov	r0, r4
 800a288:	f7ff ffa8 	bl	800a1dc <L_shift>
 800a28c:	4544      	cmp	r4, r8
 800a28e:	d950      	bls.n	800a332 <__hexnan+0x10a>
 800a290:	2300      	movs	r3, #0
 800a292:	f1a4 0904 	sub.w	r9, r4, #4
 800a296:	f844 3c04 	str.w	r3, [r4, #-4]
 800a29a:	f8cd b008 	str.w	fp, [sp, #8]
 800a29e:	464c      	mov	r4, r9
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	9903      	ldr	r1, [sp, #12]
 800a2a4:	e7d7      	b.n	800a256 <__hexnan+0x2e>
 800a2a6:	2a29      	cmp	r2, #41	; 0x29
 800a2a8:	d155      	bne.n	800a356 <__hexnan+0x12e>
 800a2aa:	3102      	adds	r1, #2
 800a2ac:	f8ca 1000 	str.w	r1, [sl]
 800a2b0:	f1bb 0f00 	cmp.w	fp, #0
 800a2b4:	d04f      	beq.n	800a356 <__hexnan+0x12e>
 800a2b6:	454c      	cmp	r4, r9
 800a2b8:	d206      	bcs.n	800a2c8 <__hexnan+0xa0>
 800a2ba:	2d07      	cmp	r5, #7
 800a2bc:	dc04      	bgt.n	800a2c8 <__hexnan+0xa0>
 800a2be:	462a      	mov	r2, r5
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff ff8a 	bl	800a1dc <L_shift>
 800a2c8:	4544      	cmp	r4, r8
 800a2ca:	d934      	bls.n	800a336 <__hexnan+0x10e>
 800a2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2da:	429f      	cmp	r7, r3
 800a2dc:	d2f9      	bcs.n	800a2d2 <__hexnan+0xaa>
 800a2de:	1b3b      	subs	r3, r7, r4
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	3e03      	subs	r6, #3
 800a2e8:	3401      	adds	r4, #1
 800a2ea:	42a6      	cmp	r6, r4
 800a2ec:	bf38      	it	cc
 800a2ee:	2304      	movcc	r3, #4
 800a2f0:	4443      	add	r3, r8
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f843 2b04 	str.w	r2, [r3], #4
 800a2f8:	429f      	cmp	r7, r3
 800a2fa:	d2fb      	bcs.n	800a2f4 <__hexnan+0xcc>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	b91b      	cbnz	r3, 800a308 <__hexnan+0xe0>
 800a300:	4547      	cmp	r7, r8
 800a302:	d126      	bne.n	800a352 <__hexnan+0x12a>
 800a304:	2301      	movs	r3, #1
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	2005      	movs	r0, #5
 800a30a:	e025      	b.n	800a358 <__hexnan+0x130>
 800a30c:	3501      	adds	r5, #1
 800a30e:	2d08      	cmp	r5, #8
 800a310:	f10b 0b01 	add.w	fp, fp, #1
 800a314:	dd06      	ble.n	800a324 <__hexnan+0xfc>
 800a316:	4544      	cmp	r4, r8
 800a318:	d9c3      	bls.n	800a2a2 <__hexnan+0x7a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a320:	2501      	movs	r5, #1
 800a322:	3c04      	subs	r4, #4
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	f000 000f 	and.w	r0, r0, #15
 800a32a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a32e:	6020      	str	r0, [r4, #0]
 800a330:	e7b7      	b.n	800a2a2 <__hexnan+0x7a>
 800a332:	2508      	movs	r5, #8
 800a334:	e7b5      	b.n	800a2a2 <__hexnan+0x7a>
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0df      	beq.n	800a2fc <__hexnan+0xd4>
 800a33c:	f1c3 0320 	rsb	r3, r3, #32
 800a340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a344:	40da      	lsrs	r2, r3
 800a346:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a34a:	4013      	ands	r3, r2
 800a34c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a350:	e7d4      	b.n	800a2fc <__hexnan+0xd4>
 800a352:	3f04      	subs	r7, #4
 800a354:	e7d2      	b.n	800a2fc <__hexnan+0xd4>
 800a356:	2004      	movs	r0, #4
 800a358:	b007      	add	sp, #28
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a35e <__ascii_mbtowc>:
 800a35e:	b082      	sub	sp, #8
 800a360:	b901      	cbnz	r1, 800a364 <__ascii_mbtowc+0x6>
 800a362:	a901      	add	r1, sp, #4
 800a364:	b142      	cbz	r2, 800a378 <__ascii_mbtowc+0x1a>
 800a366:	b14b      	cbz	r3, 800a37c <__ascii_mbtowc+0x1e>
 800a368:	7813      	ldrb	r3, [r2, #0]
 800a36a:	600b      	str	r3, [r1, #0]
 800a36c:	7812      	ldrb	r2, [r2, #0]
 800a36e:	1e10      	subs	r0, r2, #0
 800a370:	bf18      	it	ne
 800a372:	2001      	movne	r0, #1
 800a374:	b002      	add	sp, #8
 800a376:	4770      	bx	lr
 800a378:	4610      	mov	r0, r2
 800a37a:	e7fb      	b.n	800a374 <__ascii_mbtowc+0x16>
 800a37c:	f06f 0001 	mvn.w	r0, #1
 800a380:	e7f8      	b.n	800a374 <__ascii_mbtowc+0x16>

0800a382 <_realloc_r>:
 800a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	4680      	mov	r8, r0
 800a388:	4614      	mov	r4, r2
 800a38a:	460e      	mov	r6, r1
 800a38c:	b921      	cbnz	r1, 800a398 <_realloc_r+0x16>
 800a38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	4611      	mov	r1, r2
 800a394:	f7fd bbd2 	b.w	8007b3c <_malloc_r>
 800a398:	b92a      	cbnz	r2, 800a3a6 <_realloc_r+0x24>
 800a39a:	f7fd fb5b 	bl	8007a54 <_free_r>
 800a39e:	4625      	mov	r5, r4
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a6:	f000 f842 	bl	800a42e <_malloc_usable_size_r>
 800a3aa:	4284      	cmp	r4, r0
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	d802      	bhi.n	800a3b6 <_realloc_r+0x34>
 800a3b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3b4:	d812      	bhi.n	800a3dc <_realloc_r+0x5a>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	f7fd fbbf 	bl	8007b3c <_malloc_r>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0ed      	beq.n	800a3a0 <_realloc_r+0x1e>
 800a3c4:	42bc      	cmp	r4, r7
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	bf28      	it	cs
 800a3cc:	463a      	movcs	r2, r7
 800a3ce:	f7ff fc25 	bl	8009c1c <memcpy>
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	f7fd fb3d 	bl	8007a54 <_free_r>
 800a3da:	e7e1      	b.n	800a3a0 <_realloc_r+0x1e>
 800a3dc:	4635      	mov	r5, r6
 800a3de:	e7df      	b.n	800a3a0 <_realloc_r+0x1e>

0800a3e0 <__ascii_wctomb>:
 800a3e0:	b149      	cbz	r1, 800a3f6 <__ascii_wctomb+0x16>
 800a3e2:	2aff      	cmp	r2, #255	; 0xff
 800a3e4:	bf85      	ittet	hi
 800a3e6:	238a      	movhi	r3, #138	; 0x8a
 800a3e8:	6003      	strhi	r3, [r0, #0]
 800a3ea:	700a      	strbls	r2, [r1, #0]
 800a3ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a3f0:	bf98      	it	ls
 800a3f2:	2001      	movls	r0, #1
 800a3f4:	4770      	bx	lr
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4770      	bx	lr
	...

0800a3fc <fiprintf>:
 800a3fc:	b40e      	push	{r1, r2, r3}
 800a3fe:	b503      	push	{r0, r1, lr}
 800a400:	4601      	mov	r1, r0
 800a402:	ab03      	add	r3, sp, #12
 800a404:	4805      	ldr	r0, [pc, #20]	; (800a41c <fiprintf+0x20>)
 800a406:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	f7ff f8e7 	bl	80095e0 <_vfiprintf_r>
 800a412:	b002      	add	sp, #8
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b003      	add	sp, #12
 800a41a:	4770      	bx	lr
 800a41c:	20000064 	.word	0x20000064

0800a420 <abort>:
 800a420:	b508      	push	{r3, lr}
 800a422:	2006      	movs	r0, #6
 800a424:	f000 f834 	bl	800a490 <raise>
 800a428:	2001      	movs	r0, #1
 800a42a:	f000 f85d 	bl	800a4e8 <_exit>

0800a42e <_malloc_usable_size_r>:
 800a42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a432:	1f18      	subs	r0, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfbc      	itt	lt
 800a438:	580b      	ldrlt	r3, [r1, r0]
 800a43a:	18c0      	addlt	r0, r0, r3
 800a43c:	4770      	bx	lr

0800a43e <_raise_r>:
 800a43e:	291f      	cmp	r1, #31
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4604      	mov	r4, r0
 800a444:	460d      	mov	r5, r1
 800a446:	d904      	bls.n	800a452 <_raise_r+0x14>
 800a448:	2316      	movs	r3, #22
 800a44a:	6003      	str	r3, [r0, #0]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a454:	b112      	cbz	r2, 800a45c <_raise_r+0x1e>
 800a456:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a45a:	b94b      	cbnz	r3, 800a470 <_raise_r+0x32>
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 f831 	bl	800a4c4 <_getpid_r>
 800a462:	462a      	mov	r2, r5
 800a464:	4601      	mov	r1, r0
 800a466:	4620      	mov	r0, r4
 800a468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a46c:	f000 b818 	b.w	800a4a0 <_kill_r>
 800a470:	2b01      	cmp	r3, #1
 800a472:	d00a      	beq.n	800a48a <_raise_r+0x4c>
 800a474:	1c59      	adds	r1, r3, #1
 800a476:	d103      	bne.n	800a480 <_raise_r+0x42>
 800a478:	2316      	movs	r3, #22
 800a47a:	6003      	str	r3, [r0, #0]
 800a47c:	2001      	movs	r0, #1
 800a47e:	e7e7      	b.n	800a450 <_raise_r+0x12>
 800a480:	2400      	movs	r4, #0
 800a482:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a486:	4628      	mov	r0, r5
 800a488:	4798      	blx	r3
 800a48a:	2000      	movs	r0, #0
 800a48c:	e7e0      	b.n	800a450 <_raise_r+0x12>
	...

0800a490 <raise>:
 800a490:	4b02      	ldr	r3, [pc, #8]	; (800a49c <raise+0xc>)
 800a492:	4601      	mov	r1, r0
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	f7ff bfd2 	b.w	800a43e <_raise_r>
 800a49a:	bf00      	nop
 800a49c:	20000064 	.word	0x20000064

0800a4a0 <_kill_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_kill_r+0x20>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	f000 f813 	bl	800a4d8 <_kill>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d102      	bne.n	800a4bc <_kill_r+0x1c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <_kill_r+0x1c>
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000710 	.word	0x20000710

0800a4c4 <_getpid_r>:
 800a4c4:	f000 b800 	b.w	800a4c8 <_getpid>

0800a4c8 <_getpid>:
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <_getpid+0xc>)
 800a4ca:	2258      	movs	r2, #88	; 0x58
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d2:	4770      	bx	lr
 800a4d4:	20000710 	.word	0x20000710

0800a4d8 <_kill>:
 800a4d8:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <_kill+0xc>)
 800a4da:	2258      	movs	r2, #88	; 0x58
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e2:	4770      	bx	lr
 800a4e4:	20000710 	.word	0x20000710

0800a4e8 <_exit>:
 800a4e8:	e7fe      	b.n	800a4e8 <_exit>
	...

0800a4ec <_init>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr

0800a4f8 <_fini>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr
